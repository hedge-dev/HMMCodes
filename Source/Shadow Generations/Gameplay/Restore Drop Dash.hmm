Code "Restore Drop Dash" in "Gameplay" by "Hyper & Sora" does
/*
Restores the drop dash ability from Sonic Frontiers.

Notes;
- Drop Dash is not available whilst Doom Wing is active.
- Drop Dash is not available whilst in auto run sections.
- Drop Dash is not affected by the pollution Doom Morph uses to get around.
*/
//
    #include "Helpers" noemit

    #lib "GameManager"
    #lib "Memory"

    #import "GOComponents"

    static bool _isInitialised = false;
    static bool _isDropDashGrounded = false;
    static bool _isSideView = false;
//
{
    if (!_isInitialised)
    {
        // v1.1.0.0:  0x1406E8890
        // v1.1.0.1:  0x1406E8B40
        // v1.10.0.0: 0x14070C120
        // v1.10.0.1: 0x14070C140
        var fpPlaySound = Memory.ReadCall
        (
            /* v1.1.0.1:  0x14B402632 */
            /* v1.10.0.0: 0x14AC77801 */
            /* v1.10.0.1: 0x14A7ADFA8 */
            ScanSignature
            (
                "\xE8\xCC\xCC\xCC\xCC\x48\x8D\x8F\xE8\x00\x00\x00\x48\x89\xC2",
                "x????xxxxxxxxxx"
            )
        );

        // v1.1.0.0: 0x1406E13D0
        // v1.1.0.1: 0x1406E1680
        var fpDSurfTransition = ScanSignature
        (
            "\x48\x89\x5C\x24\x10\x48\x89\x7C\x24\x18\x4C\x89\x74\x24\x20\x55\x48\x8D\x6C\x24\xA9\x48\x81\xEC\xF0",
            "xxxxxxxxxxxxxxxxxxxxxxxxx"
        );

        // Force Drop Dash flag in BlackboardStatus.
        WriteAsmHook
        (
            $@"
                push rax
                mov  rdx, qword ptr [rbx + 0x28]        ; RDX = BlackboardStatus
                mov  rax, 0x0100000000000000
                test qword ptr [rdx + 0x40], rax        ; Check Doom Wing flag
                jz   enable
                mov  rax, 0xFFFFFFFFFDFFFFFF
                and  qword ptr [rdx + 0x30], rax        ; Disable Drop Dash flag
                jmp  exit
            enable:
                or   qword ptr [rdx + 0x30], 0x02000000 ; Enable Drop Dash flag
            exit:
                pop  rax
            ",

            /* v1.1.0.0:  0x14C5D9C78 */
            /* v1.1.0.1:  0x14B4024F2 */
            /* v1.10.0.0: 0x14AC776DB */
            ScanSignature
            (
                "\x0F\x28\xC1\x0F\xC6\xC1\x99\xF3\x0F\x58\xC8\x0F\xC6\xC0\x55\xF3\x0F\x58\xC8\x41\x0F\x2F\xC8\x0F\x47\xD0",
                "xxxxxxxxxxxxxxxxxxxxxxxxxx"
            ),

            HookBehavior.After
        );

        // Populate charge sound.
        WriteAsmHook
        (
            $@"
                mov r8, {TO_STRING_PTR("sd_doomspower")}
            ",

            /* v1.1.0.0: 0x14C5D9D8F */
            /* v1.1.0.1: 0x14B402623 */
            ScanSignature
            (
                "\x4C\x8D\x05\xCC\xCC\xCC\xCC\x48\x89\xDA\x48\x8D\x4C\x24\x70",
                "xxx????xxxxxxxx"
            ),

            HookBehavior.Before
        );

        // Populate release sound.
        WriteAsmHook
        (
            $@"
                mov  r8, {TO_STRING_PTR("sd_wing_airboost")}
                mov  rdx, rsi
                lea  rcx, qword ptr [rsp + 0x70]
                mov  rax, {fpPlaySound}
                call rax
                mov  r8, {TO_STRING_PTR("sd_chaos_spear_fire")}
                mov  rdx, rsi
                lea  rcx, qword ptr [rsp + 0x70]
                mov  rax, {fpPlaySound}
                call rax
                mov  r8, {TO_STRING_PTR("sd_doomspower")}
                mov  rdx, rsi
                lea  rcx, qword ptr [rsp + 0x70]
            ",

            /* v1.1.0.0: 0x14068D2D8 */
            /* v1.1.0.1: 0x14068D588 */
            ScanSignature
            (
                "\x4C\x8D\x05\xCC\xCC\xCC\xCC\x48\x8B\xD6\x48\x8D\x4C\x24\x70\xE8\xCC\xCC\xCC\xCC\x48\x8D\x8D\xE0\x00\x00\x00\x48\x8B\xD0\xE8\xCC\xCC\xCC\xCC\xB2\x01",
                "xxx????xxxxxxxxx????xxxxxxxxxxx????xx"
            ),

            HookBehavior.Replace
        );

        fixed (bool* p_isDropDashGrounded = &_isDropDashGrounded)
        fixed (bool* p_isSideView = &_isSideView)
        {
            // v1.1.0.0:  0x140639BB4
            // v1.1.0.1:  0x140639E64
            // v1.10.0.0: 0x14065C034
            var sigDropDashAirPosture = ScanSignature
            (
                "\x0F\x29\xB4\x24\x80\x00\x00\x00\x48\x8D\x54\x24\x20\x0F\x10\xB3\x00\x01\x00\x00",
                "xxxxxxxxxxxxxxxxxxxx"
            );

            // v1.1.0.1: 0x14063A090
            var fpDropDashGroundPosture = Memory.ReadCall
            (
                /* v1.1.0.1: 0x140639E5A */
                ScanSignature
                (
                    "\xE8\xCC\xCC\xCC\xCC\xE9\x03\x01\x00\x00\x0F\x29\xB4\x24\x80\x00\x00\x00",
                    "x????xxxxxxxxxxxxx"
                )
            );

            // Fix 2D rolling and Doom Surf transitions.
            WriteAsmHook
            (
                $@"
                    ; Preserve grounded flag.
                    mov    rdx, {(long)p_isDropDashGrounded}
                    mov    byte ptr [rdx], al

                    ; Call Doom Surf transition method.
                    xor    dl, dl
                    mov    rcx, qword ptr [rsi + 0x18]  ; RCX = PlayerPosture->PlayerPostureContext
                    mov    rcx, qword ptr [rcx + 0x10]  ; RCX = PlayerPosture->PlayerPostureContext->Player
                    mov    rcx, qword ptr [rcx + 0x2D0] ; RCX = PlayerPosture->PlayerPostureContext->Player->PlayerContext
                    mov    rax, {fpDSurfTransition}
                    call   rax

                    ; Restore grounded flag (this is fucking dirty, but push/pop doesn't work here).
                    mov    rax, {(long)p_isDropDashGrounded}
                    mov    al, byte ptr [rax]

                    ; If grounded, jump to ground posture.
                    test   al, al
                    jnz    doGroundPosture

                    ; Otherwise, jump to air posture.
                    mov    rax, {sigDropDashAirPosture}
                    jmp    rax

                doGroundPosture:
                    ; Don't do ground posture if we're in 2D.
                    mov    rcx, {(long)p_isSideView}
                    cmp    byte ptr [rcx], 0
                    jnz    exit

                    ; Call ground posture method.
                    movaps xmm1, xmm7
                    mov    rcx, rsi
                    mov    rax, {fpDropDashGroundPosture}
                    call   rax

                exit:
                ",

                /* v1.1.0.1: 0x140639E50 */
                ScanSignature
                (
                    "\x84\xC0\x74\x10\x0F\x28\xCF\x48\x8B\xCE",
                    "xxxxxxxxxx"
                ),

                HookBehavior.Replace
            );

            // Force minDashSpeed to minDashSpeedMax in 3D.
            WriteAsmHook
            (
                $@"
                    mov   rcx, {(long)p_isSideView}
                    cmp   byte ptr [rcx], 0
                    jnz   exit
                    mov   ecx, dword ptr [rbx + 0x08]
                    mov   dword ptr [rbx + 0x04], ecx
                exit:
                ",

                /* v1.1.0.1:  0x14BC07C91 */
                /* v1.10.0.0: 0x14B37F601 */
                ScanSignature
                (
                    "\xF3\x0F\x10\x53\x08\x48\x8D\x54\x24\x30",
                    "xxxxxxxxxx"
                ),

                HookBehavior.After
            );
        }

        _isInitialised = true;
    }

    var pPlayer = GameManager.GetGameObject("Shadow");

    if (pPlayer == null)
        return;

    var pGOCPlayerParameter = pPlayer->GetGOC<GOCPlayerParameter>();

    if (pGOCPlayerParameter == null)
        return;
        
    _isSideView = pGOCPlayerParameter->CurrentModePackageType == GOCPlayerParameter.ModePackageType.SideView;
}