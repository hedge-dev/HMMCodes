Patch "Disable FPS Limit (experimental)" in "Graphics/Display" by "NM, M&M & Hyper" does "Disables the frame rate limiter, allowing the game to run above its targeted 30/60/120 FPS limit."
//
    #lib "Memory"
//
{
    WriteProtected<byte>
    (
        /* v1.1.0.0: 0x140A23CE8 */
        /* v1.1.0.1: 0x140A23FB8 */
        ScanSignature
        (
            "\x0F\x83\xA1\x00\x00\x00\xF2\x0F\x10\xA3\x50\x01\x00\x00",
            "xxxxxxxxxxxxxx"
        ),

        0xE9, 0xB0, 0x00, 0x00, 0x00
    );

    WriteNop
    (
        /* v1.1.0.0:  0x140A23DEB */
        /* v1.1.0.1:  0x140A240BB */
        /* v1.10.0.0: 0x140A4F0DB */
        ScanSignature
        (
            "\x72\xC3\x44\x0F\x28\x4C\x24\x30",
            "xxxxxxxx"
        ),

        2
    );

    /* The change in speed is seemingly caused by the cap not being in sync with the current FPS. To fix this, we must first uncap the value of a current FPS address.
       The cap is controlled by the opcode "cmova rax, rcx" where RAX is the calculated current FPS and RCX is the user's set FPS cap. To remove this, we will be scanning for the opcode before it. */
    WriteAsmHook
    (
        /* To get rid of the opcode which enforces the cap, we simply do not include it. We can also remove "comiss xmm1, dword ptr [rcx]" which invokes the comparison.
           With the current FPS address' value uncapped (EAX), we can now write it to the FPS cap address, which is stored in RDI. This will sync the FPS cap with the actual FPS, fixing the speedup issue. */
        @"
            mov eax, dword ptr [rax]
            mov dword ptr [rbx + 0x144], eax
            mov dword ptr [rcx], eax
        ",
        
        /* v1.1.0.0: 0x140A23EFC */
        /* v1.1.0.1: 0x140A241CC */
        ScanSignature
        (
            "\x0F\x2F\x09\x48\x0F\x47\xC1\x8B\x00",
            "xxxxxxxxx"
        ),
        
        HookBehavior.Replace
    );
    
    // v1.1.0.0: 0x14782FA63
    // v1.1.0.1: 0x147231BC9
    long jmpAddr = ScanSignature
    (
        "\x74\x35\x48\x8B\x05\xCC\xCC\xCC\xCC\xF3\x0F\x10\x0D\xCC\xCC\xCC\xCC\xC6\x40\x10\x01\x48\x8B\x0D\xCC\xCC\xCC\xCC\xE8\xCC\xCC\xCC\xCC\xF3\x0F\x10\x05\xCC\xCC\xCC\xCC\x41\xB0\x01\x31\xD2",
        "xxxxx????xxxx????xxxxxxx????x????xxxx????xxxxx"
    );

    if (jmpAddr == 0)
        return;
    
    // This removes the framerate limiting code for cutscenes.
    Memory.WriteForceJump(jmpAddr);
}