Code "Adjust Aspect Ratio to Resolution (experimental)" in "Graphics/Display" by "M&M & Hyper" does 
/*
Dynamically adjusts the aspect ratio to match the game resolution (recommended for non-16:9 resolutions).

Notes;
- This code will still function at 16:9 resolutions, but will only fix minor aspect ratio issues (such as improper cutscene aspect ratio).

Known issues;
- The UI still renders at 16:9 and details that are supposed to be off screen will be visible at wider aspect ratios.
- Pre-rendered cutscenes will stretch to your aspect ratio.
- The expected aspect ratio will only apply to a newly set resolution when you change the screen mode to another and back.
- Vignette (the circular shadowing effect on the screen) is pretty egregious at aspect ratios wider than 21:9, it is highly recommended to use the Disable Vignette code to remove it.
*/
//
    #lib "Win32"

    using System.Diagnostics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential)]
    struct RECT
    {
        public int Left;
        public int Top;
        public int Right;
        public int Bottom;
    }

    [DllImport("user32.dll")]
    static extern bool GetClientRect(IntPtr hWnd, ref RECT lpRect);

    static bool _isInitialised = false;

    static float _aspectRatio = 1920.0f / 1080.0f;
    static float _eventFieldOfView = 0.0f;

    static long _mainAspectRatioAddr = 0;
    static long _dvSceneAspectRatioAddr = 0;
//
{
    if (!_isInitialised)
    {
        // v1.1.0.0:  0x14012EE57
        // v1.1.0.1:  0x14012F107
        // v1.10.0.0: 0x140134327
        long mainAspectRatioInstrAddr = ScanSignature
        (
            "\xF3\x0F\x59\x05\xCC\xCC\xCC\xCC\x89\x4C\x24\x3C",
            "xxxx????xxxx"
        );

        // v1.1.0.0/v1.1.0.1: 0x1411669B4
        // v1.10.0.0: 0x141196424
        _mainAspectRatioAddr = mainAspectRatioInstrAddr + Read<uint>(mainAspectRatioInstrAddr + 4) + 8;

        // v1.1.0.0:  0x140A6867C
        // v1.1.0.1:  0x140A6894C
        // v1.10.0.0: 0x140A9351C
        _dvSceneAspectRatioAddr = ScanSignature
        (
            "\xC7\x81\x04\x02\x00\x00\x39\x8E\xE3\x3F",
            "xxxxxxxxxx"
        );

        fixed (float* p_aspectRatio = &_aspectRatio)
        fixed (float* p_eventFieldOfView = &_eventFieldOfView)
        {
            WriteAsmHook
            (
                $@"
                    movss  dword ptr [rsi + 0x54], xmm0

                    ; check if current event aspect ratio has been modified
                    mov    rcx, {(long)p_aspectRatio}
                    movss  xmm0, dword ptr [rcx]
                    movss  xmm1, dword ptr [rsi + 0x58]
                    comiss xmm0, xmm1
                    je     exit

                    ; multiply original aspect ratio by new aspect ratio
                    movss  xmm0, dword ptr [rsi + 0x58]
                    mov    rcx, {(long)p_aspectRatio}
                    movss  xmm1, dword ptr [rcx]
                    divps  xmm0, xmm1
                    movss  xmm1, xmm0

                    ; compute new field of view from aspect ratio difference
                    movss  xmm0, dword ptr [rsi + 0x54]
                    mulps  xmm0, xmm1
                    movss  dword ptr [rsi + 0x54], xmm0
                    mov    rcx, {(long)p_eventFieldOfView}
                    movss  dword ptr [rcx], xmm0

                exit:
                    ; set new aspect ratio
                    mov    rcx, {(long)p_aspectRatio}
                    mov    ecx, dword ptr [rcx]
                    mov    dword ptr [rsi + 0x58], ecx

                    ; restore original code
                    mov    ecx, dword ptr [rdi + 0x14]
                    bswap  ecx
                    mov    dword ptr [rsi + 0x70], ecx
                    test   ecx, ecx
                ",

                /* v1.10.0.0: 0x140F388D5 */
                ScanSignature
                (
                    "\xF3\x0F\x11\x46\x54\x8B\x4F\x14",
                    "xxxxxxxx"
                ),

                HookBehavior.Replace
            );
        }

        _isInitialised = true;
    }

    if (_mainAspectRatioAddr == 0)
        return;

    var clientRect = new RECT();

    if (!GetClientRect(Win32.GetGameWindowHandle(), ref clientRect))
        return;

    float width  = (float)(clientRect.Right - clientRect.Left);
    float height = (float)(clientRect.Bottom - clientRect.Top);

    _aspectRatio = width / height;

    WriteProtected<float>(_mainAspectRatioAddr, _aspectRatio);

    if (_dvSceneAspectRatioAddr != 0)
        WriteProtected<float>(_dvSceneAspectRatioAddr + 6, _aspectRatio);
}