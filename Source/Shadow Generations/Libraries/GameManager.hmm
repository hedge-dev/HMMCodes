Library "GameManager" by "Hyper, ĐeäTh & Sajid" 
{
    #include "Helpers" noemit
    
    #lib "GameObject"
    #lib "GameService"
    #lib "Memory"
    
    #import "Collections"

    using System.Runtime.InteropServices;
    
    /// <summary>
    /// A struct representation of `hh::game::GameManager`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x358)]
    public struct Data
    {
        /// <summary>
        /// An array of pointers to `hh::game::GameObject` instances.
        /// </summary>
        [FieldOffset(0x130)] public ObjectMoveArray<Memory.Pointer<GameObject.Data>> GameObjects;

        /// <summary>
        /// An array of pointers to `hh::game::GameService` instances.
        /// </summary>
        [FieldOffset(0x150)] public ObjectMoveArray<Memory.Pointer<GameService.Data>> GameServices;
    }

    /* v1.1.0.0:  0x1409F1F9A */
    /* v1.1.0.1:  0x1409F226A */
    /* v1.10.0.0: 0x140A1D514 */
    private static long _sigGameManagerSingleton = (long)ScanSignature
    (
        "\x4C\x89\x3D\xCC\xCC\xCC\xCC\x49\x8B\x5B\x38",
        "xxx????xxxx"
    );
    
    public Data* Get()
    {
        if (_sigGameManagerSingleton == 0)
            return null;
        
        return *(Data**)Memory.ReadEffectiveAddress(_sigGameManagerSingleton);
    }
    
    public GameService.Data* GetService(string in_name)
    {
        var pGameManager = Get();

        if (pGameManager == null)
            return null;
        
        var gameServices = pGameManager->GameServices;

        for (int i = 0; i < gameServices.Length; i++)
        {
            var pGameService = gameServices[i].pData;
            
            if (pGameService->pStaticClass->Name == in_name)
                return pGameService;
        }

        return null;
    }
    
    MAKE_STATIC_GENERIC_API(GetService)
    
    public GameObject.Data* GetGameObject(string in_name)
    {
        var pGameManager = Get();

        if (pGameManager == null)
            return null;
        
        var gameObjects = pGameManager->GameObjects;

        for (int i = 0; i < gameObjects.Length; i++)
        {
            var pGameObject = gameObjects[i].pData;

            if (pGameObject->Name == in_name)
                return pGameObject;
        }

        return null;
    }
    
    MAKE_STATIC_GENERIC_API(GetGameObject)
}