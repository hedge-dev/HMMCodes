Library "GameObject" by "Hyper, ĐeäTh & Sajid" 
{
    #include "Helpers" noemit

    #import "Collections"
    #import "GOComponents"

    #lib "Helpers"
    #lib "GameManager"
    #lib "Memory"

    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `hh::game::GameObject`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x1C0, Pack = 0x10)]
    public struct Data
    {
        /// <summary>
        /// The flags for this game object.
        /// </summary>
        [FieldOffset(0x18)] public byte Flags;

        /// <summary>
        /// A pointer to an instance of `app::GameManager`.
        /// </summary>
        [FieldOffset(0x40)] public GameManager.Data* pGameManager;

        /// <summary>
        /// An array of pointers to `hh::game::GOComponent` instances.
        /// </summary>
        [FieldOffset(0x50)] public ObjectMoveArray<Memory.Pointer<GOComponent>> Components;

        /// <summary>
        /// The name of this game object.
        /// </summary>
        [FieldOffset(0xB0)] public Helpers.UnmanagedString Name;

        /// <summary>
        /// A pointer to an instance of `hh::game::WorldObjectStatus`.
        /// </summary>
        [FieldOffset(0x1A8)] public WorldObjectStatus* pWorldObjectStatus;

        public override string ToString() => Name.ToString();

        /// <summary>
        /// Destroys this game object.
        /// </summary>
        public void Kill()
        {
            Flags |= 1;
        }
    }

    /// <summary>
    /// A struct representation of `hh::game::WorldObjectStatus`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public struct WorldObjectStatus
    {
        [FieldOffset(0x14)] public int Status;
    }

    /// <summary>
    /// Gets an instance of `hh::game::GOComponent` obtained by the input `hh::game::GameObject` instance by name.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "GameManager"
    ///     #lib "GameObject"
    /// //
    /// {
    ///     var pSonic = GameManager.GetGameObject("Sonic");
    ///     var pGOCPlayerKinematicParams = GameObject.GetGOC(pSonic, "GOCPlayerKinematicParams");
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_pGameObject">An instance of `hh::game::GameObject`.</param>
    /// <param name="in_name">The name of the instance of `hh::game::GOComponent` to find.</param>
    /// <returns>A pointer to an instance of `hh::game::GOComponent`.</returns>
    public GOComponent* GetGOC(Data* in_pGameObject, string in_name)
    {
        if (in_pGameObject == null)
            return null;

        var components = in_pGameObject->Components;

        for (int i = 0; i < components.Length; i++)
        {
            var pComponent = components[i].pData;
            
            if (pComponent->pStaticClass->Name == in_name)
                return pComponent;
        }

        return null;
    }

    /// <summary>
    /// Gets an instance of `hh::game::GOComponent` obtained by the input `hh::game::GameObject` instance.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "GameManager"
    ///     #lib "GameObject"
    ///     
    ///     #import "GOComponents"
    /// //
    /// {
    ///     var pSonic = GameManager.GetGameObject("Sonic");
    ///     var pGOCPlayerKinematicParams = GameObject.GetGOC<GOCPlayerKinematicParams>(pSonic);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_pGameObject">An instance of `hh::game::GameObject`.</param>
    /// <returns>A pointer to an instance of `hh::game::GOComponent`.</returns>
    public T* GetGOC<T>(Data* in_pGameObject) where T : unmanaged
    {
        var name = Helpers.GetInternalName(typeof(T));
        
        return (T*)(long)GetGOC(in_pGameObject, string.IsNullOrEmpty(name) ? typeof(T).Name : name);
    }
}