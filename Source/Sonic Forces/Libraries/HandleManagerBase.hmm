Library "HandleManagerBase" by "Sajid & Hyper"
{
    #import "Collections"
    #import "GameTypes"

    using System.Runtime.InteropServices;
    using HandleBase = HandleManagerBase.Handle<GameTypes.RefByHandleObject>;

    [StructLayout(LayoutKind.Explicit, Size = 0x68)]
    public struct Data
    {
        [FieldOffset(0x18)] public ObjectMoveArray<HandleTableEntry> HandleTable;

        public RefByHandleObject* GetObject(int id)
        {
            if (!IsHandleValid(id))
                return default;

            id &= 0xFFFF;
            return (RefByHandleObject*)HandleTable[(nint)id].Object;
        }

        public HandleBase GetHandle(int id)
        {
            if (!IsHandleValid(id))
                return default;
            
            id &= 0xFFFF;
            return new HandleBase(ref HandleTable[(nint)id]);
        }

        public Handle<T> GetHandle<T>(int id) where T : unmanaged
        {
            if (!IsHandleValid(id))
                return default;

            id &= 0xFFFF;
            return new Handle<T>(ref HandleTable[(nint)id]);
        }

        public Handle<T> GetHandle<T>(in T obj) where T : unmanaged, IRefByHandleObject
        {
            if (!IsHandleValid(obj.Handle))
                return default;

            var id = obj.Handle & 0xFFFF;
            return new Handle<T>(ref HandleTable[(nint)id]);
        }

        public static bool IsHandleValid(int id)
        {
            unchecked
            {
                return (0xFFFF0000 & id) != 0;
            }
        }
    }

    public struct HandleTableEntry
    {
        public long Handle;
        public void* Object;
    }

    public struct Handle<T> where T : unmanaged
    {
        public long Value;
        public HandleTableEntry* TableEntry;

        public Handle(ref HandleTableEntry entry)
        {
            Value = entry.Handle;
            fixed(HandleTableEntry* pEntry = &entry)
            {
                TableEntry = pEntry;
            }
        }

        public bool IsValid()
        {
            return TableEntry != null && (TableEntry->Handle == Value && TableEntry->Object != null);
        }

        public T* Get()
        {
            return IsValid() ? (T*)TableEntry->Object : null;
        }
    }
}