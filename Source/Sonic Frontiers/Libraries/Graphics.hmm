Library "Graphics" by "Hyper & angryzor"
{
    #lib "Helpers"

    #import "Allocators"
    #import "GameTypes"

    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `hh::gfnd::Renderable`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct Renderable
    {
        [FieldOffset(0)]    public ReferencedObject Base;

        [FieldOffset(0x28)] public void* pRenderableContainerNode;

        [FieldOffset(0x30)] public byte PreferredContainer;

        /// <summary>
        /// The name of this `hh::gfnd::Renderable` instance.
        /// </summary>
        [FieldOffset(0x38)] public Helpers.UnmanagedString Name;
    }

    /// <summary>
    /// A struct representation of `app::gfx::MoviePlayerObject`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct MoviePlayerObject
    {
        /// <summary>
        /// Determines whether the game clears the movie buffer once finished playing.
        /// </summary>
        [FieldOffset(0x10)] public bool IsClearBufferOnEnd;

        /// <summary>
        /// The handle to this instance.
        /// </summary>
        [FieldOffset(0x18)] public int Handle;

        /// <summary>
        /// A pointer to an instance of `hh::fmv::MoviePlayer`.
        /// </summary>
        [FieldOffset(0x20)] public MoviePlayer* pMoviePlayer;
    }

    /// <summary>
    /// A struct representation of `hh::fmv::MoviePlayer`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xA4)]
    public struct MoviePlayer
    {
        /// <summary>
        /// A pointer to an instance of `hh::fmv::MoviePlayer::MyRenderable`.
        /// </summary>
        [FieldOffset(0x20)] public MyRenderable* pMyRenderable;

        [FieldOffset(0x92)] public MovieFlags Flags;

        [Flags]
        public enum MovieFlags : ushort
        {
            /// <summary>
            /// Determines whether this movie is paused.
            /// This may require a signal from the game to actually pause.
            /// </summary>
            IsPaused = 0x80,

            /// <summary>
            /// Determines whether this movie is finished.
            /// </summary>
            IsFinished = 0x200
        }

        /// <summary>
        /// A struct representation of `hh::fmv::MoviePlayer::MyRenderable`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x58)]
        public struct MyRenderable
        {
            [FieldOffset(0)]    public Renderable Base;

            /// <summary>
            /// A pointer to an instance of `hh::fmv::MoviePlayer`.
            /// </summary>
            [FieldOffset(0x50)] public MoviePlayer* pMoviePlayer;
        }
    }

    /// <summary>
    /// A struct representation of `hh::fmv::MoviePlayerCri`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x190)]
    public struct MoviePlayerCri
    {
        [FieldOffset(0)]    public MoviePlayer Base;

        [FieldOffset(0xA8)] public void* pCriManaPlayer;

        [FieldOffset(0xB0)] public CriMovieStatus Status;

        public enum CriMovieStatus : int
        {
            IsInitialising = 0,
            IsBegin = 4,
            IsPlaying = 5,
            IsFinished = 6
        }
    }
}