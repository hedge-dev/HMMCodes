Library "GameManager" by "Hyper, ĐeäTh & Sajid" 
{
    #include "Helpers" noemit

    #lib "GameObject"
    #lib "GameService"
    #lib "Memory"
    
    #import "Allocators"
    #import "Collections"
    #import "GameApplication"
    #import "Messages"

    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `hh::game::GameManager`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x358)]
    public struct Data
    {
        /// <summary>
        /// An array of pointers to `hh::game::GameObject` instances.
        /// </summary>
        [FieldOffset(0x130)] public ObjectMoveArray<Memory.Pointer<GameObject.Data>> GameObjects;

        /// <summary>
        /// An array of pointers to `hh::game::GameService` instances.
        /// </summary>
        [FieldOffset(0x150)] public ObjectMoveArray<Memory.Pointer<GameService.Data>> GameServices;

        /// <summary>
        /// An array of pointers to `hh::game::GameManagerListener` instances.
        /// </summary>
        [FieldOffset(0x190)] public ObjectMoveArray<long> GameManagerListeners;

        /// <summary>
        /// An array of pointers to `hh::game::GameObjectListener` instances.
        /// </summary>
        [FieldOffset(0x1B0)] public ObjectMoveArray<long> GameObjectListeners;

        /// <summary>
        /// An array of pointers to `hh::game::ComponentListener` instances.
        /// </summary>
        [FieldOffset(0x1D0)] public ObjectMoveArray<long> ComponentListeners;

        /// <summary>
        /// An array of pointers to `hh::game::GameStepListener` instances.
        /// </summary>
        [FieldOffset(0x210)] public ObjectMoveArray<long> GameStepListeners;

        /// <summary>
        /// An instance of `hh::fnd::MessageQueue`.
        /// </summary>
        [FieldOffset(0x300)] public MessageQueue MessageQueue;

        /// <summary>
        /// A pointer to an instance of `app::MyApplication`.
        /// </summary>
        [FieldOffset(0x350)] public MyApplication* pMyApplication;
    }

    /* 0x140C478D8 */
    private static long _sigGameManagerSingleton = (long)ScanSignature
    (
        "\x48\x89\x2D\xCC\xCC\xCC\xCC\x8D\x75\x20",
        "xxx????xxx"
    );

    /// <summary>
    /// Gets an instance of `hh::game::GameManager`.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "GameManager"
    /// //
    /// {
    ///     var pGameManager = GameManager.Get();
    /// }
    /// ]]></code>
    /// </example>
    /// <returns>A pointer to an instance of `hh::game::GameManager`.</returns>
    public Data* Get()
    {
        if (_sigGameManagerSingleton == 0)
            return null;
        
        return *(Data**)Memory.ReadEffectiveAddress(_sigGameManagerSingleton);
    }

    /// <summary>
    /// Gets an instance of `hh::game::GameService` obtained by the current instance of `hh::game::GameManager` by name.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "GameManager"
    /// //
    /// {
    ///     var pPhotoModeService = GameManager.GetService("PhotoModeService");
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of the instance of `hh::game::GameService` to find.</param>
    /// <returns>A pointer to an instance of `hh::game::GameService`.</returns>
    public GameService.Data* GetService(string in_name)
    {
        var pGameManager = Get();

        if (pGameManager == null)
            return null;
        
        var gameServices = pGameManager->GameServices;

        for (int i = 0; i < gameServices.Length; i++)
        {
            var pGameService = gameServices[i].pData;
            
            if (pGameService->pStaticClass->Name == in_name)
                return pGameService;
        }

        return null;
    }

    /// <summary>
    /// Gets an instance of `hh::game::GameService` obtained by the current instance of `hh::game::GameManager`.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "GameManager"
    ///     
    ///     #import "Services"
    /// //
    /// {
    ///     var pExpManager = GameManager.GetService<ExpManager>();
    /// }
    /// ]]></code>
    /// </example>
    /// <returns>A pointer to an instance of `hh::game::GameService`.</returns>
    public T* GetService<T>() where T : unmanaged
    {
        var name = Helpers.GetInternalName(typeof(T));
        
        return (T*)GetService(string.IsNullOrEmpty(name) ? typeof(T).Name : name);
    }

    /// <summary>
    /// Gets an instance of `hh::game::GameObject` obtained by the current instance of `hh::game::GameManager` by name.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "GameManager"
    /// //
    /// {
    ///     var pSonic = GameManager.GetGameObject("Sonic");
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of the instance of `hh::game::GameObject` to find.</param>
    /// <returns>A pointer to an instance of `hh::game::GameObject`.</returns>
    public GameObject.Data* GetGameObject(string in_name)
    {
        var pGameManager = Get();

        if (pGameManager == null)
            return null;
        
        var gameObjects = pGameManager->GameObjects;

        for (int i = 0; i < gameObjects.Length; i++)
        {
            var pGameObject = gameObjects[i].pData;

            if (pGameObject->Name == in_name)
                return pGameObject;
        }

        return null;
    }

    /// <summary>
    /// Gets an instance of `hh::game::GameObject` obtained by the current instance of `hh::game::GameManager`.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "GameManager"
    ///     
    ///     #import "Objects"
    /// //
    /// {
    ///     var pSonic = GameManager.GetGameObject<Sonic>("Sonic");
    /// }
    /// ]]></code>
    /// </example>
    /// <returns>A pointer to an instance of `hh::game::GameObject`.</returns>
    public T* GetGameObject<T>() where T : unmanaged
    {
        var name = Helpers.GetInternalName(typeof(T));
        
        return (T*)GetGameObject(string.IsNullOrEmpty(name) ? typeof(T).Name : name);
    }
}