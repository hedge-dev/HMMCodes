Library "Resources" by "Hyper" 
{
    #include "Helpers" noemit
    
    #lib "Memory"
    
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    
    private static bool _isInitialised = false;
    
    private static string _currentResourceName = string.Empty;
    private static string _currentResourceType = string.Empty;
    
    public delegate string TResourceNotifyAction(string in_resourceName, string in_resourceType);
    private static List<TResourceNotifyAction> _resourceNotifyActions = new();
    
    public delegate long TResourceDataAction(string in_resourceName, string in_resourceType, long in_pResource);
    private static List<TResourceDataAction> _resourceDataActions = new();
    
    UNMANAGED_FUNCTION(long, GetResourceInfo, long in_pResourceName, long in_pResourceType)
    {
        _currentResourceName = FROM_STRING_PTR(in_pResourceName);
        _currentResourceType = FROM_STRING_PTR(in_pResourceType);
    
    	foreach (TResourceNotifyAction action in _resourceNotifyActions)
    		in_pResourceName = TO_STRING_PTR(action(_currentResourceName, _currentResourceType));
    	
        return in_pResourceName;
    }
    
    UNMANAGED_FUNCTION(long, GetResourceData, long in_pResource)
    {
    	foreach (TResourceDataAction action in _resourceDataActions)
    		in_pResource = action(_currentResourceName, _currentResourceType, in_pResource);
    
        return in_pResource;
    }

    /// <summary>
    /// A struct representation of resource data.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public struct Data
    {
        /// <summary>
        /// A pointer to the data for this resource.
        /// </summary>
        [FieldOffset(0x60)] public long pData;

        /// <summary>
        /// The size of the data for this resource.
        /// </summary>
        [FieldOffset(0x68)] public long Size;
    }
    
    [LibraryInitializer]
    public void Init()
    {
    	if (_isInitialised)
    		return;
    
        /* 0x140D599A3 */
        long sigLoadResourceCaller = ScanSignature
        (
            "\xE8\xCC\xCC\xCC\xCC\x48\x85\xC0\x74\x22\x80\x78\x10\x00",
            "x????xxxxxxxxx"
        );
    
        if (sigLoadResourceCaller == 0)
            return;
    
        WriteAsmHook
        (
            $@"
                sub  rsp, 0xD0
                mov  rdi, r8
                mov  rbx, rdx
                mov  rsi, rcx
                mov  rcx, rdx
                mov  rdx, [rdi]
                mov  rax, {GET_UNMANAGED_FUNCTION_PTR(GetResourceInfo)}
                call rax
                mov  rdx, [rcx]
                mov  rbx, rdx
            ",
    
            /* 0x140EE897B */
            ScanSignature
            (
                "\x48\x81\xEC\xD0\x00\x00\x00\x49\x8B\xF8\x48\x8B\xDA",
                "xxxxxxxxxxxxx"
            ),
    
            HookBehavior.Replace
        );
    
        WriteAsmHook
        (
            $@"
                mov  rcx, rax
                mov  rax, {GET_UNMANAGED_FUNCTION_PTR(GetResourceData)}
                call rax
                lea  r11, qword ptr [rsp + 0xD8 + 0xFFFFFFFFFFFFFFF8]
                mov  rbx, qword ptr [r11 + 0x10]
                mov  rsi, qword ptr [r11 + 0x18]
    			mov  rsp, r11
            ",
            
            /* 0x140EE8A56 */
            Memory.ReadCall(sigLoadResourceCaller) + 0xE6,
    
            HookBehavior.Replace
        );
    
    	// Allow loading open zone asset archive.
    	WriteNop
    	(
    		/* 0x1401E88DC */
    		ScanSignature
    		(
    			"\x0F\x84\x41\x01\x00\x00\x48\x8D\x15",
                "xxxxxxxxx"
    		),
    
    		6
    	);
    
    	// Allow loading Cyber Space asset archive.
    	WriteNop
    	(
    		/* 0x1401E88C7 */
    		ScanSignature
    		(
    			"\x74\x0F\x48\x8D\x15\xCC\xCC\xCC\xCC\x48\x8B\xCF\xE8\xCC\xCC\xCC\xCC\x40\x38\x75\x68",
                "xxxxx????xxxx????xxxx"
    		),
    
    		2
    	);
    
    	_isInitialised = true;
    }
    
    /// <summary>
    /// Registers a function of the `TResourceNotifyAction` type into the event handler for when a resource is loaded.
    /// 
    /// Use notify actions for redirecting resources.
    /// Redirected resources must already have their data present in memory loaded from their respective Packfiles.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "Resources"
    /// //
    /// {
    ///     string NotifyRedirectDashPanelResource(string in_resourceName, string in_resourceType)
    ///     {
    ///         if (in_resourceName == "cmn_obj_dashpanel")
    ///             return "cmnisl_obj_dashpanel";
    ///
    ///         return in_resourceName;
    ///     }
    ///
    ///     Resources.AddResourceNotifyAction(NotifyRedirectDashPanelResource);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_action">The delegate to add.</param>
    public void AddResourceNotifyAction(TResourceNotifyAction in_action)
    {
    	if (_resourceNotifyActions.Contains(in_action))
    		return;
    
    	_resourceNotifyActions.Add(in_action);
    }
    
    /// <summary>
    /// Removes a function of the `TResourceNotifyAction` type.
    /// </summary>
    /// <param name="in_action">The delegate to remove.</param>
    public void RemoveResourceNotifyAction(TResourceNotifyAction in_action)
    {
    	if (!_resourceNotifyActions.Contains(in_action))
    		return;
    
    	_resourceNotifyActions.Remove(in_action);
    }

    /// <summary>
    /// Registers a function of the `TResourceDataAction` type into the event handler for when a resource is loaded.
    /// 
    /// Use data actions for reading and writing resource data.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "Resources"
    ///     #lib "SonicParameters"
    /// //
    /// {
    ///     SonicParameters.Root* pSonicParameters;
    ///
    ///     Resources.Data* GetSonicParametersPointer(string in_resourceName, string in_resourceType, Resources.Data* in_pResource)
    ///     {
    ///         if (in_resourceName == "player_common" && in_resourceType == "ResReflection")
    ///             pSonicParameters = (SonicParameters.Root*)in_pResource->pData;
    ///
    ///         return in_pResource;
    ///     }
    ///
    ///     Resources.AddResourceDataAction(GetSonicParametersPointer);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_action">The delegate to add.</param>
    public void AddResourceDataAction(TResourceDataAction in_action)
    {
    	if (_resourceDataActions.Contains(in_action))
    		return;
    
    	_resourceDataActions.Add(in_action);
    }
    
    /// <summary>
    /// Removes a function of the `TResourceDataAction` type.
    /// </summary>
    /// <param name="in_action">The delegate to remove.</param>
    public void RemoveResourceDataAction(TResourceDataAction in_action)
    {
    	if (!_resourceDataActions.Contains(in_action))
    		return;
    
    	_resourceDataActions.Remove(in_action);
    }
}