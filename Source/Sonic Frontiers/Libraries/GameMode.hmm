Library "GameMode" by "Hyper"
{
    #include "Helpers" noemit

    #lib "GameManager"
    #lib "GameService"
    #lib "Memory"
    #lib "RTTI"
    #lib "StringMapOperation"

    #import "Collections"
    #import "GameApplication"
    #import "GameModes"
    
    using System.Linq;
    using System.Runtime.InteropServices;

    private static bool _isInitialised = false;

    private static sbyte _destinationMode = -1;

    /// <summary>
    /// A struct representation of `app::game::GameMode`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xE0)]
    public struct Data
    {
        /// <summary>
        /// A pointer to an instance of `hh::game::GameManager`.
        /// </summary>
        [FieldOffset(0x30)] public GameManager.Data* pGameManager;

        /// <summary>
        /// An array of pointers to instances of `hh::game::GameService`.
        /// </summary>
        [FieldOffset(0x90)] public ObjectMoveArray<Memory.Pointer<GameService.Data>> GameServices;

        /// <summary>
        /// An array of pointers to instances of `app::game::GameModeExtension`.
        /// </summary>
        [FieldOffset(0xB0)] public ObjectMoveArray<Memory.Pointer<GameModeExtension>> Extensions;

        /// <summary>
        /// Gets the name of this `app::game::GameMode` instance via runtime info.
        /// </summary>
        /// <returns>The name of this `app::game::GameMode` instance.</returns>
        public string GetName()
        {
            fixed (Data* pThis = &this)
            {
                var namespaces = RTTI.GetClassNamespaces(pThis);
                
                return namespaces.Length <= 0
                    ? "GameModeUnknown"
                    : namespaces.Last();
            }
        }

        /// <summary>
        /// Gets an instance of `app::game::GameModeExtension` by name.
        /// </summary>
        /// <param name="in_extensionName">The name of the extension.</param>
        /// <returns>The requested extension by name.</returns>
        public GameModeExtension* GetExtension(string in_extensionName)
        {
            foreach (var pExtension in Extensions)
            {
                if (pExtension.pData->GetNameHash()() == StringMapOperation.ComputeHash(in_extensionName))
                    return pExtension.pData;
            }

            return null;
        }

        MAKE_GENERIC_API(GetExtension)
    }

    [LibraryInitializer]
    public void Init()
    {
        if (_isInitialised)
            return;

        fixed (sbyte* p_destinationMode = &_destinationMode)
        {
            // Set if we're entering Cyber Space from Training Simulator.
            WriteAsmHook
            (
                $@"
                    mov    rax, {(long)p_destinationMode}
                    mov    byte ptr [rax], 1
                    mov    rax, [rdi + 0x10]
                    movaps xmmword ptr [rdi + 0x110], xmm0
                    mov    rdx, [rax + 0x70]
                ",
                
                /* 0x140170517 */
                ScanSignature
                (
                    "\x48\x8B\x47\x10\x0F\x29\x87\x10\x01\x00\x00",
                    "xxxxxxxxxxx"
                ),
                
                HookBehavior.Replace
            );
            
            // Set if we're returning to an island from Training Simulator after quitting Cyber Space.
            WriteAsmHook
            (
                $@"
                    movups xmm0, xmmword ptr [rsp + 0x210 + 0xFFFFFFFFFFFFFE10]
                    mov    qword ptr [rbp + 0x110 + 0xFFFFFFFFFFFFFFA0], rax
                    mov    word ptr [rdi + 0x120], 0x101
                    mov    rax, {(long)p_destinationMode}
                    mov    byte ptr [rax], 0
                ",
                
                /* 0x14016E547 */
                ScanSignature
                (
                    "\x0F\x10\x44\x24\x20\x48\x89\x85\xB0\x00\x00\x00\x66\xC7\x87\x20\x01\x00\x00\x01\x01",
                    "xxxxxxxxxxxxxxxxxxxxx"
                ),
                
                HookBehavior.Replace
            );

            // Set if we're returning to an island from Training Simulator after completing Cyber Space.
            WriteAsmHook
            (
                $@"
                    mov rbx, {TO_STRING_PTR("w6d01")}
                    lea rcx, qword ptr [rbx]
                    mov rax, {(long)p_destinationMode}
                    mov byte ptr [rax], 0
                    xor ebx, ebx
                    mov edx, ebx
                ",
                
                /* 0x14016E310 */
                ScanSignature
                (
                    "\x33\xDB\x48\x8D\x0D\xCC\xCC\xCC\xCC\x8B\xD3",
                    "xxxxx????xx"
                ),
                
                HookBehavior.Replace
            );
        }

        _isInitialised = true;
    }

    [LibraryUpdate]
    public void Update()
    {
        if (GetName() != "GameModeTutorial")
            _destinationMode = (sbyte)DestinationMode.Unknown;
    }

    /// <summary>
    /// Gets the current instance of `app::game::GameMode`.
    /// </summary>
    /// <returns>The current instance of `app::game::GameMode`.</returns>
    public Data* GetCurrentGameMode()
    {
        var pGameManager = GameManager.Get();

        if (pGameManager == null)
            return null;

        var pMyApplication = pGameManager->pMyApplication;

        if (pMyApplication == null)
            return null;
        
        var pApplicationSequenceExtension = pMyApplication->GetApplicationExtension<ApplicationSequenceExtension>();

        if (pApplicationSequenceExtension == null)
            return null;

        var pGameMode = pApplicationSequenceExtension->pGameMode;

        if (pGameMode == null)
            return null;

        return pGameMode;
    }

    public Data* Get(string in_gameModeName)
    {
        if (in_gameModeName != GetName())
            return null;

        return GetCurrentGameMode();
    }

    MAKE_GENERIC_API(Get)

    /// <summary>
    /// Gets the name of the current instance of `app::game::GameMode`.
    /// </summary>
    /// <returns>The name of the current instance of `app::game::GameMode`.</returns>
    public string GetName()
    {
        var pGameMode = GetCurrentGameMode();

        if (pGameMode == null)
            return "GameModeUnknown";

        return pGameMode->GetName();
    }

    /// <summary>
    /// Gets the destination game mode when transitioning out of `GameModeTutorial` (Training Simulator).
    /// </summary>
    /// <returns>The destination game mode represented by the `DestinationMode` enum.</returns>
    public DestinationMode GetTutorialDestination()
    {
        return (DestinationMode)_destinationMode;
    }

    /// <summary>
    /// An enum containing known destination game modes from `GameModeTutorial` (Training Simulator).
    /// </summary>
    public enum DestinationMode : sbyte
    {
        /// <summary>
        /// The destination game mode has not been set.
        /// </summary>
        Unknown = -1,
        
        /// <summary>
        /// The destination game mode is `GameModeStage` (Island).
        /// </summary>
        GameModeStage,

        /// <summary>
        /// The destination game mode is `GameModeCyberStage` (Cyber Space).
        /// </summary>
        GameModeCyberStage
    }
}