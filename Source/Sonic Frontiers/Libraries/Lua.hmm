Library "Lua" by "Hyper & ĐeäTh"
{
    #include "Helpers" noemit

    #lib "GameDocument"
    #lib "GameMode"
    #lib "GameService"
    #lib "Helpers"
    #lib "Logger"
    #lib "Memory"
    #lib "Resources"
    #lib "StringMapOperation"

    // Basic types
    #define LUA_TNONE          (-1)
    #define LUA_TNIL           0
    #define LUA_TBOOLEAN       1
    #define LUA_TLIGHTUSERDATA 2
    #define LUA_TNUMBER	       3
    #define LUA_TSTRING	       4
    #define LUA_TTABLE         5
    #define LUA_TFUNCTION      6
    #define LUA_TUSERDATA      7
    #define LUA_TTHREAD        8
    #define LUA_NUMTYPES       9

    // Thread status
    #define LUA_OK		  0
    #define LUA_YIELD	  1
    #define LUA_ERRRUN	  2
    #define LUA_ERRSYNTAX 3
    #define LUA_ERRMEM	  4
    #define LUA_ERRERR	  5

    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;

    private static bool _isInitialised = false;
    private static bool _isScriptSequenceInactive = true;

    private static long _pLuaState = 0;
    private static long _sigScriptSequenceManagerStaticClassCtor = 0;

    private static List<string> _deniedGameModes = new()
    {
        "GameModeBattleRush",
        "GameModeFishing",
        "GameModeHacking",
        "GameModeStage"
    };

    private static string _lastGameModeName = "GameModeUnknown";

    private static List<uint> _userScriptHandles = new();

    private static ValueTuple<string, long> _currentScript = new();
    private static Dictionary<string, string> _scriptData = new();

    public abstract class Hook
    {
        public string ScriptName { get; }

        public HookBehavior Behaviour { get; }

        public uint Hash { get; set; }

        public Hook(string in_scriptName, HookBehavior in_behaviour)
        {
            ScriptName = in_scriptName;
            Behaviour = in_behaviour;
        }

        public abstract string WriteHook(string code);

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
                return false;

            return Hash == ((Hook)obj).Hash;
        }
    }

    public class LineHook : Hook
    {
        public string Code { get; }

        public string Pattern { get; }

        public bool IsRegex { get; } = false;

        public RegexOptions RegexOptions { get; }

        public LineHook(string in_code, string in_scriptName, string in_pattern, HookBehavior in_behaviour, bool in_isRegex = false, RegexOptions in_regexOptions = default)
            : base(in_scriptName, in_behaviour)
        {
            Code = in_code;
            Pattern = in_pattern;
            IsRegex = in_isRegex;
            RegexOptions = in_regexOptions;
            Hash = StringMapOperation.ComputeHash(ToString());
        }

        public override string WriteHook(string code)
        {
            string result = code;
            var regexOptions = RegexOptions.Compiled | RegexOptions;

            bool isLineFound = IsRegex
                ? Regex.Match(result, Pattern, regexOptions).Success
                : result.Contains(Pattern);

            if (!isLineFound)
                return result;

            var insertions = new List<(int Index, string Text)>();

            void AddInsertion(int index, int length)
            {
                switch (Behaviour)
                {
                    case HookBehavior.Before:
                        insertions.Add((index, $"{Code}\n"));
                        break;

                    case HookBehavior.Replace:
                    {
                        result = IsRegex
                            ? new Regex(Pattern, regexOptions).Replace(result, Code)
                            : result.Replace(Pattern, Code);

                        break;
                    }

                    case HookBehavior.After:
                        insertions.Add((index + length, $"\n{Code}"));
                        break;
                }
            }

            if (IsRegex)
            {
                foreach (Match match in Regex.Matches(result, Pattern, regexOptions))
                    AddInsertion(match.Index, match.Length);
            }
            else
            {
                foreach (int index in Helpers.GetSubstringIndices(result, Pattern))
                    AddInsertion(index, Pattern.Length);
            }

            foreach (var insertion in insertions.OrderByDescending(i => i.Index))
                result = result.Insert(insertion.Index, insertion.Text);

            return result;
        }

        public override string ToString()
        {
            return $"[Lua] Line Hook - [{ScriptName}]::[\"{Pattern}\"] (Behaviour: {Behaviour}, Regex: {IsRegex});\n{Code}";
        }
    }

    public class FunctionHook : Hook
    {
        public string Code { get; }

        public string FunctionName { get; }

        public FunctionHook(string in_code, string in_scriptName, string in_functionName, HookBehavior in_behaviour)
            : base(in_scriptName, in_behaviour)
        {
            Code = in_code;
            FunctionName = in_functionName;
            Hash = StringMapOperation.ComputeHash(ToString());
        }

        public override string WriteHook(string code)
        {
            var result = new StringBuilder();

            var nestedKeywords = new List<string>()
            {
                "function",
                "if",
                "elseif",
                "for",
                "while",
                "repeat"
            };
            
            string funcPattern = $@"(^function\s+{FunctionName}\s*\(.*?\))";

            bool isInsideFunction = false;
            bool isFunctionNameTokenSkipped = false;
            
            int scopeDepth = 0;

            foreach (string line in code.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.None))
            {
                if (line.Contains($"function {FunctionName}"))
                {
                    if (line.Contains("end"))
                    {
                        Match inlineFuncSig = Regex.Match(line, funcPattern, RegexOptions.Compiled);

                        if (!inlineFuncSig.Success)
                            continue;

                        string funcSig = inlineFuncSig.Groups[0].Value;
                        int funcSigIndex = inlineFuncSig.Index + inlineFuncSig.Length;
                        
                        switch (Behaviour)
                        {
                            case HookBehavior.Before:
                                result.Append($"{funcSig} {Code} ");
                                result.Append(line.Substring(funcSigIndex, line.LastIndexOf("end") - funcSigIndex));
                                result.Append(" end");
                                break;

                            case HookBehavior.Replace:
                                result.Append($"{funcSig} {Code} end");
                                break;

                            case HookBehavior.After:
                                result.Append($"{funcSig} ");
                                result.Append(line.Substring(funcSigIndex, line.LastIndexOf("end") - funcSigIndex));
                                result.Append($" {Code} end");
                                break;
                        }

                        isInsideFunction = false;
                        scopeDepth = 0;

                        continue;
                    }

                    // Write function signature.
                    result.AppendLine(line);

                    if (Behaviour == HookBehavior.Before)
                        result.AppendLine(Code);

                    isInsideFunction = true;
                    scopeDepth++;

                    continue;
                }
                else if (isInsideFunction)
                {
                    if (line.Contains("end"))
                    {
                        scopeDepth--;

                        if (scopeDepth == 0)
                        {
                            if (Behaviour != HookBehavior.Before)
                                result.AppendLine(Code);
                                
                            result.AppendLine("end");

                            isInsideFunction = false;

                            break;
                        }
                    }
                    else if (nestedKeywords.Any(x => line.Trim().StartsWith(x)))
                    {
                        scopeDepth++;
                    }
                    
                    if (Behaviour != HookBehavior.Replace)
                        result.AppendLine(line);

                    continue;
                }

                result.AppendLine(line);
            }

            return result.ToString();
        }

        public override string ToString()
        {
            return $"[Lua] Function Hook - [{ScriptName}]::[{FunctionName}] (Behaviour: {Behaviour});\n{Code}";
        }
    }

    private static List<Hook> _hooks = new();

    /* 0x153A6D900 */
    private static long _sig_luaL_loadbufferx = ScanSignature("\x48\x83\xEC\x48\x48\x8B\x44\x24\x70\x48", "xxxxxxxxxx");
    CREATE_FUNCTION_PTR(long, luaL_loadbufferx, _sig_luaL_loadbufferx, long L, long buff, long size, long name, long mode)

    /* 0x140E6DB50 */
    private static long _sig_lua_getglobal = Memory.ReadCall(ScanSignature("\xE8\xCC\xCC\xCC\xCC\x48\x8B\x0F\x48\x8B\xD3\xE8", "x????xxxxxxx"));
    CREATE_FUNCTION_PTR(long, lua_getglobal, _sig_lua_getglobal, long L, long name)

    /* 0x153959B30 */
    private static long _sig_lua_pcallk = ScanSignature("\x48\x89\x74\x24\x18\x57\x48\x83\xEC\x40\x31\xF6", "xxxxxxxxxxxx");
    CREATE_FUNCTION_PTR(long, lua_pcallk, _sig_lua_pcallk, long L, int nargs, int nresults, int errfunc, long ctx, long k)

    /* 0x140E6D0C0 */
    private static long _sig_lua_pop = ScanSignature("\x40\x53\x48\x83\xEC\x20\x45\x8B\xD0", "xxxxxxxxx");
    CREATE_FUNCTION_PTR(long, lua_pop, _sig_lua_pop, long L, int idx)

    /* 0x140E6D890 */
    private static long _sig_lua_pushlstring = ScanSignature("\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x48\x8B\xD9\x4D", "xxxxxxxxxxxxxx");
    CREATE_FUNCTION_PTR(long, lua_pushlstring, _sig_lua_pushlstring, long L, long s, long len)

    /* 0x140E6D870 */
    private static long _sig_lua_pushinteger = ScanSignature("\x48\x8B\x41\x10\x48\x89\x10\xC6\x40\x08\x03", "xxxxxxxxxxx");
    CREATE_FUNCTION_PTR(long, lua_pushinteger, _sig_lua_pushinteger, long L, int n)

    /* 0x153927520 */
    private static long _sig_lua_pushnumber = ScanSignature("\x48\x8B\x41\x10\xC5\xFA", "xxxxxx");
    CREATE_FUNCTION_PTR(long, lua_pushnumber, _sig_lua_pushnumber, long L, float n)

    /* 0x140E6DAD0 */
    private static long _sig_lua_pushboolean = ScanSignature("\x48\x8B\x41\x10\x85", "xxxxx");
    CREATE_FUNCTION_PTR(long, lua_pushboolean, _sig_lua_pushboolean, long L, int b)

    /* 0x153912110 */
    private static long _sig_lua_type = ScanSignature("\x48\x83\xEC\x28\xE8\xCC\xCC\xCC\xCC\x0F\xB6\x50\x08\xF6", "xxxxx????xxxxx");
    CREATE_FUNCTION_PTR(long, lua_type, _sig_lua_type, long L, int idx)

    /* 0x15391B810 */
    private static long _sig_lua_tolstring = ScanSignature("\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x4C\x89\xC3\x89", "xxxxxxxxxxxxxxxxxxx");
    CREATE_FUNCTION_PTR(long, lua_tolstring, _sig_lua_tolstring, long L, int idx, long len)

    /* 0x140E6D3D0 */
    private static long _sig_lua_tointegerx = ScanSignature("\x40\x53\x48\x83\xEC\x20\x49\x8B\xD8\x48\xC7", "xxxxxxxxxxx");
    CREATE_FUNCTION_PTR(long, lua_tointegerx, _sig_lua_tointegerx, long L, int idx, long pisnum)

    /* 0x140E6D230 */
    private static long _sig_lua_tonumberx = ScanSignature("\x48\x83\xEC\x28\xE8\xCC\xCC\xCC\xCC\x80\x78\x08\x13", "xxxxx????xxxx");
    CREATE_FUNCTION_PTR(long, lua_tonumberx, _sig_lua_tonumberx, long L, int idx, long pisnum)

    /* 0x153916890 */
    private static long _sig_lua_toboolean = ScanSignature("\x48\x83\xEC\x28\xE8\xCC\xCC\xCC\xCC\x0F\xB6\x48\x08\x80\xF9\x01", "xxxxx????xxxxxxx");
    CREATE_FUNCTION_PTR(bool, lua_toboolean, _sig_lua_toboolean, long L, int idx)

    /* 0x14BDE5E20 */
    private static long _sigInitScriptSequenceManager = ScanSignature("\x48\x89\x5C\x24\x10\x48\x89\x6C\x24\x18\x56\x57\x41\x54\x41\x56\x41\x57\x48\x81\xEC\x30\x01\x00\x00\x48\x89", "xxxxxxxxxxxxxxxxxxxxxxxxxxx");
    CREATE_FUNCTION_PTR(int*, InitScriptSequenceManager, _sigInitScriptSequenceManager, long pScriptSequenceManager, uint* pStringHash, char a3)
    
    /* 0x14BDD7B60 */
    private static long _sigRegisterScriptSequenceManager = ScanSignature("\x40\x56\x48\x81\xEC\xC0\x00\x00\x00\x48\x89\xCE\x45", "xxxxxxxxxxxxx");
    CREATE_FUNCTION_PTR(long, RegisterScriptSequenceManager, _sigRegisterScriptSequenceManager, long pScriptSequenceManager)

    public void Init()
    {
        if (_lastGameModeName != GameMode.GetName())
        {
            InitScriptSequence();

            _lastGameModeName = GameMode.GetName();
        }

        if (_isInitialised)
            return;

        GameMode.Init();

        fixed (bool* p_isScriptSequenceInactive = &_isScriptSequenceInactive)
        fixed (long* p_pLuaState = &_pLuaState)
        {
            WriteAsmHook
            (
                $@"
                    push rbp
                    sub  rsp, 0x50
                    mov  r9b, byte ptr [r8 + 0x20]
                    mov  rbp, {(long)p_isScriptSequenceInactive}
                    mov  byte ptr [rbp], r9b
                    cmp  r9b, 0
                    jz   getLuaState
                    mov  rbp, {(long)p_pLuaState}
                    mov  qword ptr [rbp], 0
                    jmp  exit
                getLuaState:
                    mov  r9, qword ptr [rcx + 0x10]
                    cmp  r9, 0
                    jz   exit
                    mov  r9, qword ptr [r9]
                    cmp  r9, 0
                    jz   exit
                    mov  r9, qword ptr [r9 + 0x48]
                    cmp  r9, 0
                    jz   exit
                    mov  r9, qword ptr [r9 + 0x18]
                    cmp  r9, 0
                    jz   exit
                    mov  rbp, {(long)p_pLuaState}
                    mov  qword ptr [rbp], r9
                exit:
                    cmp  byte ptr [r8 + 0x20], 0
                    mov  r9, r8
                    mov  rbp, rcx
                ",

                /* 0x1409172E7 */
                ScanSignature
                (
                    "\x55\x48\x83\xEC\x50\x41\x80\x78\x20\x00",
                    "xxxxxxxxxx"
                ),

                HookBehavior.Replace
            );
        }

        long HookService(string resourceName, string resourceType, long pResourceData)
        {
            if (resourceType != "ResLuaData" || pResourceData == 0)
                return pResourceData;

            _currentScript = (resourceName, pResourceData);

            bool isHooked = false;

            string script = _scriptData.ContainsKey(resourceName)
                ? _scriptData[resourceName]
                : FROM_U8STRING_PTR((IntPtr)(*(long*)(pResourceData + 0x60)));
                
            // Always allow committing backed up Lua data.
            if (_hooks.Count == 0 && _scriptData.ContainsKey(resourceName))
                isHooked = true;

            foreach (var hook in _hooks)
            {
                if (hook.ScriptName == resourceName || string.IsNullOrEmpty(hook.ScriptName))
                {
                    // Back up current script since the game caches our changes.
                    if (!_scriptData.ContainsKey(resourceName))
                        _scriptData.Add(resourceName, script);
                }
                else if (!string.IsNullOrEmpty(hook.ScriptName))
                {
                    continue;
                }
                
                string result = hook.WriteHook(script);

                if (script == result)
                    continue;

                script = result;

                isHooked = true;
            }

            if (isHooked)
            {
                *(long*)(pResourceData + 0x60) = TO_U8STRING_PTR(script);
                *(long*)(pResourceData + 0x68) = Encoding.UTF8.GetBytes(script).Length;
            }

            return pResourceData;
        }

        Resources.AddResourceDataAction(HookService);

        _isInitialised = true;
    }

    private bool IsInitialised()
    {
        if (!_isInitialised)
            Logger.Error("[Lua] Lua library is not initialised! Please call Lua.Init() at the beginning of your code.");

        return _isInitialised;
    }

    public void InitScriptSequence()
    {
        if (_deniedGameModes.Contains(GameMode.GetName()) ||
            GameMode.GetTutorialDestination() == GameMode.DestinationMode.GameModeStage)
        {
            return;
        }

        if (_sigScriptSequenceManagerStaticClassCtor == 0)
        {
            /* 0x140053480 */
            _sigScriptSequenceManagerStaticClassCtor = ScanSignature
            (
                "\x45\x33\xC9\x4C\x8D\x05\xCC\xCC\xCC\xCC\x48\x8D\x15\xCC\xCC\xCC\xCC\x48\x8D\x0D\xCC\xCC\xCC\xCC\xE9\x73\x3F",
                "xxxxxx????xxx????xxx????xxx"
            );

            if (_sigScriptSequenceManagerStaticClassCtor == 0)
            {
                Console.WriteLine("[Lua] Failed to initialise script sequence!");
                return;
            }

            /* 0x143C53810 */
            GameService.AddUserService(Memory.ReadEffectiveAddress(_sigScriptSequenceManagerStaticClassCtor + 0x11));
        }

        long pGameDocument = GameDocument.Get();

        if (pGameDocument == 0)
            return;

        long pScriptSequenceManager = GameDocument.GetService(pGameDocument, "ScriptSequenceManager");

        if (pScriptSequenceManager == 0)
            return;

        // BuildLevel
        uint hash = 0x59B595D6;

        GET_FUNCTION_PTR(InitScriptSequenceManager)(pScriptSequenceManager, &hash, (char)0);
        GET_FUNCTION_PTR(RegisterScriptSequenceManager)(pScriptSequenceManager);
    }

    public long GetState()
    {
        if (!IsInitialised())
            return 0;

        /*
            This stupid null check validates the Lua state
            by checking if lua_State.next is null. This won't
            always mean the state is valid, of course, as any
            bit of memory could have a null QWORD, but it works.

            PUC-Rio should really add a signature to the lua_State
            struct for external validation, because checking the
            result of luaL_newstate is just not good enough.
        */
        if (_pLuaState != 0 && *(long*)_pLuaState != 0)
            return 0;

        return _pLuaState;
    }

    public (string, long) GetCurrentScriptResource()
    {
        if (!IsInitialised())
            return (null, 0);

        return (_currentScript.Item1, _currentScript.Item2);
    }

    public string Peek(bool isOutput = true)
    {
        if (!IsInitialised())
            return string.Empty;

        long pResourceData = _currentScript.Item2;

        if (pResourceData == 0)
            return string.Empty;

        string result = FROM_U8STRING_PTR((IntPtr)(*(long*)(pResourceData + 0x60)));

        if (isOutput)
        {
            Logger.Utility($"[Lua] Peeking \"{_currentScript.Item1}\" at 0x{pResourceData:X}...");
            Logger.Warning("[Lua] WARNING: console output may look mangled due to unsupported characters");
            Logger.Utility("[Lua] ///////////////////////////// PEEK START /////////////////////////////");
            Console.Write($"\n{result}\n");
            Logger.Utility("[Lua] ////////////////////////////// PEEK END //////////////////////////////");
        }

        return result;
    }
    
    public LineHook CreateLineHook(string code, string scriptName, string pattern, HookBehavior behaviour, bool isRegex = false, RegexOptions regexOptions = default)
    {
        if (!IsInitialised())
            return null;

        var hook = new LineHook(code, scriptName, pattern, behaviour, isRegex, regexOptions);

        if (_hooks.Contains(hook))
            return hook;
        
        _hooks.Add(hook);

        return hook;
    }

    public LineHook CreateLineHook(string code, string pattern, HookBehavior behaviour, bool isRegex = false)
    {
        // Hook all Lua scripts.
        return CreateLineHook(code, null, pattern, behaviour, isRegex);
    }

    public FunctionHook CreateFunctionHook(string code, string scriptName, string functionName, HookBehavior behaviour)
    {
        if (!IsInitialised())
            return null;

        var hook = new FunctionHook(code, scriptName, functionName, behaviour);

        if (_hooks.Contains(hook))
            return hook;
        
        _hooks.Add(hook);

        return hook;
    }

    public FunctionHook CreateFunctionHook(string code, string functionName, HookBehavior behaviour)
    {
        // Hook all Lua scripts.
        return CreateFunctionHook(code, null, functionName, behaviour);
    }

    public void UninstallHook(Hook hook)
    {
        if (hook == null)
            return;
        
        if (!_hooks.Contains(hook))
            return;

        _hooks.Remove(hook);
    }

    public string CreateFunctionSignature(string funcName, params object[] args)
    {
        var code = new StringBuilder();
        {
            code.Append($"{funcName}(");

            int i = 0;
            foreach (var arg in args)
            {
                if (arg.GetType() == typeof(string))
                {
                    code.Append($"\"{arg}\"");
                }
                else
                {
                    code.Append($"{arg}");
                }

                if (i != args.Length - 1)
                {
                    code.Append(", ");
                }
                
                i++;
            }

            code.Append(")");
        }

        return code.ToString();
    }

    public string GetPreviousError(long L)
    {
        var pError = (IntPtr)GET_FUNCTION_PTR(lua_tolstring)(L, -1, 0);
        
        GET_FUNCTION_PTR(lua_pop)(L, 1);

        return FROM_STRING_PTR(pError);
    }

    private void CallHandled(long L, int args, int results)
    {
        if (_isScriptSequenceInactive)
            return;

        if (GET_FUNCTION_PTR(lua_pcallk)(L, args, results, 0, 0, 0) != LUA_OK)
        {
            Logger.Error($"[Lua] Error: {GetPreviousError(L)}");
        }
    }

    public void Script(string code, bool isRunOnce = false)
    {
        if (!IsInitialised())
            return;

        long L = GetState();

        if (L == 0)
            return;

        if (isRunOnce)
        {
            uint codeHash = StringMapOperation.ComputeHash(code);

            if (_userScriptHandles.Contains(codeHash))
            {
                return;
            }
            else
            {
                _userScriptHandles.Add(codeHash);
            }
        }
            
        long str = TO_STRING_PTR(code);
        
        GET_FUNCTION_PTR(luaL_loadbufferx)(L, str, code.Length, str, 0);

        CallHandled(L, 0, -1);
    }

    public void LoadScript(string path, bool isRunOnce = false)
    {
        if (!IsInitialised())
            return;

        if (!File.Exists(path))
            return;

        string code = string.Empty;

        try
        {
            code = File.ReadAllText(path);
        }
        catch (IOException ex)
        {
            Logger.Error($"[Lua] Error: \"{path}\" is being used by another process.");
        }

        if (string.IsNullOrEmpty(code))
            return;

        Script(code, isRunOnce);
    }

    private void Call(string funcName, int resultCount, params object[] args)
    {
        if (!IsInitialised())
            return;

        long L = GetState();

        if (L == 0)
            return;

        GET_FUNCTION_PTR(lua_getglobal)(L, TO_STRING_PTR(funcName));

        foreach (var arg in args)
        {
            var type = arg.GetType();

            if (type == typeof(string))
            {
                string str = (string)arg;
                GET_FUNCTION_PTR(lua_pushlstring)(L, TO_STRING_PTR(str), str.Length);
            }
            else if (type == typeof(int))
            {
                GET_FUNCTION_PTR(lua_pushinteger)(L, (int)arg);
            }
            else if (type == typeof(float) || type == typeof(double))
            {
                GET_FUNCTION_PTR(lua_pushnumber)(L, (float)arg);
            }
            else if (type == typeof(bool))
            {
                GET_FUNCTION_PTR(lua_pushboolean)(L, (bool)arg ? 1 : 0);
            }
            else
            {
                Logger.Error($"[Lua] Type {type} is not supported...");
                return;
            }
        }

        CallHandled(L, args.Length, resultCount);
    }

    public void Call(string funcName, params object[] args)
    {
        Call(funcName, 0, args);
    }

    public T Call<T>(string funcName, params object[] args)
    {
        if (!IsInitialised())
            return default;

        long L = GetState();

        if (L == 0)
            return default;

        Call(funcName, 1, args);

        var type = typeof(T);
        var luaType = GET_FUNCTION_PTR(lua_type)(L, -1);

        if (type == typeof(string) && luaType == LUA_TSTRING)
        {
            long ptr = (long)GET_FUNCTION_PTR(lua_tolstring)(L, -1, 0);
            return (T)(object)FROM_STRING_PTR(ptr);
        }
        else if (type == typeof(int) && luaType == LUA_TNUMBER)
        {
            return (T)(object)(int)GET_FUNCTION_PTR(lua_tointegerx)(L, -1, 0);
        }
        else if ((type == typeof(float) || type == typeof(double)) && luaType == LUA_TNUMBER)
        {
            return (T)(object)(float)GET_FUNCTION_PTR(lua_tonumberx)(L, -1, 0);
        }
        else if (type == typeof(bool) && luaType == LUA_TBOOLEAN)
        {
            return (T)(object)(bool)GET_FUNCTION_PTR(lua_toboolean)(L, -1);
        }
        else
        {
            Logger.Error($"[Lua] Type {type} is not supported...");
        }

        return default;
    }
}