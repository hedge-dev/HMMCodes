Library "Lua" by "Hyper & ĐeäTh"
{
    #include "Helpers" noemit

    #lib "GameManager"
    #lib "GameMode"
    #lib "GameService"
    #lib "Helpers"
    #lib "Logger"
    #lib "Memory"
    #lib "Resources"
    #lib "StringMapOperation"

    #import "Allocators"
    #import "Services"

    // Basic types
    #define LUA_TNONE          (-1)
    #define LUA_TNIL           0
    #define LUA_TBOOLEAN       1
    #define LUA_TLIGHTUSERDATA 2
    #define LUA_TNUMBER	       3
    #define LUA_TSTRING	       4
    #define LUA_TTABLE         5
    #define LUA_TFUNCTION      6
    #define LUA_TUSERDATA      7
    #define LUA_TTHREAD        8
    #define LUA_NUMTYPES       9

    // Thread status
    #define LUA_OK		  0
    #define LUA_YIELD	  1
    #define LUA_ERRRUN	  2
    #define LUA_ERRSYNTAX 3
    #define LUA_ERRMEM	  4
    #define LUA_ERRERR	  5

    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;

    private static bool _isInitialised = false;
    private static bool _isPrintPreviousError = true;

    private static long _sigScriptSequenceManagerStaticClassCtor = 0;

    private static List<string> _deniedGameModes = new()
    {
        "GameModeBattleRush",
        "GameModeBossRush",
        "GameModeFishing",
        "GameModeHacking",
        "GameModeMasterTrial",
        "GameModeStage",
        "GameModeTitle",
        "GameModeUnknown"
    };

    private static string _lastGameModeName = "GameModeUnknown";

    private static List<uint> _userScriptHandles = new();

    private static (string ScriptName, long pResourceData) _currentResLuaData = new();
    private static Dictionary<string, string> _scriptData = new();

    public abstract class Hook
    {
        public string ScriptName { get; }

        public HookBehavior Behaviour { get; }

        public uint Hash { get; set; }

        public Hook(string in_scriptName, HookBehavior in_behaviour)
        {
            ScriptName = in_scriptName;
            Behaviour = in_behaviour;
        }

        public abstract string WriteHook(string code);

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
                return false;

            return Hash == ((Hook)obj).Hash;
        }

        public override int GetHashCode()
        {
            return Hash.ToString("X").GetHashCode();
        }
    }

    public class LineHook : Hook
    {
        public string Code { get; }

        public string Pattern { get; }

        public bool IsRegex { get; } = false;

        public RegexOptions RegexOptions { get; }

        public LineHook(string in_code, string in_scriptName, string in_pattern, HookBehavior in_behaviour, bool in_isRegex = false, RegexOptions in_regexOptions = default)
            : base(in_scriptName, in_behaviour)
        {
            Code = in_code;
            Pattern = in_pattern;
            IsRegex = in_isRegex;
            RegexOptions = in_regexOptions;
            Hash = StringMapOperation.ComputeHash(ToString());
        }

        public override string WriteHook(string in_code)
        {
            string result = in_code;
            var regexOptions = RegexOptions.Compiled | RegexOptions;

            bool isLineFound = IsRegex
                ? Regex.Match(result, Pattern, regexOptions).Success
                : result.Contains(Pattern);

            if (!isLineFound)
                return result;

            var insertions = new List<(int Index, string Text)>();

            void AddInsertion(int index, int length)
            {
                switch (Behaviour)
                {
                    case HookBehavior.Before:
                        insertions.Add((index, $"{Code}\n"));
                        break;

                    case HookBehavior.Replace:
                    {
                        result = IsRegex
                            ? new Regex(Pattern, regexOptions).Replace(result, Code)
                            : result.Replace(Pattern, Code);

                        break;
                    }

                    case HookBehavior.After:
                        insertions.Add((index + length, $"\n{Code}"));
                        break;
                }
            }

            if (IsRegex)
            {
                foreach (Match match in Regex.Matches(result, Pattern, regexOptions))
                    AddInsertion(match.Index, match.Length);
            }
            else
            {
                foreach (int index in Helpers.GetSubstringIndices(result, Pattern))
                    AddInsertion(index, Pattern.Length);
            }

            foreach (var insertion in insertions.OrderByDescending(i => i.Index))
                result = result.Insert(insertion.Index, insertion.Text);

            return result;
        }

        public override string ToString()
        {
            return $"[Lua] Line Hook - [{ScriptName}]::[\"{Pattern}\"] (Behaviour: {Behaviour}, Regex: {IsRegex});\n{Code}";
        }
    }

    public class FunctionHook : Hook
    {
        public string Code { get; }

        public string FunctionName { get; }

        public FunctionHook(string in_code, string in_scriptName, string in_functionName, HookBehavior in_behaviour)
            : base(in_scriptName, in_behaviour)
        {
            Code = in_code;
            FunctionName = in_functionName;
            Hash = StringMapOperation.ComputeHash(ToString());
        }

        public override string WriteHook(string in_code)
        {
            var result = new StringBuilder();

            var nestedKeywords = new List<string>()
            {
                "function",
                "if",
                "elseif",
                "for",
                "while",
                "repeat"
            };
            
            string funcPattern = $@"(^function\s+{FunctionName}\s*\(.*?\))";

            bool isInsideFunction = false;
            
            int scopeDepth = 0;

            foreach (string line in in_code.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.None))
            {
                if (line.Contains($"function {FunctionName}"))
                {
                    if (line.Contains("end"))
                    {
                        Match inlineFuncSig = Regex.Match(line, funcPattern, RegexOptions.Compiled);

                        if (!inlineFuncSig.Success)
                            continue;

                        string funcSig = inlineFuncSig.Groups[0].Value;
                        int funcSigIndex = inlineFuncSig.Index + inlineFuncSig.Length;
                        
                        switch (Behaviour)
                        {
                            case HookBehavior.Before:
                                result.Append($"{funcSig} {Code} ");
                                result.Append(line.Substring(funcSigIndex, line.LastIndexOf("end") - funcSigIndex));
                                result.Append(" end");
                                break;

                            case HookBehavior.Replace:
                                result.Append($"{funcSig} {Code} end");
                                break;

                            case HookBehavior.After:
                                result.Append($"{funcSig} ");
                                result.Append(line.Substring(funcSigIndex, line.LastIndexOf("end") - funcSigIndex));
                                result.Append($" {Code} end");
                                break;
                        }

                        isInsideFunction = false;
                        scopeDepth = 0;

                        continue;
                    }

                    // Write function signature.
                    result.AppendLine(line);

                    if (Behaviour == HookBehavior.Before)
                        result.AppendLine(Code);

                    isInsideFunction = true;
                    scopeDepth++;

                    continue;
                }
                else if (isInsideFunction)
                {
                    if (line.Contains("end"))
                    {
                        scopeDepth--;

                        if (scopeDepth == 0)
                        {
                            if (Behaviour != HookBehavior.Before)
                                result.AppendLine(Code);
                                
                            result.AppendLine("end");

                            isInsideFunction = false;

                            break;
                        }
                    }
                    else if (nestedKeywords.Any(x => line.Trim().StartsWith(x)))
                    {
                        scopeDepth++;
                    }
                    
                    if (Behaviour != HookBehavior.Replace)
                        result.AppendLine(line);

                    continue;
                }

                result.AppendLine(line);
            }

            return result.ToString();
        }

        public override string ToString()
        {
            return $"[Lua] Function Hook - [{ScriptName}]::[{FunctionName}] (Behaviour: {Behaviour});\n{Code}";
        }
    }

    private static List<Hook> _hooks = new();

    /* 0x153DC50F0 */
    private static long _sig_luaL_loadbufferx = ScanSignature("\x48\x83\xEC\x48\x48\x8B\x44\x24\x70\x48", "xxxxxxxxxx");
    FUNCTION_PTR(long, luaL_loadbufferx, _sig_luaL_loadbufferx, long L, long buff, long size, long name, long mode)

    /* 0x140F56850 */
    private static long _sig_lua_getglobal = Memory.ReadCall(ScanSignature("\xE8\xCC\xCC\xCC\xCC\x48\x8B\x0F\x48\x8B\xD3\xE8", "x????xxxxxxx"));
    FUNCTION_PTR(long, lua_getglobal, _sig_lua_getglobal, long L, long name)

    /* 0x153D1EE30 */
    private static long _sig_lua_pcallk = ScanSignature("\x48\x89\x74\x24\x18\x57\x48\x83\xEC\x40\x31\xF6", "xxxxxxxxxxxx");
    FUNCTION_PTR(long, lua_pcallk, _sig_lua_pcallk, long L, int nargs, int nresults, int errfunc, long ctx, long k)

    /* 0x140F55DC0 */
    private static long _sig_lua_pop = ScanSignature("\x40\x53\x48\x83\xEC\x20\x45\x8B\xD0", "xxxxxxxxx");
    FUNCTION_PTR(long, lua_pop, _sig_lua_pop, long L, int idx)

    /* 0x140F56590 */
    private static long _sig_lua_pushlstring = ScanSignature("\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x48\x8B\xD9\x4D", "xxxxxxxxxxxxxx");
    FUNCTION_PTR(long, lua_pushlstring, _sig_lua_pushlstring, long L, long s, long len)

    /* 0x140F56570 */
    private static long _sig_lua_pushinteger = ScanSignature("\x48\x8B\x41\x10\x48\x89\x10\xC6\x40\x08\x03", "xxxxxxxxxxx");
    FUNCTION_PTR(long, lua_pushinteger, _sig_lua_pushinteger, long L, int n)

    /* 0x153CF8870 */
    private static long _sig_lua_pushnumber = ScanSignature("\x48\x8B\x41\x10\xC5\xFA", "xxxxxx");
    FUNCTION_PTR(long, lua_pushnumber, _sig_lua_pushnumber, long L, float n)

    /* 0x140F567D0 */
    private static long _sig_lua_pushboolean = ScanSignature("\x48\x8B\x41\x10\x85", "xxxxx");
    FUNCTION_PTR(long, lua_pushboolean, _sig_lua_pushboolean, long L, int b)

    /* 0x153CE29A0 */
    private static long _sig_lua_type = ScanSignature("\x48\x83\xEC\x28\xE8\xCC\xCC\xCC\xCC\x0F\xB6\x50\x08\xF6", "xxxxx????xxxxx");
    FUNCTION_PTR(long, lua_type, _sig_lua_type, long L, int idx)

    /* 0x15391B810 */
    private static long _sig_lua_tolstring = ScanSignature("\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x4C\x89\xC3\x89", "xxxxxxxxxxxxxxxxxxx");
    FUNCTION_PTR(long, lua_tolstring, _sig_lua_tolstring, long L, int idx, long len)

    /* 0x153CEFC70 */
    private static long _sig_lua_tointegerx = ScanSignature("\x40\x53\x48\x83\xEC\x20\x49\x8B\xD8\x48\xC7", "xxxxxxxxxxx");
    FUNCTION_PTR(long, lua_tointegerx, _sig_lua_tointegerx, long L, int idx, long pisnum)

    /* 0x140F55F30 */
    private static long _sig_lua_tonumberx = ScanSignature("\x48\x83\xEC\x28\xE8\xCC\xCC\xCC\xCC\x80\x78\x08\x13", "xxxxx????xxxx");
    FUNCTION_PTR(long, lua_tonumberx, _sig_lua_tonumberx, long L, int idx, long pisnum)

    /* 0x153CE8FE0 */
    private static long _sig_lua_toboolean = ScanSignature("\x48\x83\xEC\x28\xE8\xCC\xCC\xCC\xCC\x0F\xB6\x48\x08\x80\xF9\x01", "xxxxx????xxxxxxx");
    FUNCTION_PTR(bool, lua_toboolean, _sig_lua_toboolean, long L, int idx)

    /* 0x14C25D880 */
    private static long _sigInitScriptSequenceManager = ScanSignature("\x48\x89\x5C\x24\x10\x48\x89\x6C\x24\x18\x56\x57\x41\x54\x41\x56\x41\x57\x48\x81\xEC\x30\x01\x00\x00\x48\x89", "xxxxxxxxxxxxxxxxxxxxxxxxxxx");
    FUNCTION_PTR(int*, InitScriptSequenceManager, _sigInitScriptSequenceManager, ScriptSequenceManager* in_pScriptSequenceManager, uint* in_pStringHash, char a3)
    
    /* 0x14C245AC0 */
    private static long _sigRegisterScriptSequenceManager = ScanSignature("\x40\x56\x48\x81\xEC\xC0\x00\x00\x00\x48\x89\xCE\x45", "xxxxxxxxxxxxx");
    FUNCTION_PTR(long, RegisterScriptSequenceManager, _sigRegisterScriptSequenceManager, ScriptSequenceManager* in_pScriptSequenceManager)

    [LibraryInitializer]
    public void Init()
    {
        if (_isInitialised)
            return;

        if (_sigScriptSequenceManagerStaticClassCtor == 0)
        {
            /* 0x140178E1E */
            _sigScriptSequenceManagerStaticClassCtor = ScanSignature
            (
                "\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD0\x48\x8B\xCF\xE8\xCC\xCC\xCC\xCC\x0F\xB7\x97\x58\x01\x00\x00",
                "x????xxxxxxx????xxxxxxx"
            );

            if (_sigScriptSequenceManagerStaticClassCtor == 0)
            {
                Logger.Error("[Lua] Failed to register app::ScriptSequence!");
                return;
            }

            /* 0x143DBE440 */
            GameService.AddUserService(Memory.ReadEffectiveAddress(Memory.ReadCall(_sigScriptSequenceManagerStaticClassCtor)));
        }

        long HookService(string in_resourceName, string in_resourceType, long in_pResource)
        {
            if (in_resourceType != "ResLuaData" || in_pResource == 0)
                return in_pResource;

            var pResource = (Resources.Data*)in_pResource;

            _currentResLuaData = (in_resourceName, (long)in_pResource);

            bool isHooked = false;

            string script = _scriptData.ContainsKey(in_resourceName)
                ? _scriptData[in_resourceName]
                : Helpers.PtrToStringUTF8((nint)pResource->pData, (int)pResource->Size);
                
            // Always allow committing backed up Lua data.
            if (_hooks.Count == 0 && _scriptData.ContainsKey(in_resourceName))
                isHooked = true;

            foreach (var hook in _hooks)
            {
                if (hook.ScriptName == in_resourceName || string.IsNullOrEmpty(hook.ScriptName))
                {
                    // Back up current script since the game caches our changes.
                    if (!_scriptData.ContainsKey(in_resourceName))
                        _scriptData.Add(in_resourceName, script);
                }
                else if (!string.IsNullOrEmpty(hook.ScriptName))
                {
                    continue;
                }
                
                string result = hook.WriteHook(script);

                if (script == result)
                    continue;

                script = result;

                isHooked = true;
            }

            if (isHooked)
            {
                pResource->pData = TO_U8STRING_PTR(script);
                pResource->Size = Encoding.UTF8.GetBytes(script).Length;
            }

            return (long)pResource;
        }

        Resources.AddResourceDataAction(HookService);

        _isInitialised = true;
    }

    [LibraryUpdate]
    public void Update()
    {
        if (_lastGameModeName != GameMode.GetName())
        {
            _lastGameModeName = GameMode.GetName();

            if (_deniedGameModes.Contains(GameMode.GetName()) ||
                GameMode.GetTutorialDestination() == GameMode.DestinationMode.GameModeStage)
            {
                return;
            }

            var pScriptSequenceManager = GameManager.GetService<ScriptSequenceManager>();

            if (pScriptSequenceManager == null)
                return;
            
            if (pScriptSequenceManager->ScriptSequences.Length <= 0)
            {
                // BuildLevel
                uint hash = 0x59B595D6;

                GET_FUNCTION_PTR(InitScriptSequenceManager)(pScriptSequenceManager, &hash, (char)0);
                GET_FUNCTION_PTR(RegisterScriptSequenceManager)(pScriptSequenceManager);

                Logger.Utility($"[Lua] Initialised app::ScriptSequenceManager at 0x{((long)pScriptSequenceManager):X}!");
            }
        }
    }

    public ScriptSequenceManager.ScriptSequence* GetScriptSequence()
    {
        var pScriptSequenceManager = GameManager.GetService<ScriptSequenceManager>();

        if (pScriptSequenceManager == null)
            return null;

        var scriptSequences = pScriptSequenceManager->ScriptSequences;

        if (scriptSequences.Length <= 0)
            return null;

        return scriptSequences[0].pData;
    }

    public long GetState()
    {
        var pScriptSequence = GetScriptSequence();

        if (pScriptSequence == null)
            return 0;
        
        return pScriptSequence->pScripts[0]->pLuaState;
    }

    public (string ScriptName, long pResourceData) GetCurrentScriptResource()
    {
        return (_currentResLuaData.ScriptName, _currentResLuaData.pResourceData);
    }

    public string Peek(bool in_isOutput = true)
    {
        long pResourceData = _currentResLuaData.pResourceData;

        if (pResourceData == 0)
            return string.Empty;

        var pResource = (Resources.Data*)pResourceData;

        string result = Helpers.PtrToStringUTF8((nint)pResource->pData, (int)pResource->Size);

        if (in_isOutput)
        {
            Logger.Utility($"[Lua] Peeking \"{_currentResLuaData.ScriptName}\" at 0x{pResourceData:X}...");
            Logger.Warning("[Lua] WARNING: console output may look mangled due to unsupported characters");
            Logger.Utility("[Lua] ///////////////////////////// PEEK START /////////////////////////////");
            Console.Write($"\n{result}\n");
            Logger.Utility("[Lua] ////////////////////////////// PEEK END //////////////////////////////");
        }

        return result;
    }
    
    public LineHook CreateLineHook(string in_code, string in_scriptName, string in_pattern, HookBehavior in_behaviour, bool in_isRegex = false, RegexOptions in_regexOptions = default)
    {
        var hook = new LineHook(in_code, in_scriptName, in_pattern, in_behaviour, in_isRegex, in_regexOptions);

        if (_hooks.Contains(hook))
            return hook;
        
        _hooks.Add(hook);

        return hook;
    }

    public LineHook CreateLineHook(string in_code, string in_pattern, HookBehavior in_behaviour, bool in_isRegex = false)
    {
        // Hook all Lua scripts.
        return CreateLineHook(in_code, null, in_pattern, in_behaviour, in_isRegex);
    }

    public FunctionHook CreateFunctionHook(string in_code, string in_scriptName, string in_functionName, HookBehavior in_behaviour)
    {
        var hook = new FunctionHook(in_code, in_scriptName, in_functionName, in_behaviour);

        if (_hooks.Contains(hook))
            return hook;
        
        _hooks.Add(hook);

        return hook;
    }

    public FunctionHook CreateFunctionHook(string in_code, string in_functionName, HookBehavior in_behaviour)
    {
        // Hook all Lua scripts.
        return CreateFunctionHook(in_code, null, in_functionName, in_behaviour);
    }

    public void UninstallHook(Hook in_hook)
    {
        if (in_hook == null)
            return;
        
        if (!_hooks.Contains(in_hook))
            return;

        _hooks.Remove(in_hook);
    }

    public string CreateFunctionSignature(string in_functionName, params object[] in_args)
    {
        var code = new StringBuilder();
        {
            code.Append($"{in_functionName}(");

            int i = 0;
            foreach (var arg in in_args)
            {
                if (arg.GetType() == typeof(string))
                {
                    code.Append($"\"{arg}\"");
                }
                else
                {
                    code.Append($"{arg}");
                }

                if (i != in_args.Length - 1)
                {
                    code.Append(", ");
                }
                
                i++;
            }

            code.Append(")");
        }

        return code.ToString();
    }

    public void SetPrintPreviousError(bool in_isEnabled)
    {
        _isPrintPreviousError = in_isEnabled;
    }

    public string GetPreviousError(long in_pLuaState)
    {
        var pError = (IntPtr)GET_FUNCTION_PTR(lua_tolstring)(in_pLuaState, -1, 0);
        
        GET_FUNCTION_PTR(lua_pop)(in_pLuaState, 1);

        return FROM_STRING_PTR(pError);
    }

    private void CallHandled(long in_pLuaState, int in_args, int in_results)
    {
        if (in_pLuaState == 0)
            return;

        if (GET_FUNCTION_PTR(lua_pcallk)(in_pLuaState, in_args, in_results, 0, 0, 0) != LUA_OK)
        {
            if (_isPrintPreviousError)
                Logger.Error($"[Lua] Error: {GetPreviousError(in_pLuaState)}");
        }
    }

    public void Script(string in_code, bool in_isRunOnce = false)
    {
        long pLuaState = GetState();

        if (pLuaState == 0)
            return;

        if (in_isRunOnce)
        {
            uint codeHash = StringMapOperation.ComputeHash(in_code);

            if (_userScriptHandles.Contains(codeHash))
            {
                return;
            }
            else
            {
                _userScriptHandles.Add(codeHash);
            }
        }
            
        long str = TO_STRING_PTR(in_code);
        
        GET_FUNCTION_PTR(luaL_loadbufferx)(pLuaState, str, in_code.Length, str, 0);

        CallHandled(pLuaState, 0, -1);
    }

    public void LoadScript(string in_path, bool in_isRunOnce = false)
    {
        if (!File.Exists(in_path))
            return;

        string code = string.Empty;

        try
        {
            code = File.ReadAllText(in_path);
        }
        catch (IOException)
        {
            Logger.Error($"[Lua] Error: \"{in_path}\" is being used by another process.");
        }

        if (string.IsNullOrEmpty(code))
            return;

        Script(code, in_isRunOnce);
    }

    private void Call(string in_functionName, int in_resultCount, params object[] in_args)
    {
        long pLuaState = GetState();

        if (pLuaState == 0)
            return;

        GET_FUNCTION_PTR(lua_getglobal)(pLuaState, TO_STRING_PTR(in_functionName));

        foreach (var arg in in_args)
        {
            var type = arg.GetType();

            if (type == typeof(string))
            {
                string str = (string)arg;
                GET_FUNCTION_PTR(lua_pushlstring)(pLuaState, TO_STRING_PTR(str), str.Length);
            }
            else if (type == typeof(int))
            {
                GET_FUNCTION_PTR(lua_pushinteger)(pLuaState, (int)arg);
            }
            else if (type == typeof(float) || type == typeof(double))
            {
                GET_FUNCTION_PTR(lua_pushnumber)(pLuaState, (float)arg);
            }
            else if (type == typeof(bool))
            {
                GET_FUNCTION_PTR(lua_pushboolean)(pLuaState, (bool)arg ? 1 : 0);
            }
            else
            {
                Logger.Error($"[Lua] Type {type} is not supported...");
                return;
            }
        }

        CallHandled(pLuaState, in_args.Length, in_resultCount);
    }

    public void Call(string in_functionName, params object[] in_args)
    {
        Call(in_functionName, 0, in_args);
    }

    public T Call<T>(string in_functionName, params object[] in_args)
    {
        long pLuaState = GetState();

        if (pLuaState == 0)
            return default;

        Call(in_functionName, 1, in_args);

        var type = typeof(T);
        var luaType = GET_FUNCTION_PTR(lua_type)(pLuaState, -1);

        if (type == typeof(string) && luaType == LUA_TSTRING)
        {
            long ptr = (long)GET_FUNCTION_PTR(lua_tolstring)(pLuaState, -1, 0);
            return (T)(object)FROM_STRING_PTR(ptr);
        }
        else if (type == typeof(int) && luaType == LUA_TNUMBER)
        {
            return (T)(object)(int)GET_FUNCTION_PTR(lua_tointegerx)(pLuaState, -1, 0);
        }
        else if ((type == typeof(float) || type == typeof(double)) && luaType == LUA_TNUMBER)
        {
            return (T)(object)(float)GET_FUNCTION_PTR(lua_tonumberx)(pLuaState, -1, 0);
        }
        else if (type == typeof(bool) && luaType == LUA_TBOOLEAN)
        {
            return (T)(object)(bool)GET_FUNCTION_PTR(lua_toboolean)(pLuaState, -1);
        }
        else
        {
            Logger.Error($"[Lua] Type {type} is not supported...");
        }

        return default;
    }
}