Library "States" by "Hyper"
{
    #include "Helpers" noemit

    #lib "Helpers"
    #lib "Memory"

    #import "Collections"

    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `hh::ut::internal::StateImpl`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct StateImpl
    {
        [FieldOffset(0x18)] public int StateID;
    }

    /// <summary>
    /// A struct representation of `hh::ut::internal::StateDescImpl`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct StateDescImpl
    {
        [FieldOffset(0)] public Helpers.UnmanagedString Name;
    }

    /// <summary>
    /// A struct representation of `hh::ut::StateBase`.
    /// </summary>
    [StructLayout(LayoutKind.Sequential, Size = 0xB0)]
    public struct StateBase
    {
        public StateImpl Base;
    }

    /// <summary>
    /// A struct representation of `hh::ut::StateBase`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct StateDesc { }

    /// <summary>
    /// A struct representation of `hh::ut::internal::HsmImpl`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x70)]
    public struct HsmImpl
    {
        [FieldOffset(0x0C)] public int CurrentStateIndex;

        [FieldOffset(0x20)] public ObjectMoveArray<Memory.Pointer<StateImpl>> States;

        [FieldOffset(0x40)] public StateImpl* pState;
    }

    /// <summary>
    /// A struct representation of `hh::ut::HsmBase`.
    /// </summary>
    [StructLayout(LayoutKind.Sequential, Size = 0x70)]
    public struct HsmBase
    {
        public HsmImpl Base;
    }

    /// <summary>
    /// A struct representation of `app::player::PlayerStateParameter`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct PlayerStateParameter
    {
        [FieldOffset(0x10)] public ObjectMoveArray<long> StateParameters;
    }

    /// <summary>
    /// A struct representation of `app::player::StateParameter`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct StateParameter
    {
        [FieldOffset(0)]    public long pVftable;

        [FieldOffset(0x08)] public int Flags;

        public StateParameter() { }

        public StateParameter(int in_flags)
        {
            Flags = in_flags;
        }

        VFUNCTION_PTR(StateParameter, 2, uint, GetNameHash)
    }

    /// <summary>
    /// A struct representation of `app::player::StateAvoid::Parameter`.
    /// </summary>
    [Helpers.InternalName("StateAvoid::Parameter"), StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct StateAvoidParameter
    {
        [FieldOffset(0)]    public StateParameter Base = new StateParameter(1);

        [FieldOffset(0x10)] public Quaternion Direction;

        [FieldOffset(0x20)] public short Flags;

        public StateAvoidParameter()
        {
            /* 0x14154BE28 */
            Base.pVftable = Memory.ReadEffectiveAddress
            (
                /* 0x1409C59D0 */
                ScanSignature
                (
                    "\x48\x8D\x05\xCC\xCC\xCC\xCC\x8B\x53\x08\x49\x89\x00\x41\x89\x50\x08\x0F\x28\x43\x10\x41\x0F\x11\x40\x10\x0F\xB6\x4B\x20",
                    "xxx????xxxxxxxxxxxxxxxxxxxxxxx"
                )
            );
        }

        public StateAvoidParameter(Quaternion in_direction) : this()
        {
            Direction = in_direction;
            Flags = 1;
        }
        
        /* 0x1409C2AB0 */
        private static long _sigGetDirectionRelativeToCameraPlane = ScanSignature("\x40\x55\x56\x41\x56\x48\x81\xEC\x00\x01\x00\x00\x48", "xxxxxxxxxxxxx");
        FUNCTION_PTR(Quaternion*, fpGetDirectionRelativeToCameraPlane, _sigGetDirectionRelativeToCameraPlane, Quaternion* in_pDirection, Player.PlayerHsmContext* in_pPlayerContext, bool in_isLeft)

        public static Quaternion GetDirectionRelativeToCameraPlane(bool in_isRight = false)
        {
            Quaternion result = Quaternion.Identity;

            var pPlayerContext = Player.GetPlayerContext();

            if (pPlayerContext == null)
                return result;

            GET_FUNCTION_PTR(fpGetDirectionRelativeToCameraPlane)(&result, pPlayerContext, !in_isRight);

            return result;
        }
    }

    /// <summary>
    /// A struct representation of `app::player::StateDoubleJump`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xC8)]
    public struct StateDoubleJump
    {
        /// <summary>
        /// The amount of time the Drop Dash has been charged for.
        /// </summary>
        [FieldOffset(0xB4)] public float DropDashChargeTimer;

        /// <summary>
        /// Bit flags for the state of the A button.
        /// </summary>
        [FieldOffset(0xC4)] public byte InputFlags;
    }

    /// <summary>
    /// A struct representation of `app::player::StateRecoveryJump`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xC8)]
    public struct StateRecoveryJump
    {
        /// <summary>
        /// Determines whether the player is charging a Drop Dash.
        /// </summary>
        [FieldOffset(0xC4)] public bool IsDropDashCharge;
    }

    /// <summary>
    /// A struct representation of `app::player::StateSpringJump::Parameter`.
    /// </summary>
    [Helpers.InternalName("StateSpringJump::Parameter"), StructLayout(LayoutKind.Explicit)]
    public struct StateSpringJumpParameter
    {
        [FieldOffset(0)] public StateParameter Base;

        [FieldOffset(0x50)] public int Flags;
    }

    /// <summary>
    /// A struct representation of `app::player::StateTailsFly`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xB8)]
    public struct StateTailsFly
    {
        /// <summary>
        /// The phase of this state.
        /// </summary>
        [FieldOffset(0xA8)] public PhaseType Phase;

        public enum PhaseType : int
        {
            Intro,
            Rise,
            Flying,
            Tired
        }
    }
}