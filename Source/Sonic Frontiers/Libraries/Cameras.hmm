Library "Cameras" by "Hyper"
{
    #include "Helpers" noemit

    #lib "Helpers"
    #lib "MathHelpers"
    #lib "StandardCameraConfig"

    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of a wrapper for storing instances of `app_cmn::camera::CameraController` in arrays.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct CameraControllerWrapper
    {
        /// <summary>
        /// A pointer to an instance of `app_cmn::camera::CameraController`.
        /// </summary>
        [FieldOffset(0)] public CameraController* pCameraController;
    }

    /// <summary>
    /// A struct representation of `app_cmn::camera::CameraController`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xC8)]
    public struct CameraController
    {
        /// <summary>
        /// The position of the camera.
        /// </summary>
        [FieldOffset(0x20)] public Vector3 Position;

        VFUNCTION_PTR(CameraController, 1, long, GetName)
    }

    /// <summary>
    /// A struct representation of `app::game::ObjPhotoModeCamera`.
    /// </summary>
    [Helpers.InternalName("PhotoModeCamera"), StructLayout(LayoutKind.Explicit, Size = 0x268)]
    public struct ObjPhotoModeCamera
    {
        /// <summary>
        /// A pointer to an instance of `app::camera::PhotoModeCamera`.
        /// </summary>
        [FieldOffset(0x258)] public PhotoModeCamera* pPhotoModeCamera;
    }

    /// <summary>
    /// A struct representation of `app::camera::PhotoModeCamera`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x210)]
    public struct PhotoModeCamera
    {
        /// <summary>
        /// The current orbit centre position of the camera.
        /// </summary>
        [FieldOffset(0x20)] public Vector3 Centre;

        /// <summary>
        /// The current yaw of the camera.
        /// </summary>
        [FieldOffset(0x50)] public float Yaw;

        /// <summary>
        /// The current pitch of the camera.
        /// </summary>
        [FieldOffset(0x54)] public float Pitch;

        /// <summary>
        /// The current distance from the orbit centre of the camera.
        /// </summary>
        [FieldOffset(0x58)] public float Distance;

        /// <summary>
        /// The current amount of tilt between pi and negative pi.
        /// </summary>
        [FieldOffset(0x90)] public float Tilt;

        /// <summary>
        /// The current amount of zoom between pi and negative pi.
        /// </summary>
        [FieldOffset(0xA8)] public float Zoom;

        /// <summary>
        /// The starting orbit centre position of the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x170)] public Vector3 StartCentre;

        /// <summary>
        /// The starting yaw of the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1A0)] public float StartYaw;

        /// <summary>
        /// The starting pitch of the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1A4)] public float StartPitch;

        /// <summary>
        /// The starting distance from the orbit centre of the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1A4)] public float StartDistance;

        /// <summary>
        /// The starting amount of tilt for the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1E0)] public float StartTilt;

        /// <summary>
        /// The starting amount of zoom for the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1F8)] public float StartZoom;

        /// <summary>
        /// The index of the current speed of the camera.
        /// </summary>
        [FieldOffset(0x204)] public int SpeedIndex;
    }

    /// <summary>
    /// A struct representation of `app::camera::StandardCamera`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public struct StandardCamera
    {
        [FieldOffset(0)]    public CameraController Base;

        /// <summary>
        /// A pointer to an instance of `app::camera::StandardCameraContext`.
        /// </summary>
        [FieldOffset(0xE8)] public StandardCameraContext* pContext;
    }
    
    /// <summary>
    /// A struct representation of `app::camera::StandardCameraContext`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x1E0)]
    public struct StandardCameraContext
    {
        /// <summary>
        /// A pointer to the `StandardCameraConfig` struct from `standard_camera.rfl`.
        /// </summary>
        [FieldOffset(0x20)]  public StandardCameraConfig.Root* pStandardCameraConfig;

        /// <summary>
        /// The position of the camera.
        /// </summary>
        [FieldOffset(0x30)]  public Vector3 Position;

        /// <summary>
        /// The nearest point of the camera view frustum.
        /// </summary>
        [FieldOffset(0xB0)]  public float NearPlaneZ;

        /// <summary>
        /// The furthest point of the camera view frustum.
        /// </summary>
        [FieldOffset(0xB4)]  public float FarPlaneZ;

        /// <summary>
        /// The current field of view in radians.
        /// </summary>
        [FieldOffset(0xB8)]  public float FieldOfView;

        /// <summary>
        /// The distance of the camera to the player.
        /// </summary>
        [FieldOffset(0xC0)]  public float Distance;

        /// <summary>
        /// The suspension length when the player picks up speed (e.g. boost).
        /// </summary>
        [FieldOffset(0xC4)]  public float DistanceSuspension;

        /// <summary>
        /// The height of the camera.
        /// </summary>
        [FieldOffset(0xF8)]  public float Elevation;

        /// <summary>
        /// The current field of view on the Y axis in radians.
        /// </summary>
        [FieldOffset(0x12C)] public float FieldOfViewY;

        /// <summary>
        /// The scalar for field of view, based on the user configuration.
        /// </summary>
        [FieldOffset(0x130)] public float FieldOfViewScalar;

        /// <summary>
        /// Gets the current field of view in degrees.
        /// </summary>
        /// <returns>The current field of view in degrees.</returns>
        public float GetFieldOfView()
        {
            return MathHelpers.ToDegrees(FieldOfView);
        }

        /// <summary>
        /// Sets the current field of view.
        /// NOTICE: this function currently has a hard limit of 89 FOV maximum.
        /// </summary>
        /// <param name="in_degrees">The field of view in degrees.</param>
        public void SetFieldOfView(float in_degrees)
        {
            float fovY = FieldOfViewY * pStandardCameraConfig->option.minFovyRate;

            // HACK (Hyper): temporary fix, limits FOV to 0-89 to prevent unstable game state.
            // TODO (Hyper): figure out what's causing Bullet to throw up at 90+ FOV.
            in_degrees = MathHelpers.Clamp(in_degrees, 0.0f, 89.0f);
            
            FieldOfViewScalar = ((MathHelpers.ToRadians(in_degrees) - fovY) / (FieldOfViewY - fovY));
        }
    }
}