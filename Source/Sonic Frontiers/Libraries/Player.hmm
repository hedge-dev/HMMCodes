Library "Player" by "Hyper, NM, Ahremic, Skyth & Sajid"
{
    #include "BlackboardStatus" noemit
    #include "Helpers" noemit

    #lib "BlackboardStatus"
    #lib "Collections"
    #lib "GameManager"
    #lib "GameObject"
    #lib "MessageManager"
    #lib "Reflection"
    #lib "StringMapOperation"
    #lib "VectorHelpers"

    #lib "Sonic"
    #lib "SonicParameters"

    #lib "Amy"
    #lib "AmyParameters"

    #lib "Knuckles"
    #lib "KnucklesParameters"

    #lib "Tails"
    #lib "TailsParameters"

    #import "GOComponents"
    #import "Messages"
    #import "Objects"
    #import "Plugins"
    #import "Postures"
    #import "Services"
    #import "States"

    #load "System.Numerics.dll"

    using System.Collections.Generic;
    using System.Linq;
    using System.Numerics;
    using System.Runtime.InteropServices;

    private static bool _isInitialised = false;

    private static float _grindStepRadius = 0.0f;
    
    /// <summary>
    /// A struct representation of `app::player::Player`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x2F0, Pack = 0x10)]
    public struct Data
    {
        /// <summary>
        /// An instance of `hh::game::GameObject`, the base class for `app::player::Player`.
        /// </summary>
        [FieldOffset(0)]     public GameObject.Data GameObject;

        /// <summary>
        /// A pointer to an instance of `PlayerHsmContext`.
        /// </summary>
        [FieldOffset(0x2E0)] public PlayerHsmContext* pContext;
    }

    /// <summary>
    /// A struct representation of `app::player::PlayerHsmContext`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x88)]
    public struct PlayerHsmContext
    {
        /// <summary>
        /// A pointer to an instance of `app::player::Player`.
        /// </summary>
        [FieldOffset(0x20)] public Data* pPlayer;

        /// <summary>
        /// A pointer to an instance of `app::player::BlackboardStatus`.
        /// </summary>
        [FieldOffset(0x28)] public BlackboardStatus.Data* pBlackboardStatus;

        /// <summary>
        /// A pointer to an instance of `app::player::GOCPlayerHsm`.
        /// </summary>
        [FieldOffset(0x38)] public GOCPlayerHsm* pGOCPlayerHsm;

        /// <summary>
        /// A pointer to an instance of `app::player::GOCPlayerPosture`.
        /// </summary>
        [FieldOffset(0x40)] public GOCPlayerPosture* pGOCPlayerPosture;

        /// <summary>
        /// A pointer to an instance of `app::player::PlayerHsmContext::OutOfControlTimerList`.
        /// </summary>
        [FieldOffset(0x78)] public long pOutOfControlTimerList;

        /// <summary>
        /// A pointer to an instance of `app::player::PlayerHsmContext::DamagedObjects`.
        /// </summary>
        [FieldOffset(0x80)] public long pDamagedObjects;
    }

    [LibraryInitializer]
    public void Init()
    {
        if (_isInitialised)
            return;

        // Always construct app::player::AmyInfo.
        WriteNop
        (
            /* 0x14091181B */
            ScanSignature
            (
                "\x74\x3E\x48\x8B\x07\xBA\xD8\x00\x00\x00",
                "xxxxxxxxxx"
            ),
            
            2
        );

        // Always construct app::player::KnucklesInfo.
        WriteNop
        (
            /* 0x1409117D0 */
            ScanSignature
            (
                "\x74\x47\x48\x8B\x07\xBA\xC0\x00\x00\x00",
                "xxxxxxxxxx"
            ),
            
            2
        );

        // Always construct app::player::TailsInfo.
        WriteNop
        (
            /* 0x140911785 */
            ScanSignature
            (
                "\x74\x47\x48\x8B\x07\xBA\x20\x01\x00\x00",
                "xxxxxxxxxx"
            ),
            
            2
        );

        fixed (float* p_grindStepRadius = &_grindStepRadius)
        {
            WriteAsmHook
            (
                $@"
                    mov   rcx, {(long)p_grindStepRadius}
                    cmp   dword ptr [rcx], 0
                    je    zeroRadius
                    movss xmm1, dword ptr [rcx]
                    jmp   exit
                zeroRadius:
                    movss xmm1, dword ptr [rsp + 0x68 + 0x28]
                exit:
                    xor   ecx, ecx
                    movss dword ptr [rsp + 0x68 + 0xFFFFFFFFFFFFFFE8], xmm1
                    xorps xmm0, xmm0
                    mov   qword ptr [rsp + 0x68 + 0xFFFFFFFFFFFFFFB8], rcx
                ",

                /* 0x1408B3E51 */
                ScanSignature
                (
                    "\x33\xC9\xF3\x0F\x11\x4C\x24\x50",
                    "xxxxxxxx"
                ),

                HookBehavior.Replace
            );
        }

        _isInitialised = true;
    }

    [LibraryUpdate]
    public void Update()
    {
        var pLevelInfo = GameManager.GetService<LevelInfo>();

        if (pLevelInfo == null)
            return;

        var pStageData = pLevelInfo->pStageData;

        if (pStageData == null)
            return;
        
        // Update current stage attributes to include other characters.
        pStageData->AttributeFlags |= (1 << (int)StageInfo.Attributes.Sonic);
        pStageData->AttributeFlags |= (1 << (int)StageInfo.Attributes.Amy);
        pStageData->AttributeFlags |= (1 << (int)StageInfo.Attributes.Knuckles);
        pStageData->AttributeFlags |= (1 << (int)StageInfo.Attributes.Tails);
    }

    public PlayerType GetPlayerType()
    {
        var pLevelInfo = GameManager.GetService<LevelInfo>();

        if (pLevelInfo == null)
            return PlayerType.Unknown;

        return (PlayerType)pLevelInfo->PlayerInfo[0]->CharacterIndex;
    }

    public Data* GetPlayerData()
    {
        var pLevelInfo = GameManager.GetService<LevelInfo>();
        
        if (pLevelInfo == null)
            return null;

        return (Data*)MessageManager.GetMessengerFromHandle(pLevelInfo->PlayerInfo[0]->PlayerHandle);
    }

    public PlayerHsmContext* GetPlayerContext()
    {
        var pPlayer = GetPlayerData();

        if (pPlayer == null)
            return null;

        return pPlayer->pContext;
    }

    public void SetPlayerType(PlayerType in_playerType)
    {
        if (in_playerType == PlayerType.Unknown)
            return;

        Messages.SendMessageToGameManager(new MsgChangePlayerCharacter(in_playerType));
    }

    public enum PlayerType : sbyte
    {
        Unknown = -1,
        Sonic,
        Amy,
        Knuckles,
        Tails
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static class Animation
    {
        /* 0x1408122E0 */
        private static long _sigSetAnimation = Memory.ReadCall(ScanSignature("\xE8\xCC\xCC\xCC\xCC\x80\xBD\xB0\x00\x00\x00\x00\x48\x8B\x9C\x24\xB8\x00\x00\x00", "x????xxxxxxxxxxxxxxx"));
        FUNCTION_PTR(void, fpSetAnimation, _sigSetAnimation, GOCPlayerVisual* in_pGOCPlayerVisual, long in_pAnimationName, byte in_unk1)

        /* 0x140813140 */
        private static long _sigSetAnimationParameter = ScanSignature("\x40\x53\x48\x83\xEC\x30\x48\x8B\x81\x10\x01\x00\x00\x48\x8B\xDA", "xxxxxxxxxxxxxxxx");
        FUNCTION_PTR(void, fpSetAnimationParameter, _sigSetAnimationParameter, GOCPlayerVisual* in_pGOCPlayerVisual, long in_pParameterName, float in_value)

        public static void SetAnimation(string in_animationName)
        {
            var pPlayer = GetPlayerData();

            if (pPlayer == null)
                return;

            var pGOCPlayerVisual = GameObject.GetGOC<GOCPlayerVisual>(&pPlayer->GameObject);

            if (pGOCPlayerVisual == null)
                return;

            GET_FUNCTION_PTR(fpSetAnimation)(pGOCPlayerVisual, TO_STRING_PTR(in_animationName), 0xFE);
        }

        public static void SetAnimationParameter(string in_parameterName, float in_value)
        {
            var pPlayer = GetPlayerData();

            if (pPlayer == null)
                return;

            var pGOCPlayerVisual = GameObject.GetGOC<GOCPlayerVisual>(&pPlayer->GameObject);

            if (pGOCPlayerVisual == null)
                return;
            
            GET_FUNCTION_PTR(fpSetAnimationParameter)(pGOCPlayerVisual, TO_STRING_PTR(in_parameterName), in_value);
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    public enum CollisionType : byte
    {
        Default,
        Damage = 2,
        DamageHoming = 3
    }

    public static class Collision
    {
        /* 0x14086A0B0 */
        private static long _sigGetStatePluginCollision = ScanSignature("\x40\x56\x48\x83\xEC\x20\x48\x8B\x41\x38\x48\x8B\xB0\x08\x01\x00\x00\x48\x85\xF6\x74\x65\x48\x8B\x46\x20\x48\x89\x5C\x24\x30\x48\x8B\x5E\x18\x48\x89\x7C\x24\x38\x48\x8D\x3C\xC3\x48\x3B\xDF\x74\x19\x48\x8B\x0B\x48\x8B\x01\xFF\x50\xCC\x3D\x8E\xB4\x47\x3B", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?xxxxx");
        FUNCTION_PTR(long, fpGetStatePluginCollision, _sigGetStatePluginCollision, PlayerHsmContext* in_pPlayerHsmContext)

        /* 0x1408ED200 */
        private static long _sigSetCollisionSphere = ScanSignature("\x40\x53\x48\x83\xEC\x50\x0F\x28\x05\xCC\xCC\xCC\xCC\x48\x8B\xD9\x88\x54\x24\x20", "xxxxxxxxx????xxxxxxx");
        FUNCTION_PTR(long, fpSetCollisionSphere, _sigSetCollisionSphere, long in_pStatePluginCollision, CollisionType in_type, float in_radius)

        /* 0x14BB87C00 */
        private static long _sigSetEntityCollision = ScanSignature("\x40\x53\x48\x83\xEC\x20\x48\x8B\x41\x50\x0F\xB6\xDA", "xxxxxxxxxxxxx");
        FUNCTION_PTR(void, fpSetEntityCollision, _sigSetEntityCollision, PlayerHsmContext* in_pPlayerHsmContext, bool in_isEnabled)

        public static long GetPlugin()
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return 0;

            return GET_FUNCTION_PTR(fpGetStatePluginCollision)(pPlayerContext);
        }

        public static long SetCollisionSphere(CollisionType in_type, float in_radius)
        {
            var pStatePluginCollision = GetPlugin();

            if (pStatePluginCollision == 0)
                return 0;

            return GET_FUNCTION_PTR(fpSetCollisionSphere)(pStatePluginCollision, in_type, in_radius);
        }

        public static void SetEntityCollision(bool in_isEnabled)
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return;
            
            GET_FUNCTION_PTR(fpSetEntityCollision)(pPlayerContext, in_isEnabled);
        }

        public static void SetGrindStepRadius(float in_radius)
        {
            _grindStepRadius = in_radius;
        }

        public static void ResetGrindStepRadius()
        {
            _grindStepRadius = 0.0f;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    public static class Effect
    {
        /* 0x1408DF420 */
        private static long _sigPlayEffect = ScanSignature("\x48\x8B\xC4\x48\x89\x58\x08\x48\x89\x68\x18\x48\x89\x70\x20\x57\x48\x81\xEC\xA0\x00\x00\x00\xF3", "xxxxxxxxxxxxxxxxxxxxxxxx");
        FUNCTION_PTR(long, fpPlayEffect, _sigPlayEffect, StatePluginBase* in_pStatePluginEffect, uint in_handleNameHash, long in_pEffectName)

        /* 0x14B912E80 */
        private static long _sigStopEffect = ScanSignature("\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x48\x8B\x41\x30\x48\x8D", "xxxxxxxxxxxxxxxx");
        FUNCTION_PTR(long, fpStopEffect, _sigStopEffect, StatePluginBase* in_pStatePluginEffect, uint in_handleNameHash)

        /* 0x140901E20 */
        private static long _sigPlayAnimationEffect = ScanSignature("\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x48\x8B\xF2\x48\x8B\xF9\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD8", "xxxxxxxxxxxxxxxxxxxxxx????xxx");
        FUNCTION_PTR(bool, fpPlayAnimationEffect, _sigPlayAnimationEffect, PlayerHsmContext* in_pPlayerHsmContext, long in_pEffectName)

        /* 0x14BC65500 */
        private static long _sigStopAnimationEffects = ScanSignature("\x40\x53\x48\x83\xEC\x20\x48\x89\xCB\xE8\xCC\xCC\xCC\xCC\x48\x85\xC0", "xxxxxxxxxx????xxx");
        FUNCTION_PTR(long, fpStopAnimationEffects, _sigStopAnimationEffects, PlayerHsmContext* in_pPlayerHsmContext)

        public static void PlayEffect(string in_handleName, string in_effectName)
        {
            var pStatePluginEffect = State.GetStatePlugin("StatePluginEffect");

            if (pStatePluginEffect == null)
                return;

            GET_FUNCTION_PTR(fpPlayEffect)(pStatePluginEffect, StringMapOperation.ComputeHash(in_handleName), TO_STRING_PTR(in_effectName));
        }

        public static void StopEffect(string in_handleName)
        {
            var pStatePluginEffect = State.GetStatePlugin("StatePluginEffect");

            if (pStatePluginEffect == null)
                return;

            GET_FUNCTION_PTR(fpStopEffect)(pStatePluginEffect, StringMapOperation.ComputeHash(in_handleName));
        }

        public static void PlayAnimationEffect(string in_name)
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return;

            GET_FUNCTION_PTR(fpPlayAnimationEffect, _sigPlayAnimationEffect)(pPlayerContext, TO_STRING_PTR(in_name));
        }

        public static void StopAnimationEffects()
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return;

            GET_FUNCTION_PTR(fpStopAnimationEffects)(pPlayerContext);
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    public enum InputActionType
    {
        PlayerJump = 0,             // A
        PlayerCyloop = 1,           // Y
        PlayerAttack = 2,           // X
        PlayerLightDash = 3,        // LS
        PlayerBoost = 4,            // RT
        PlayerDrift = 5,            // Unknown
        PlayerChangeSuperSonic = 6, // Unknown
        PlayerLeftStep = 7,         // LB
        PlayerRightStep = 8,        // RB
        PlayerStomping = 9,         // B
        PlayerAction = 10,          // Unknown
        PlayerActionAlways = 11,    // Unknown
        PlayerSmash = 12,           // Unknown
        CameraGaze = 13,            // RS
        PlayerSonicboom = 14        // LT
    }

    public static class Input
    {
        private enum ButtonState
        {
            Pressed,
            Down,
            Released
        }

        UNMANAGED_FUNCTION_DELEGATE(bool, TInputCommonDelegate, PlayerHsmContext* in_pPlayerHsmContext, InputActionType in_actionType)

        /* 0x1409C80D0 */
        private static long _sigIsPressed = ScanSignature
        (
            "\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x48\x63\xFA\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD8\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD0\x48\x8B\xCB\xE8\xCC\xCC\xCC\xCC\x48\x8B\x5C\x24\x30\x48\x8B\x80\x90\x00\x00\x00\x48\x8B\x48\x78\x0F\xB6\x44\xF9\x07\xD0",
            "xxxxxxxxxxxxxx????xxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxxx"
        );
        
        /* 0x1409C82A0 */
        private static long _sigIsDown = ScanSignature
        (
            "\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x48\x63\xFA\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD8\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD0\x48\x8B\xCB\xE8\xCC\xCC\xCC\xCC\x48\x8B\x5C\x24\x30\x48\x8B\x80\x90\x00\x00\x00\x48\x8B\x48\x78\x0F\xB6\x44\xF9\x07\xF6",
            "xxxxxxxxxxxxxx????xxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxxx"
        );

        /* 0x1409C8250 */
        private static long _sigIsReleased = ScanSignature
        (
            "\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x48\x63\xFA\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD8\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD0\x48\x8B\xCB\xE8\xCC\xCC\xCC\xCC\x48\x8B\x5C\x24\x30\x48\x8B\x80\x90\x00\x00\x00\x48\x8B\x48\x78\x0F\xB6\x44\xF9\x07\xC0",
            "xxxxxxxxxxxxxx????xxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxxx"
        );

        private static bool CheckButtonState(ButtonState in_buttonState, InputActionType in_actionType)
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return false;

            long ptr = 0;

            switch (in_buttonState)
            {
                case ButtonState.Pressed:
                    ptr = _sigIsPressed;
                    break;

                case ButtonState.Down:
                    ptr = _sigIsDown;
                    break;

                case ButtonState.Released:
                    ptr = _sigIsReleased;
                    break;
            }

            if (ptr == 0)
                return false;

            return CREATE_UNMANAGED_FUNCTION_PTR(TInputCommonDelegate, ptr)(pPlayerContext, in_actionType);
        }

        public static bool IsPressed(InputActionType in_actionType)
        {
            return CheckButtonState(ButtonState.Pressed, in_actionType);
        }

        public static bool IsDown(InputActionType in_actionType)
        {
            return GetPlayerContext() == null ? false : !CheckButtonState(ButtonState.Down, in_actionType);
        }

        public static bool IsReleased(InputActionType in_actionType)
        {
            return CheckButtonState(ButtonState.Released, in_actionType);
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    public static class Kinematics
    {
        public static GOCPlayerKinematicParams* Get()
        {
            var pPlayer = GetPlayerData();

            if (pPlayer == null)
                return null;

            return GameObject.GetGOC<GOCPlayerKinematicParams>(&pPlayer->GameObject);
        }

        public static Vector3 GetForward()
        {
            var kinematics = Get();

            if (kinematics == null)
                return Vector3.Zero;

            return VectorHelpers.GetForward(kinematics->Rotation);
        }

        public static float GetMagnitude()
        {
            var kinematics = Get();

            if (kinematics == null)
                return 0.0f;

            return VectorHelpers.GetMagnitude(kinematics->Velocity);
        }

        public static float GetHorizontalMagnitude()
        {
            var kinematics = Get();

            if (kinematics == null)
                return 0.0f;

            return VectorHelpers.GetHorizontalMagnitude(kinematics->Velocity);
        }
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static class Message
    {
        private static bool _isInitialised = false;

        private static int _currentMessageID = -1;

        private static void Init()
        {
            if (_isInitialised)
                return;

            fixed (int* p_currentMessageID = &_currentMessageID)
            {
                WriteAsmHook
                (
                    $@"
                        mov    eax, [rdx + 8]
                        mov    r14, {(long)p_currentMessageID}
                        mov    dword ptr [r14], eax
                        mov    r14, rdx
                        movaps xmmword ptr [rsp + 0x260 + 0xFFFFFFFFFFFFFFD0], xmm6
                    ",

                    /* 0x140864C1B */
                    ScanSignature
                    (
                        "\x8B\x42\x08\x4C\x8B\xF2\x0F\x29\xB4\x24\x30\x02\x00\x00",
                        "xxxxxxxxxxxxxx"
                    ),

                    HookBehavior.Replace
                );
            }

            _isInitialised = true;
        }

        public static int GetMessageID()
        {
            Init();

            return _currentMessageID;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static class Posture
    {
        public static PlayerPosture* GetPosture(string in_postureName)
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return null;

            var pGOCPlayerPosture = pPlayerContext->pGOCPlayerPosture;

            if (pGOCPlayerPosture == null)
                return null;

            var pPostureMoveManager = pGOCPlayerPosture->pPostureMoveManager;

            if (pPostureMoveManager == null)
                return null;

            return pPostureMoveManager->GetPlayerPosture(in_postureName);
        }

        MAKE_STATIC_GENERIC_API(GetPosture)
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static class Sound
    {
        /* 0x140AE69F0 */
        private static long _sigPlaySound = ScanSignature("\x4C\x8B\xDC\x49\x89\x5B\x08\x57\x48\x81\xEC\x80\x00\x00\x00", "xxxxxxxxxxxxxxx");
        FUNCTION_PTR(int*, fpPlaySound, _sigPlaySound, GOComponent* in_pGOCSound, int* in_pUnk1, long in_pSoundName, float in_unk2)

        /* 0x1405A90FF */
        private static long _sigStopSound = Memory.ReadCall(ScanSignature("\xE8\xCC\xCC\xCC\xCC\x48\x8B\xCF\xE8\xCC\xCC\xCC\xCC\x33\xD2\x48\x8B\xCF\xF3\x0F\x10\x90\x90\x00\x00\x00", "x????xxxx????xxxxxxxxxxxxx"));
        FUNCTION_PTR(int*, fpStopSound, _sigStopSound, int* in_pSoundHandle)

        /* 0x14BC4BA20 */
        private static long _sigPlayVoice = ScanSignature("\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x49\x63\xC0", "xxxxxxxxxxxxx");
        FUNCTION_PTR(long, fpPlayVoice, _sigPlayVoice, uint* in_pStringHash, PlayerHsmContext* in_pPlayerHsmContext, int in_index)

        public static int PlaySound(string in_soundName)
        {
            var pPlayer = GetPlayerData();

            if (pPlayer == null)
                return 0;

            var pGOCSound = GameObject.GetGOC(&pPlayer->GameObject, "GOCSound");

            if (pGOCSound == null)
                return 0;

            int zero = 0;
            
            return *(GET_FUNCTION_PTR(fpPlaySound)(pGOCSound, &zero, TO_STRING_PTR(in_soundName), 0.0f));
        }

        public static void StopSound(int* in_pSoundHandle)
        {
            GET_FUNCTION_PTR(fpStopSound)(in_pSoundHandle);
        }

        public static void PlayVoice(int in_index)
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return;

            // voice
            uint hash = 0x6B2E132;

            GET_FUNCTION_PTR(fpPlayVoice)(&hash, pPlayerContext, in_index);
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    public static class State
    {
        private static bool _isInitialised = false;

        private static Dictionary<PlayerType, List<int>> _discardedStates = new()
        {
            { PlayerType.Sonic, new() },
            { PlayerType.Amy, new() },
            { PlayerType.Knuckles, new() },
            { PlayerType.Tails, new() }
        };

        private static Dictionary<PlayerType, Dictionary<int, int>> _redirectedStates = new()
        {
            { PlayerType.Sonic, new() },
            { PlayerType.Amy, new() },
            { PlayerType.Knuckles, new() },
            { PlayerType.Tails, new() }
        };

        private static int _currentStateID = -1;
        private static Collections.StackList<int> _stateStackTrace = new(10);

        public delegate T TStateNotifyAction<T>(T in_stateId, T[] in_stateStackTrace);
        private static List<Delegate> _stateNotifyActions = new();

        /* 0x140802400 */
        private static long _sigSetState = ScanSignature("\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x48\x8B\xD9\x41\x8B\xF8\x48\x81\xC1\x88\x00\x00\x00\x8B\xF2\xE8\xCC\xCC\xCC\xCC\x3B", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx????x");
        FUNCTION_PTR(void, fpSetState, _sigSetState, GOCPlayerHsm* in_pGOCPlayerHsm, int in_stateId, int in_unk1)

        /* 0x14091ED60 */
        private static long _sigAddStateParameter = ScanSignature("\x48\x89\x5C\x24\x08\x48\x89\x6C\x24\x10\x48\x89\x74\x24\x18\x48\x89\x7C\x24\x20\x41\x56\x48\x83\xEC\x20\x48\x8B\x02\x48\x8B\xE9", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        FUNCTION_PTR(void, fpAddStateParameter, _sigAddStateParameter, PlayerStateParameter* in_pPlayerStateParameter, long in_pStateParameter)

        UNMANAGED_FUNCTION(int, SetStateID, int in_stateId)
        {
            if (in_stateId != -1)
            {
                _stateStackTrace.Push(_currentStateID);

                _currentStateID = in_stateId;
            }

            foreach (var action in _stateNotifyActions)
                in_stateId = (int)action.DynamicInvoke(_currentStateID, _stateStackTrace.ToArray());

            var playerType = GetPlayerType();

            if (_discardedStates[playerType].Contains(in_stateId))
                return -2;

            if (_redirectedStates[playerType].ContainsKey(in_stateId))
                return _redirectedStates[playerType][in_stateId];

            return in_stateId;
        }

        private static void Init()
        {
            if (_isInitialised)
                return;

            WriteAsmHook
            (
                $@"
                    mov   edx, [rbx + 0x114]
                    mov   ecx, edx
                    mov   rax, {GET_UNMANAGED_FUNCTION_PTR(SetStateID)}
                    call  rax
                    mov   edx, eax
                    cmp   edx, -2
                    jne   exit
                    mov   r15, qword ptr [rsp + 0x38 + 0xFFFFFFFFFFFFFFE8]
                    add   rsp, 0x28
                    pop   rbp
                    pop   rbx
                    ret
                exit:
                    movzx eax, byte ptr [rbx + 0x11C]
                ",

                /* 0x1408AA67D */
                ScanSignature
                (
                    "\x8B\x93\x14\x01\x00\x00\x83\xFA\xFF",
                    "xxxxxxxxx"
                ),

                HookBehavior.Replace
            );

            _isInitialised = true;
        }

        public static T GetCurrentStateID<T>()
        {
            Init();

            return (T)(object)_currentStateID;
        }

        public static T GetPreviousStateID<T>(int in_stackIndex = 0)
        {
            Init();

            return (T)(object)_stateStackTrace.GetItemAt(in_stackIndex);
        }

        public static PlayerType GetPlayerTypeFromStateID<T>()
        {
            if (typeof(T) == typeof(Amy.StateID))
            {
                return PlayerType.Amy;
            }
            else if (typeof(T) == typeof(Knuckles.StateID))
            {
                return PlayerType.Knuckles;
            }
            else if (typeof(T) == typeof(Tails.StateID))
            {
                return PlayerType.Tails;
            }

            return PlayerType.Sonic;
        }

        public static T* GetState<T>() where T : unmanaged
        {
            Init();

            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return null;
            
            var pGOCPlayerHsm = pPlayerContext->pGOCPlayerHsm;

            if (pGOCPlayerHsm == null)
                return null;

            string name = ((Sonic.StateID)_currentStateID).ToString();
            
            switch (GetPlayerType())
            {
                case PlayerType.Amy:
                    name = ((Amy.StateID)_currentStateID).ToString();
                    break;

                case PlayerType.Knuckles:
                    name = ((Knuckles.StateID)_currentStateID).ToString();
                    break;

                case PlayerType.Tails:
                    name = ((Tails.StateID)_currentStateID).ToString();
                    break;
            }

            var nameAttr = Helpers.GetInternalName(typeof(T));

            if (name != (string.IsNullOrEmpty(nameAttr) ? typeof(T).Name : nameAttr))
                return null;
            
            return (T*)pGOCPlayerHsm->Hsm.Base.pState;
        }

        public static StatePluginBase* GetStatePlugin(string in_pluginName)
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return null;
            
            var pStatePluginManager = pPlayerContext->pGOCPlayerHsm->pStatePluginManager;

            if (pStatePluginManager == null)
                return null;

            return pStatePluginManager->GetStatePlugin(in_pluginName);
        }

        MAKE_STATIC_GENERIC_API(GetStatePlugin)

        public static void AddStateParameter<T>(T in_stateParameter) where T : unmanaged
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return;
            
            var pPlayerStateParameter = pPlayerContext->pGOCPlayerHsm->pPlayerStateParameter;

            if (pPlayerStateParameter == null)
                return;

            var pMemory = Marshal.AllocHGlobal(Marshal.SizeOf(in_stateParameter));
            {
                Marshal.StructureToPtr<T>(in_stateParameter, pMemory, false);
            }
            
            GET_FUNCTION_PTR(fpAddStateParameter)(pPlayerStateParameter, (long)pMemory);
        }

        public static StateParameter* GetStateParameter(string in_parameterName)
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return null;
            
            var pPlayerStateParameter = pPlayerContext->pGOCPlayerHsm->pPlayerStateParameter;

            if (pPlayerStateParameter == null)
                return null;

            foreach (var pStateParameter in pPlayerStateParameter->StateParameters)
            {
                if (pStateParameter == 0)
                    continue;
                
                if (((StateParameter*)pStateParameter)->GetNameHash()() == StringMapOperation.ComputeHash(in_parameterName))
                    return (StateParameter*)pStateParameter;
            }

            return null;
        }

        MAKE_STATIC_GENERIC_API(GetStateParameter)

        public static void AddStateNotifyAction<T>(TStateNotifyAction<T> in_action)
        {
            Init();

            if (_stateNotifyActions.Contains(in_action))
                return;

            _stateNotifyActions.Add(in_action);
        }

        public static void RemoveStateNotifyAction<T>(TStateNotifyAction<T> in_action)
        {
            Init();

            if (!_stateNotifyActions.Contains(in_action))
                return;

            _stateNotifyActions.Remove(in_action);
        }

        public static void Redirect<T>(T in_source, T in_destination)
        {
            Init();

            var playerType = GetPlayerTypeFromStateID<T>();
            var src = (int)(object)in_source;
            var dest = (int)(object)in_destination;

            if (_redirectedStates[playerType].ContainsKey(src))
            {
                _redirectedStates[playerType][src] = dest;
                return;
            }

            _redirectedStates[playerType].Add(src, dest);
        }

        public static void Discard<T>(T in_source)
        {
            Init();

            var playerType = GetPlayerTypeFromStateID<T>();
            var src = (int)(object)in_source;

            if (_discardedStates[playerType].Contains(src))
                return;

            _discardedStates[playerType].Add(src);
        }

        public static void Restore<T>(T in_source)
        {
            Init();

            var playerType = GetPlayerTypeFromStateID<T>();
            var src = (int)(object)in_source;

            if (_discardedStates[playerType].Contains(src))
                _discardedStates[playerType].Remove(src);
            
            if (_redirectedStates[playerType].ContainsKey(src))
                _redirectedStates[playerType].Remove(src);
        }

        public static void SetState<T>(T in_destination)
        {
            var pPlayerContext = GetPlayerContext();

            if (pPlayerContext == null)
                return;
            
            GET_FUNCTION_PTR(fpSetState)(pPlayerContext->pGOCPlayerHsm, (int)(object)in_destination, 0);
        }

        public static void SetState<T1, T2>(T1 in_destination, T2 in_stateParameter) where T2 : unmanaged
        {
            AddStateParameter<T2>(in_stateParameter);
            SetState<T1>(in_destination);
        }

        public static bool IsStateActive<T>(params T[] in_states)
        {
            return in_states.Contains(GetCurrentStateID<T>());
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static class Status
    {
        public static bool IsGrounded()
        {
            var pLevelInfo = GameManager.GetService<LevelInfo>();

            if (pLevelInfo == null)
                return false;

            return pLevelInfo->PlayerInfo[0]->IsGrounded;
        }

        public static bool IsGroundedSpecial()
        {
            return IsGrounded() ||
                IS_STATE_FLAG(IsGrind) ||
                IS_STATE_FLAG(IsSpringJump) ||
                IS_STATE_FLAG(IsWallClimb) ||
                IS_STATE_FLAG(IsWallClimbIdle);
        }

        public static bool IsLockOnCursorVisible()
        {
            var pUICursor = GameManager.GetGameObject<UICursor>();

            if (pUICursor == null)
                return false;
                
            var pGOCTinyFsm = GameObject.GetGOC<GOCTinyFsm>(&pUICursor->Base);

            if (pGOCTinyFsm == null)
                return false;

            var pUILockonContext = pGOCTinyFsm->GetContext<UILockonContext>();

            if (pUILockonContext == null)
                return false;
                
            return pUILockonContext->pGOCCollider != null;
        }

        public static GameObject.Data* GetLockOnTarget()
        {
            var pUICursor = GameManager.GetGameObject<UICursor>();

            if (pUICursor == null)
                return null;
                
            var pGOCTinyFsm = GameObject.GetGOC<GOCTinyFsm>(&pUICursor->Base);

            if (pGOCTinyFsm == null)
                return null;

            var pUILockonContext = pGOCTinyFsm->GetContext<UILockonContext>();

            if (pUILockonContext == null)
                return null;
                
            var pGOCCollider = pUILockonContext->pGOCCollider;

            if (pGOCCollider == null)
                return null;
                
            return pGOCCollider->pGameObject;
        }

        public static bool IsSpecialAction()
        {
            return IS_STATE_FLAG(IsGrind) ||
                IS_STATE_FLAG(IsDiving) || 
                IS_STATE_FLAG(IsDivingBoost) || 
                IS_STATE_FLAG(IsDrift) || 
                IS_STATE_FLAG(IsWallClimb) ||
                IS_STATE_FLAG(IsWallClimbIdle) ||
                IS_STATE_FLAG(IsBoarding) ||
                IS_STATE_FLAG(IsSpringJump) ||
                IS_WORLD_FLAG(IsDead) ||
                IS_WORLD_FLAG(IsOutOfControl) ||
                IS_WORLD_FLAG(IsAutoRun) ||
                IS_WORLD_FLAG(IsNitroBoost);
        }

        public static bool IsDropDashCharge()
        {
            var pStateDoubleJump = State.GetState<StateDoubleJump>();

            if (pStateDoubleJump != null)
                return pStateDoubleJump->DropDashChargeTimer > 0.0f;

            var pStateRecoveryJump = State.GetState<StateRecoveryJump>();

            if (pStateRecoveryJump != null)
                return pStateRecoveryJump->IsDropDashCharge;

            return false;
        }

        public static GOCPlayerParameter.ModePackageType GetModePackageType()
        {
            var pPlayer = GetPlayerData();

            if (pPlayer == null)
                return GOCPlayerParameter.ModePackageType.ForwardView;

            var pGOCPlayerParameter = GameObject.GetGOC<GOCPlayerParameter>(&pPlayer->GameObject);

            if (pGOCPlayerParameter == null)
                return GOCPlayerParameter.ModePackageType.ForwardView;

            return pGOCPlayerParameter->CurrentModePackageType;
        }

        public static bool IsSideView()
        {
            return GetModePackageType() == GOCPlayerParameter.ModePackageType.SideView;
        }

        public static bool IsUnderwater()
        {
            return GetModePackageType() == GOCPlayerParameter.ModePackageType.Water;
        }
    }
}