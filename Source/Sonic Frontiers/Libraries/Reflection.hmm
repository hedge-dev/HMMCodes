Library "Reflection" by "Hyper" 
{
    #include "BlackboardStatus" noemit

    #lib "Bitwise"
    #lib "BlackboardStatus"
    #lib "Resources"
    #lib "SonicParameters"
    
    /// <summary>
    /// Gets a parameter from the specified hierarchy.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "Reflection" noemit
    /// //
    /// {
    ///     // TODO
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_info">An instance of `ReflectionInfo<T>`.</param>
    /// <param name="in_hierarchy">The hierarchy to get the reflection data from.</param>
    /// <returns>A value pertaining to the data stored at the requested hierarchy.</returns>
    #define RFL_GET_PARAM(in_info, in_hierarchy) in_info.pData->in_hierarchy

    /// <summary>
    /// Sets a parameter at the specified hierarchy.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "Reflection" noemit
    /// //
    /// {
    ///     // TODO
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_info">An instance of `ReflectionInfo<T>`.</param>
    /// <param name="in_hierarchy">The hierarchy to get the reflection data from.</param>
    /// <param name="in_value">The value to set the data at the specified hierarchy to.</param>
    #define RFL_SET_PARAM(in_info, in_hierarchy, in_value) in_info.pData->in_hierarchy = in_value

    /// <summary>
    /// Resets a parameter back to default at the specified hierarchy.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "Reflection" noemit
    /// //
    /// {
    ///     // TODO
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_info">An instance of `ReflectionInfo<T>`.</param>
    /// <param name="in_type">The reflection struct type.</param>
    /// <param name="in_hierarchy">The hierarchy to get the reflection data from.</param>
    #define RFL_RESET_PARAM(in_info, in_type, in_hierarchy) in_info.pData->in_hierarchy = ((in_type)Reflection.GetOriginalData(in_info.Name)).in_hierarchy

    /// <summary>
    /// Gets a parameter from the specified hierarchy in the current contextual mode package.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "Reflection" noemit
    /// //
    /// {
    ///     // TODO
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_info">An instance of `ReflectionInfo<T>`.</param>
    /// <param name="in_hierarchy">The hierarchy to get the reflection data from.</param>
    /// <returns>A value pertaining to the data stored at the requested hierarchy.</returns>
    #define RFL_GET_CONTEXTUAL_PLAYER_PARAM(in_info, in_hierarchy) \
        (Player.Status.IsSideView() \
            ? in_info.pData->cyberspaceSV.in_hierarchy \
            : (BlackboardStatus.Get() != null && BlackboardStatus.Get()->WorldFlags[(int)BlackboardStatus.WorldFlags.IsCyberSpace >> 6].Test((ulong)BlackboardStatus.WorldFlags.IsCyberSpace)) \
                ? in_info.pData->cyberspace.in_hierarchy \
                : in_info.pData->forwardView.in_hierarchy)

    /// <summary>
    /// Sets a parameter at the specified hierarchy in the current contextual mode package.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "Reflection" noemit
    /// //
    /// {
    ///     // TODO
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_info">An instance of `ReflectionInfo<T>`.</param>
    /// <param name="in_hierarchy">The hierarchy to get the reflection data from.</param>
    /// <param name="in_value">The value to set the data at the specified hierarchy to.</param>
    #define RFL_SET_CONTEXTUAL_PLAYER_PARAM(in_info, in_hierarchy, in_value) \
        if (Player.Status.IsSideView()) \
            in_info.pData->cyberspaceSV.in_hierarchy = in_value; \
        else if (BlackboardStatus.Get() != null && BlackboardStatus.Get()->WorldFlags[(int)BlackboardStatus.WorldFlags.IsCyberSpace >> 6].Test((ulong)BlackboardStatus.WorldFlags.IsCyberSpace)) \
            in_info.pData->cyberspace.in_hierarchy = in_value; \
        else \
            in_info.pData->forwardView.in_hierarchy = in_value;

    /// <summary>
    /// Resets a parameter back to default at the specified hierarchy in the current contextual mode package.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "Reflection" noemit
    /// //
    /// {
    ///     // TODO
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_info">An instance of `ReflectionInfo<T>`.</param>
    /// <param name="in_type">The reflection struct type.</param>
    /// <param name="in_hierarchy">The hierarchy to get the reflection data from.</param>
    #define RFL_RESET_CONTEXTUAL_PLAYER_PARAM(in_info, in_type, in_hierarchy) \
        if (Player.Status.IsSideView()) \
            in_info.pData->cyberspaceSV.in_hierarchy = ((in_type)Reflection.GetOriginalData(in_info.Name)).cyberspaceSV.in_hierarchy; \
        else if (BlackboardStatus.Get() != null && BlackboardStatus.Get()->WorldFlags[(int)BlackboardStatus.WorldFlags.IsCyberSpace >> 6].Test((ulong)BlackboardStatus.WorldFlags.IsCyberSpace)) \
            in_info.pData->cyberspace.in_hierarchy = ((in_type)Reflection.GetOriginalData(in_info.Name)).cyberspace.in_hierarchy; \
        else \
            in_info.pData->forwardView.in_hierarchy = ((in_type)Reflection.GetOriginalData(in_info.Name)).forwardView.in_hierarchy;

    using System.Collections.Generic;

    private static bool _isInitialised = false;

    private static List<string> _rflPointersQueue = new();
    private static Dictionary<string, object> _rflBackups = new();
    private static Dictionary<string, long> _rflPointers = new();

    /// <summary>
    /// A class containing basic information pertaining to reflection data.
    /// </summary>
    public class ReflectionInfo<T> where T : unmanaged
    {
        public string Name;
        public Type Type;
        public T* pData;

        public ReflectionInfo(string in_name, T* in_pData)
        {
            this.Name = in_name;
            this.Type = typeof(T);
            this.pData = in_pData;
        }

        public override string ToString()
        {
            return $"{Name} : 0x{((IntPtr)pData).ToString("X16")}";
        }
    }

    [LibraryInitializer]
    public void Init()
    {
    	if (_isInitialised)
    		return;
    	
    	long GetReflectionPtr(string in_resourceName, string in_resourceType, long in_pResourceData)
    	{
    		if (in_resourceType != "ResReflection")
    			return in_pResourceData;

    		if (_rflPointersQueue.Contains(in_resourceName))
    		{
    			long ptr = *(long*)(in_pResourceData + 0x60);

    			if (_rflPointers.ContainsKey(in_resourceName))
    			{
    				_rflPointers[in_resourceName] = ptr;
    			}
    			else
    			{
    				_rflPointers.Add(in_resourceName, ptr);
    			}
    		}

    		return in_pResourceData;
    	}

    	Resources.AddResourceDataAction(GetReflectionPtr);

    	_isInitialised = true;
    }

    /// <summary>
    /// Gets a pointer to a struct pertaining to the reflection data.
    /// </summary>
    /// <param name="in_rflName">The name of the reflection data to wait for.</param>
    /// <returns>A pointer to a struct pertaining to the reflection data.</returns>
    public T* GetDataPtr<T>(string in_rflName) where T : unmanaged
    {
    	if (!_rflPointersQueue.Contains(in_rflName))
    		_rflPointersQueue.Add(in_rflName);

    	if (!_rflPointers.ContainsKey(in_rflName))
    		return null;

        long ptr = _rflPointers[in_rflName];

        if (ptr == 0)
            return null;

        // Check for BINA signature.
        if (*(int*)(ptr - 0x40) != 0x414E4942)
            return null;

        var result = (T*)ptr;

    	if (result != null && !_rflBackups.ContainsKey(in_rflName))
            _rflBackups.Add(in_rflName, *result);

    	return result;
    }

    /// <summary>
    /// Gets information about the requested reflection data.
    /// </summary>
    /// <param name="in_rflName">The name of the reflection data to wait for.</param>
    /// <returns>A `ReflectionInfo<T>` class containing the name, type and pointer to the reflection data.</returns>
    public ReflectionInfo<T> GetDataInfo<T>(string in_rflName) where T : unmanaged
    {
        return new ReflectionInfo<T>(in_rflName, GetDataPtr<T>(in_rflName));
    }

    /// <summary>
    /// Gets the original struct by name for given reflection data (if it was backed up by `GetDataPtr<T>()`).
    /// </summary>
    /// <param name="in_rflName">The name of the reflection data to get.</param>
    /// <returns>A struct pertaining to the original reflection data.</returns>
    public object GetOriginalData(string in_rflName)
    {
        if (!_rflBackups.ContainsKey(in_rflName))
            return null;

        return _rflBackups[in_rflName];
    }
}