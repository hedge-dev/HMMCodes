Library "GOComponents" by "Hyper"
{
    #include "Helpers" noemit

    #lib "Helpers"
    #lib "Memory"
    #lib "Player"
    #lib "PlayerEffect"

    #import "Plugins"
    #import "States"

    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `hh::game::GOComponent`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x80)]
    public struct GOComponent
    {
        /// <summary>
        /// A pointer to an instance of `app::player::Player`.
        /// </summary>
        [FieldOffset(0x28)] public Player.Data* pPlayer;

        /// <summary>
        /// A pointer to an instance of `GOComponentStaticClass`.
        /// </summary>
        [FieldOffset(0x48)] public GOComponentStaticClass* pStaticClass;
    }

    /// <summary>
    /// A struct representation of the static class for storing information about a game object component.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct GOComponentStaticClass
    {
        /// <summary>
        /// The name of this game object component.
        /// </summary>
        [FieldOffset(0)] public Helpers.UnmanagedString Name;

        public override string ToString() => Name.ToString();
    }

    /// <summary>
    /// A struct representation of `app::player::GOCEventTimer`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xC8)]
    public struct GOCEventTimer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0x20)]
        public struct TimerData
        {
            [FieldOffset(0x04)] float Duration;
            [FieldOffset(0x0C)] float TimeYellow;
            [FieldOffset(0x10)] float TimeRed;
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerBlackboard`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x88)]
    public struct GOCPlayerBlackboard
    {
        /// <summary>
        /// A pointer to an instance of `app::player::Blackboard`.
        /// </summary>
        [FieldOffset(0x80)] public Blackboard.Data* pBlackboard;
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerEffect`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xE0)]
    public struct GOCPlayerEffect
    {
        /// <summary>
        /// A pointer to an instance of `app::player::EffectList`.
        /// </summary>
        [FieldOffset(0x88)] public PlayerEffect.EffectList* pEffectList;
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerHsm`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x170)]
    public struct GOCPlayerHsm
    {
        /// <summary>
        /// A pointer to an instance of `hh::ut::HsmBase`.
        /// </summary>
        [FieldOffset(0x88)]  public HsmBase Hsm;

        /// <summary>
        /// A pointer to an instance of `app::player::PlayerStateParameter`.
        /// </summary>
        [FieldOffset(0x100)] public PlayerStateParameter* pPlayerStateParameter;

        /// <summary>
        /// A pointer to an instance of `app::player::StatePluginManager<app::player::PlayerHsmContext>`.
        /// </summary>
        [FieldOffset(0x108)] public StatePluginManager* pStatePluginManager;

        /// <summary>
        /// The current state ID.
        /// </summary>
        [FieldOffset(0x114)] public int StateID;

        /// <summary>
        /// The current state's parent ID.
        /// </summary>
        [FieldOffset(0x118)] public int ParentStateID;

        /// <summary>
        /// Gets the current state ID.
        /// </summary>
        /// <returns>The current state ID.</returns>
        public int GetStateID()
        {
            if (Hsm.Base.CurrentStateIndex != 0)
                return Hsm.Base.States[Hsm.Base.CurrentStateIndex - 1].pData->StateID;

            return -1;
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerKinematicParams`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x5E0, Pack = 0x10)]
    public struct GOCPlayerKinematicParams
    {
        /// <summary>
        /// The current position of the player.
        /// </summary>
        [FieldOffset(0x80)] public Vector3 Position;

        /// <summary>
        /// The current rotation of the player.
        /// </summary>
        [FieldOffset(0x90)] public Quaternion Rotation;

        /// <summary>
        /// The current velocity of the player.
        /// </summary>
        [FieldOffset(0xD0)] public Vector3 Velocity;
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerParameter`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x1A8)]
    public struct GOCPlayerParameter
    {
        /// <summary>
        /// The current mode package type.
        /// </summary>
        [FieldOffset(0xB8)] public ModePackageType CurrentModePackageType;

        /// <summary>
        /// An enum containing the different mode package types from the player's reflection data.
        /// </summary>
        public enum ModePackageType : int
        {
            ForwardView,
            Water,
            CyberSpace,
            SideView
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerVisual`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x180)]
    public struct GOCPlayerVisual {}

    /// <summary>
    /// A struct representation of `hh::ui::GOCSprite`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x230)]
    public struct GOCSprite
    {
        /// <summary>
        /// Bit flags for the sprite state.
        /// </summary>
        [FieldOffset(0x180)] public byte Flags;
    }

    /// <summary>
    /// A struct representation of `app::player::GOCTransform`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x110)]
    public struct GOCTransform
    {
        /// <summary>
        /// The current position of the transform.
        /// </summary>
        [FieldOffset(0xC0)] public Vector3 Position;

        /// <summary>
        /// The current rotation of the transform.
        /// </summary>
        [FieldOffset(0xD0)] public Quaternion Rotation;

        /// <summary>
        /// The current scale of the transform.
        /// </summary>
        [FieldOffset(0xE0)] public Vector3 Scale;
    }
}