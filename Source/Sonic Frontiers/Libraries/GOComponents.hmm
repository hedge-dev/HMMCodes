Library "GOComponents" by "Hyper"
{
    #include "Helpers" noemit

    #lib "GameObject"
    #lib "GOComponentManager"
    #lib "Helpers"
    #lib "Memory"
    #lib "Player"
    #lib "PlayerEffect"
    #lib "StringMapOperation"

    #import "Cameras"
    #import "Collections"
    #import "PlayerVisuals"
    #import "Plugins"
    #import "Postures"
    #import "States"

    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `hh::game::GOComponent`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x80)]
    public struct GOComponent
    {
        /// <summary>
        /// A pointer to an instance of `hh::game::GameObject` acting as the parent of this component.
        /// </summary>
        [FieldOffset(0x28)] public GameObject.Data* pGameObject;

        /// <summary>
        /// A pointer to an instance of `GOComponentStaticClass`.
        /// </summary>
        [FieldOffset(0x48)] public GOComponentStaticClass* pStaticClass;
    }

    /// <summary>
    /// A struct representation of the static class for storing information about a game object component.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct GOComponentStaticClass
    {
        /// <summary>
        /// The name of this game object component.
        /// </summary>
        [FieldOffset(0)] public Helpers.UnmanagedString Name;

        public override string ToString() => Name.ToString();
    }

    /// <summary>
    /// A struct representation of `hh::anim::GOCAnimationSingle`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x100)]
    public struct GOCAnimationSingle
    {
        [FieldOffset(0)]    public GOComponent Base;

        [FieldOffset(0x90)] public void* pUnknownClass;
    }

    /// <summary>
    /// A struct representation of `hh::anim::GOCAnimator`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x130)]
    public struct GOCAnimator
    {
        [FieldOffset(0)]     public GOCAnimationSingle Base;

        /// <summary>
        /// A pointer to an instance of `hh::anim::TriggerListener`.
        /// </summary>
        [FieldOffset(0x100)] public void* pTriggerListener;

        /// <summary>
        /// A pointer to an instance of `hh::anim::AnimationStateListener`.
        /// </summary>
        [FieldOffset(0x108)] public void* pAnimationStateListener;
    }

    /// <summary>
    /// A struct representation of `app::player::GOCCamera`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct GOCCamera
    {
        [FieldOffset(0)]    public GOComponent Base;

        /// <summary>
        /// An array of pointers to `CameraControllerWrapper` instances.
        /// </summary>
        [FieldOffset(0x80)] public ObjectMoveArray<CameraControllerWrapper> Cameras;

        /// <summary>
        /// Gets an instance of `app_cmn::camera::CameraController` by name.
        /// </summary>
        /// <param name="in_cameraName">The name of the camera controller.</param>
        /// <returns>An instance of `app_cmn::camera::CameraController` requested by name.</returns>
        public CameraController* GetCameraController(string in_cameraName)
        {
            foreach (var pWrapper in Cameras)
            {
                if (pWrapper.pCameraController == null)
                    continue;
                
                if (FROM_STRING_PTR(pWrapper.pCameraController->GetName()()) == in_cameraName)
                    return pWrapper.pCameraController;
            }

            return null;
        }

        MAKE_GENERIC_API(GetCameraController)
    }

    /// <summary>
    /// A struct representation of `app::player::GOCEventTimer`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xC8)]
    public struct GOCEventTimer
    {
        [FieldOffset(0)] public GOComponent Base;
        
        [StructLayout(LayoutKind.Explicit, Size = 0x20)]
        public struct TimerData
        {
            /// <summary>
            /// The duration of this timer.
            /// </summary>
            [FieldOffset(0x04)] float Duration;

            /// <summary>
            /// The time the display will turn yellow.
            /// </summary>
            [FieldOffset(0x0C)] float TimeYellow;

            /// <summary>
            /// The time the display will turn red.
            /// </summary>
            [FieldOffset(0x10)] float TimeRed;
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerBlackboard`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x88)]
    public struct GOCPlayerBlackboard
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        /// <summary>
        /// A pointer to an instance of `app::player::Blackboard`.
        /// </summary>
        [FieldOffset(0x80)] public Blackboard.Data* pBlackboard;
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerEffect`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xE0)]
    public struct GOCPlayerEffect
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        /// <summary>
        /// A pointer to an instance of `app::player::EffectList`.
        /// </summary>
        [FieldOffset(0x88)] public PlayerEffect.EffectList* pEffectList;
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerEyesight`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct GOCPlayerEyesight
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        [FieldOffset(0x80)] public ObjectMoveArray<Memory.Pointer<PlayerEyesightComponent>> EyesightComponents;

        public PlayerEyesightComponent* GetEyesightComponent(string in_eyesightName)
        {
            foreach (var pEyesight in EyesightComponents)
            {
                if (pEyesight.pData->GetNameHash()() == StringMapOperation.ComputeHash(in_eyesightName))
                    return pEyesight.pData;
            }

            return null;
        }

        MAKE_GENERIC_API(GetEyesightComponent)
    }

    /// <summary>
    /// A struct representation of `app::player::PlayerEyesightComponent`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x90)]
    public struct PlayerEyesightComponent
    {
        VFUNCTION_PTR(PlayerEyesightComponent, 3, uint, GetNameHash)
    }

    /// <summary>
    /// A struct representation of `app::player::HomingEyesight`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x150, Pack = 0x10)]
    public struct HomingEyesight
    {
        [FieldOffset(0)]    public PlayerEyesightComponent Base;

        [FieldOffset(0xD8)] public ObjectMoveArray<Memory.Pointer<TargetData>> Targets;

        /// <summary>
        /// Gets the target based on its priority.
        /// The highest priority (0) is the current homing target.
        /// </summary>
        /// <param name="in_isLow">Determines if this function retrieves the lowest priority homing target.</param>
        /// <returns>The homing target at the requested priority.</returns>
        public TargetData* GetPriorityTarget(bool in_isLow = false)
        {
            if (Targets.Length == 0)
                return null;
            
            return Targets[in_isLow ? Targets.Length - 1 : 0].pData;
        }

        /// <summary>
        /// Gets the target nearest to the player based on its relative position.
        /// </summary>
        /// <returns>The nearest target to the player.</returns>
        public TargetData* GetNearestTarget()
        {
            if (Targets.Length == 0)
                return null;

            var minTarget = Targets[0];
            var minDist = minTarget.pData->Distance;

            foreach (var pTarget in Targets)
            {
                if (pTarget.pData->Distance < minDist)
                {
                    minTarget = pTarget;
                    minDist = pTarget.pData->Distance;
                }
            }

            return minTarget.pData;
        }

        /// <summary>
        /// Determines if the input target data belongs to an enemy.
        /// </summary>
        /// <param name="in_pTarget">The target to check.</param>
        /// <returns>A boolean representation of whether the input target data belongs to an enemy.</returns>
        public bool IsTargetEnemy(TargetData* in_pTarget = null)
        {
            if (in_pTarget == null)
            {
                in_pTarget = GetPriorityTarget();

                if (in_pTarget == null)
                    return false;
            }

            var pGameObject = in_pTarget->GetGameObject();
                
            if (pGameObject == null)
                return false;

            // Enemies will always use GOCHealth.
            return GameObject.GetGOC(pGameObject, "GOCHealth") != null;
        }

        /// <summary>
        /// A struct representation of `app::player::HomingEyesight::TargetData`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0xE0, Pack = 0x10)]
        public struct TargetData
        {
            /// <summary>
            /// The handle value for the collider component for the target object.
            /// </summary>
            [FieldOffset(0x20)] public int GOCColliderHandle;
        
            /// <summary>
            /// The position of the target object.
            /// </summary>
            [FieldOffset(0x30)] public Vector3 Position;

            /// <summary>
            /// The distance between the player and the target object.
            /// </summary>
            [FieldOffset(0xC0)] public float Distance;

            /// <summary>
            /// Gets the instance of `hh::game::GameObject` associated with this target data.
            /// </summary>
            /// <returns>An instance of `hh::game::GameObject`.</returns>
            public GameObject.Data* GetGameObject()
            {
                var pGOComponent = GOComponentManager.GetGOCFromHandle(GOCColliderHandle);

                if (pGOComponent == null)
                    return null;
                
                return pGOComponent->pGameObject;
            }
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerHsm`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x170)]
    public struct GOCPlayerHsm
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        /// <summary>
        /// A pointer to an instance of `hh::ut::HsmBase`.
        /// </summary>
        [FieldOffset(0x88)]  public HsmBase Hsm;

        /// <summary>
        /// A pointer to an instance of `app::player::PlayerStateParameter`.
        /// </summary>
        [FieldOffset(0x100)] public PlayerStateParameter* pPlayerStateParameter;

        /// <summary>
        /// A pointer to an instance of `app::player::StatePluginManager<app::player::PlayerHsmContext>`.
        /// </summary>
        [FieldOffset(0x108)] public StatePluginManager* pStatePluginManager;

        /// <summary>
        /// The current state ID.
        /// </summary>
        [FieldOffset(0x114)] public int StateID;

        /// <summary>
        /// The current state's parent ID.
        /// </summary>
        [FieldOffset(0x118)] public int ParentStateID;

        /// <summary>
        /// Gets the current state ID.
        /// </summary>
        /// <returns>The current state ID.</returns>
        public int GetStateID()
        {
            if (Hsm.Base.CurrentStateIndex != 0)
                return Hsm.Base.States[Hsm.Base.CurrentStateIndex - 1].pData->StateID;

            return -1;
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerKinematicParams`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x5E0, Pack = 0x10)]
    public struct GOCPlayerKinematicParams
    {
        [FieldOffset(0)]     public GOComponent Base;
        
        /// <summary>
        /// The current position of the player.
        /// </summary>
        [FieldOffset(0x80)]  public Vector3 Position;

        /// <summary>
        /// The current rotation of the player.
        /// </summary>
        [FieldOffset(0x90)]  public Quaternion Rotation;

        /// <summary>
        /// The current velocity of the player.
        /// </summary>
        [FieldOffset(0xD0)]  public Vector3 Velocity;
        
        /// <summary>
        /// Bit flags for kinematics.
        /// </summary>
        [FieldOffset(0x1C5)] public KinematicsFlags Flags;

        /// <summary>
        /// An enum containing known flags for player kinematics.
        /// </summary>
        [Flags]
        public enum KinematicsFlags : byte
        {
            /// <summary>
            /// The player is on the ground.
            /// </summary>
            IsGrounded = 2
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerParameter`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x1A8)]
    public struct GOCPlayerParameter
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        /// <summary>
        /// The current mode package type.
        /// </summary>
        [FieldOffset(0xB8)] public ModePackageType CurrentModePackageType;

        /// <summary>
        /// An enum containing the different mode package types from the player's reflection data.
        /// </summary>
        public enum ModePackageType : int
        {
            /// <summary>
            /// The player is in 3D.
            /// </summary>
            ForwardView,

            /// <summary>
            /// The player is underwater.
            /// </summary>
            Water,

            /// <summary>
            /// The player is in Cyber Space 3D.
            /// </summary>
            CyberSpace,

            /// <summary>
            /// The player is in 2D.
            /// </summary>
            SideView
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerPosture`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct GOCPlayerPosture
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        /// <summary>
        /// A pointer to an instance of `app::player::PlayerPostureContext`.
        /// </summary>
        [FieldOffset(0x80)] public PlayerPostureContext* pPlayerPostureContext;

        /// <summary>
        /// A pointer to an instance of `app::player::PostureMoveManager`.
        /// </summary>
        [FieldOffset(0x88)] public PostureMoveManager* pPostureMoveManager;

        /// <summary>
        /// A pointer to an instance of `app::player::PostureInputManager`.
        /// </summary>
        [FieldOffset(0x90)] public void* pPostureInputManager;
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerVisual`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x180)]
    public struct GOCPlayerVisual
    {
        [FieldOffset(0x000)] public GOComponent Base;

        /// <summary>
        /// A pointer to an instance of `app::player::PlayerVisual`.
        /// </summary>
        [FieldOffset(0x108)] public PlayerVisual* pPlayerVisual;

        /// <summary>
        /// Retrieves the contained <see cref="PlayerVisual"/>, given that its name matches <see cref="in_visualName"/>.
        /// </summary>
        /// <param name="in_visualName">The name of the visual to retrieve.</param>
        /// <returns>A pointer to the <see cref="PlayerVisual"/> if the names match; otherwise, null.</returns>
        public PlayerVisual* GetVisual(string in_visualName)
        {
            if (pPlayerVisual->GetNameHash()() == StringMapOperation.ComputeHash(in_visualName))
                return pPlayerVisual;
            else
                return null;
        }

        MAKE_GENERIC_API(GetVisual)
    }

    /// <summary>
    /// A struct representation of `hh::ui::GOCSprite`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x230)]
    public struct GOCSprite
    {
        [FieldOffset(0)]     public GOComponent Base;

        /// <summary>
        /// A pointer to an instance of `hh::ui::GOCSprite::Renderable`.
        /// </summary>
        [FieldOffset(0x178)] public Renderable* pRenderable;
        
        /// <summary>
        /// Bit flags for the sprite state.
        /// </summary>
        [FieldOffset(0x180)] public byte Flags;

        /// <summary>
        /// A struct representation of `hh::ui::GOCSprite::Renderable`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x58)]
        public struct Renderable
        {
            /// <summary>
            /// The name of this renderable.
            /// </summary>
            [FieldOffset(0x38)] public Helpers.UnmanagedString Name;

            /// <summary>
            /// A pointer to an instance of `hh::ui::GOCSprite` acting as the parent of this object.
            /// </summary>
            [FieldOffset(0x50)] public GOCSprite* pGOCSprite;
        }
    }

    /// <summary>
    /// A struct representation of `app_cmn::fsm::GOCTinyFsm`.
    /// </summary>
    [Helpers.InternalName("GOCTinyFsm2"), StructLayout(LayoutKind.Explicit, Size = 0x168)]
    public struct GOCTinyFsm
    {
        [FieldOffset(0)]    public GOComponent Base;

        /// <summary>
        /// A pointer to an instance of `app_cmn::fsm::GOCTinyFsmContext`.
        /// </summary>
        [FieldOffset(0x80)] public void* pGOCTinyFsmContext;

        public T* GetContext<T>() where T : unmanaged
        {
            return (T*)pGOCTinyFsmContext;
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCTransform`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x110)]
    public struct GOCTransform
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        /// <summary>
        /// The current position of the transform.
        /// </summary>
        [FieldOffset(0xC0)] public Vector3 Position;

        /// <summary>
        /// The current rotation of the transform.
        /// </summary>
        [FieldOffset(0xD0)] public Quaternion Rotation;

        /// <summary>
        /// The current scale of the transform.
        /// </summary>
        [FieldOffset(0xE0)] public Vector3 Scale;
    }
}