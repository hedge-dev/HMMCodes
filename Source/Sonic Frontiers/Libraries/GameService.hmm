Library "GameService" by "Hyper & Sajid" 
{
    #include "Helpers" noemit

    #lib "GameManager"

    #import "Allocators"

    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.InteropServices;

    private static bool _isInitialised = false;

    private static List<long> _userServiceClassPtrs = new();

    /// <summary>
    /// A struct representation of `hh::game::GameService`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x70)]
    public struct Data
    {
        /// <summary>
        /// A pointer to a memory allocator.
        /// </summary>
        [FieldOffset(0x08)] public IAllocator* pAllocator;

        /// <summary>
        /// A pointer to an instance of `app::GameManager`.
        /// </summary>
        [FieldOffset(0x30)] public GameManager.Data* pGameManager;

        /// <summary>
        /// A pointer to an instance of `GameServiceStaticClass`.
        /// </summary>
        [FieldOffset(0x38)] public GameServiceStaticClass* pStaticClass;
    }

    /// <summary>
    /// A struct representation of the static class for storing information about a game service.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct GameServiceStaticClass
    {
        /// <summary>
        /// The name of this game service.
        /// </summary>
        [FieldOffset(0)] public Helpers.UnmanagedString Name;

        public override string ToString() => Name.ToString();
    }

    UNMANAGED_FUNCTION(long, CreateServices, long in_ppClasses)
    {
        var classes = new List<long>();

        // Copy array contents to our list.
        while (Read<long>(in_ppClasses) != 0)
        {
            classes.Add(Read<long>(in_ppClasses));
            in_ppClasses += 8;
        }

        // Add user service class pointers.
        foreach (var ptr in _userServiceClassPtrs)
        {
            if (classes.Contains(ptr))
                continue;
            
            classes.Add(ptr);
        }
        
        classes.Add(0);

        var classesArr = classes.ToArray();

        fixed (long* pClasses = classesArr)
            return (long)pClasses;
    }

    [LibraryInitializer]
    public void Init()
    {
        if (_isInitialised)
            return;
        
        WriteAsmHook
        (
            $@"
                push r14
                sub  rsp, 0x20
                mov  rax, qword ptr [rdx]
                mov  r14, rdx
                mov  rbx, rcx
                mov  rcx, r14
                mov  rdx, {GET_UNMANAGED_FUNCTION_PTR(CreateServices)}
                call rdx
                mov  r14, rax
                mov  rax, qword ptr [rax]
            ",

            /* 0x147140C75 */
            ScanSignature
            (
                "\x41\x56\x48\x83\xEC\x20\x48\x8B\x02\x49\x89\xD6",
                "xxxxxxxxxxxx"
            ),

            HookBehavior.Replace
        );

        _isInitialised = true;
    }

    /// <summary>
    /// Adds a pointer to a `GameServiceStaticClass` struct to the user pointers list of game services to load.
    /// </summary>
    public void AddUserService(long in_ptr)
    {
        if (_userServiceClassPtrs.Contains(in_ptr))
            return;

        _userServiceClassPtrs.Add(in_ptr);
    }

    /// <summary>
    /// Removes a pointer to a `GameServiceStaticClass` struct.
    /// </summary>
    public void RemoveUserService(long in_ptr)
    {
        if (!_userServiceClassPtrs.Contains(in_ptr))
            return;

        _userServiceClassPtrs.Remove(in_ptr);
    }
}


