Library "BlackboardStatus" by "Hyper, ĐeäTh & Sora" does "Provides access to `app::player::BlackboardStatus` from Sonic Frontiers."
{
    #include "Helpers" noemit

    #import "Blackboard"
    #import "Collections"

    #lib "Player"

    /// <summary>
    /// Determines whether a state flag is set.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "BlackboardStatus" noemit
    /// //
    /// {
    ///     bool isPhantomRush = IS_STATE_FLAG(IsPhantomRush);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of an enum member from the `StateFlags` enum.</param>
    /// <returns>A boolean value representing whether the state flag is set.</returns>
    #define IS_STATE_FLAG(in_name) (BlackboardStatus.Get() != null && BlackboardStatus.Get()->StateFlags.Test((ulong)BlackboardStatus.StateFlags.in_name))

    /// <summary>
    /// Sets a state flag.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "BlackboardStatus" noemit
    /// //
    /// {
    ///     SET_STATE_FLAG(IsBoost, true);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of an enum member from the `StateFlags` enum.</param>
    /// <param name="in_isEnabled">The enabled state of the specified flag.</param>
    #define SET_STATE_FLAG(in_name, in_isEnabled) if (BlackboardStatus.Get() != null) BlackboardStatus.Get()->StateFlags.Set((ulong)BlackboardStatus.StateFlags.in_name, in_isEnabled)
    
    /// <summary>
    /// Determines whether a combat flag is set.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "BlackboardStatus" noemit
    /// //
    /// {
    ///     bool isPerfectParry = IS_COMBAT_FLAG(IsPerfectParry);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of an enum member from the `CombatFlags` enum.</param>
    /// <returns>A boolean value representing whether the combat flag is set.</returns>
    #define IS_COMBAT_FLAG(in_name) (BlackboardStatus.Get() != null && BlackboardStatus.Get()->CombatFlags[(int)BlackboardStatus.CombatFlags.in_name >> 6].Test((ulong)BlackboardStatus.CombatFlags.in_name & 0x3F))

    /// <summary>
    /// Sets a combat flag.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "BlackboardStatus" noemit
    /// //
    /// {
    ///     SET_COMBAT_FLAG(IsPerfectParry, true);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of an enum member from the `CombatFlags` enum.</param>
    /// <param name="in_isEnabled">The enabled state of the specified flag.</param>
    #define SET_COMBAT_FLAG(in_name, in_isEnabled) if (BlackboardStatus.Get() != null) BlackboardStatus.Get()->CombatFlags[(int)BlackboardStatus.CombatFlags.in_name >> 6].Set((ulong)BlackboardStatus.CombatFlags.in_name, in_isEnabled)

    /// <summary>
    /// Determines whether a world flag is set.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "BlackboardStatus" noemit
    /// //
    /// {
    ///     bool isCyberSpace = IS_WORLD_FLAG(IsCyberSpace);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of an enum member from the `WorldFlags` enum.</param>
    /// <returns>A boolean value representing whether the world flag is set.</returns>
    #define IS_WORLD_FLAG(in_name) (BlackboardStatus.Get() != null && BlackboardStatus.Get()->WorldFlags[(int)BlackboardStatus.WorldFlags.in_name >> 6].Test((ulong)BlackboardStatus.WorldFlags.in_name & 0x3F))

    /// <summary>
    /// Sets a world flag.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #include "BlackboardStatus" noemit
    /// //
    /// {
    ///     SET_WORLD_FLAG(IsNoClip, true);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of an enum member from the `WorldFlags` enum.</param>
    /// <param name="in_isEnabled">The enabled state of the specified flag.</param>
    #define SET_WORLD_FLAG(in_name, in_isEnabled) if (BlackboardStatus.Get() != null) BlackboardStatus.Get()->WorldFlags[(int)BlackboardStatus.WorldFlags.in_name >> 6].Set((ulong)BlackboardStatus.WorldFlags.in_name)

    using System.Runtime.InteropServices;
    
    /// <summary>
    /// A struct representation of `app::player::BlackboardStatus`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x180, Pack = 0x10)]
    public struct Data
    {
        /// <summary>
        /// An instance of `app::player::BlackboardContent`, the base class for `app::player::BlackboardStatus`.
        /// </summary>
        [FieldOffset(0)]    public BlackboardContent BlackboardContent;

        /// <summary>
        /// Determines if the current player is in their Super form.
        /// </summary>
        [FieldOffset(0x24)] public bool IsSuper;

        /// <summary>
        /// Bit flags representing combat statuses.
        /// </summary>
        [FieldOffset(0x28)] UNMANAGED_FIXED_ARRAY(BitSet64, CombatFlags, 2)

        /// <summary>
        /// Bit flags representing state statuses.
        /// </summary>
        [FieldOffset(0x38)] public BitSet64 StateFlags;

        /// <summary>
        /// Bit flags representing world statuses.
        /// </summary>
        [FieldOffset(0x40)] UNMANAGED_FIXED_ARRAY(BitSet64, WorldFlags, 2)
    }

    /// <summary>
    /// Gets an instance of `app::player::BlackboardStatus`.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "BlackboardStatus"
    /// //
    /// {
    ///     var pBlackboardStatus = BlackboardStatus.Get();
    /// }
    /// ]]></code>
    /// </example>
    /// <returns>A pointer to an instance of `app::player::BlackboardStatus`.</returns>
    public Data* Get()
    {
        return (Data*)Blackboard.GetPlayerBlackboardContent("BlackboardStatus");
    }

    /// <summary>
    /// Determines if the current player is in their Super form.
    /// </summary>
    /// <returns>A boolean value representing whether the current player is in their Super form.</returns>
    public bool IsSuper()
    {
        if (Player.GetPlayerType() != Player.PlayerType.Sonic)
            return false;
        
        var pBlackboardStatus = Get();

        if (pBlackboardStatus == null)
            return false;

        return pBlackboardStatus->IsSuper;
    }

    /// <summary>
    /// An enum containing known state flags.
    /// </summary>
    public enum StateFlags : uint
    {
        /// <summary>
        /// The player is boosting.
        /// </summary>
        IsBoost = 0x00,

        /// <summary>
        /// The player is air boosting.
        /// </summary>
        IsAirBoost = 0x04,

        /// <summary>
        /// The player has jumped on a rail.
        /// </summary>
        IsGrindJump = 0x06,

        /// <summary>
        /// The player is grinding on a rail.
        /// </summary>
        IsGrind = 0x07,

        /// <summary>
        /// The player is jumping.
        /// </summary>
        IsJump = 0x08,

        /// <summary>
        /// The player has double jumped.
        /// </summary>
        IsDoubleJump = 0x09,
        
        /// <summary>
        /// The player has stomp bounced.
        /// </summary>
        IsBounceJump = 0x0A,

        /// <summary>
        /// The player is falling.
        /// </summary>
        IsFall = 0x0B,

        /// <summary>
        /// The player is stomping.
        /// </summary>
        IsStomp = 0x0C,

        /// <summary>
        /// The player is diving.
        /// </summary>
        IsDiving = 0x0D,

        /// <summary>
        /// The player is boosting whilst diving.
        /// </summary>
        IsDivingBoost = 0x0E,

        /// <summary>
        /// The player is using Cyloop.
        /// </summary>
        IsCyloop = 0x11,

        /// <summary>
        /// The player finished a Cyloop.
        /// </summary>
        IsCyloopEnd = 0x12,

        /// <summary>
        /// The player is drifting.
        /// </summary>
        IsDrift = 0x13,

        /// <summary>
        /// The player is performing a homing attack.
        /// </summary>
        IsHoming = 0x17,

        /// <summary>
        /// The player is parrying.
        /// </summary>
        IsParry = 0x18,

        /// <summary>
        /// The player is climbing a wall.
        /// </summary>
        IsWallClimb = 0x19,

        /// <summary>
        /// The player is idle.
        /// </summary>
        IsIdle = 0x1A,

        /// <summary>
        /// The player is idle on a climbable wall.
        /// </summary>
        IsWallClimbIdle = 0x1C,

        /// <summary>
        /// The player is using the skateboard.
        /// </summary>
        IsBoarding = 0x1E,

        /// <summary>
        /// The player has used a spring.
        /// </summary>
        IsSpringJump = 0x21
    }

    /// <summary>
    /// An enum containing known combat flags.
    /// </summary>
    public enum CombatFlags : uint
    {
        /// <summary>
        /// The player has Parry.
        /// </summary>
        IsParry = 0x0F,

        /// <summary>
        /// The player has Perfect Parry.
        /// </summary>
        IsPerfectParry = 0x10,

        /// <summary>
        /// The player has Cyclone Kick unlocked.
        /// </summary>
        IsCycloneKick = 0x2A,

        /// <summary>
        /// The player has Sonic Boom unlocked.
        /// </summary>
        IsSonicBoom = 0x2D,

        /// <summary>
        /// The player has Wild Rush unlocked.
        /// </summary>
        IsWildRush = 0x2E,

        /// <summary>
        /// The player has Loop Kick unlocked.
        /// </summary>
        IsLoopKick = 0x2F,

        /// <summary>
        /// The player has Spin Slash unlocked.
        /// </summary>
        IsSpinSlash = 0x30,

        /// <summary>
        /// The player has Stomp Attack unlocked.
        /// </summary>
        IsStompAttack = 0x31,

        /// <summary>
        /// The player has Homing Shot unlocked.
        /// </summary>
        IsHomingShot = 0x33,

        /// <summary>
        /// The player has Cross Slash unlocked.
        /// </summary>
        IsCrossSlash = 0x34
    }

    /// <summary>
    /// An enum containing known world flags.
    /// </summary>
    public enum WorldFlags : uint
    {
        /// <summary>
        /// The player is dead.
        /// </summary>
        IsDead = 0x01,

        /// <summary>
        /// The player has taken damage or has been repelled by an enemy's shield.
        /// </summary>
        IsDamagedOrRepelled = 0x02,

        /// <summary>
        /// The player no longer has control.
        /// </summary>
        IsOutOfControl = 0x07,

        /// <summary>
        /// The player is in an auto run section.
        /// </summary>
        IsAutoRun = 0x0A,

        /// <summary>
        /// The player is in Cyber Space.
        /// </summary>
        IsCyberSpace = 0x1E,

        /// <summary>
        /// The player has Power Boost.
        /// </summary>
        IsPowerBoost = 0x28,

        /// <summary>
        /// The player is air tricking.
        /// </summary>
        IsAirTrick = 0x2A,

        /// <summary>
        /// The player is standing on collision pertaining to the height map.
        /// </summary>
        IsHeightMapCollision = 0x37,

        /// <summary>
        /// Determines whether the player can clip through terrain (requires flag at bit index 14 to be set).
        /// </summary>
        IsNoClip = 0x38,

        /// <summary>
        /// The player is in battle.
        /// </summary>
        IsBattle = 0x3A,

        /// <summary>
        /// The player has Nitro Boost.
        /// </summary>
        IsNitroBoost = 0x43
    }
}