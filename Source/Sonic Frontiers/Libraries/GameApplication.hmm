Library "GameApplication" by "Hyper"
{
    #include "Helpers" noemit

    #lib "GameMode"
    #lib "Memory"
    #lib "StringMapOperation"

    #import "Collections"

    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `app::MyApplication`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct MyApplication
    {
        [FieldOffset(0x80)] public ObjectMoveArray<Memory.Pointer<ApplicationExtension>> ApplicationExtensions;

        public ApplicationExtension* GetApplicationExtension(string in_extensionName)
        {
            foreach (var pApplicationExtension in ApplicationExtensions)
            {
                if (pApplicationExtension.pData->GetNameHash()() == StringMapOperation.ComputeHash(in_extensionName))
                    return pApplicationExtension.pData;
            }

            return null;
        }

        MAKE_GENERIC_API(GetApplicationExtension)
    }

    /// <summary>
    /// A struct representation of `app::game::ApplicationExtension`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public struct ApplicationExtension
    {
        VFUNCTION_PTR(ApplicationExtension, 1, uint, GetNameHash)
    }

    /// <summary>
    /// A struct representation of `app::game::ApplicationSequenceExtension`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x140, Pack = 0x10)]
    public struct ApplicationSequenceExtension
    {
        [FieldOffset(0x78)] public GameMode.Data* pGameMode;
    }
}