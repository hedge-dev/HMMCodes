Library "Blackboard" by "Hyper, ĐeäTh & Sajid" does "Provides access to `app::player::Blackboard` from Sonic Frontiers."
{
    #include "Helpers" noemit

    #import "Collections"
    #import "GOComponents"

    #lib "Helpers"
    #lib "Memory"
    #lib "Player"
    #lib "StringMapOperation"

    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `app::player::Blackboard`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x38)]
    public struct Data
    {
        /// <summary>
        /// An array of pointers to `app::player::BlackboardContent` instances.
        /// </summary>
        [FieldOffset(0x18)] public ObjectMoveArray<Memory.Pointer<BlackboardContent>> BlackboardContents;
    }

    /// <summary>
    /// A struct representation of `app::player::BlackboardContent`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct BlackboardContent
    {
        /// <summary>
        /// Gets the string hash pertaining to the name of this `app::player::BlackboardContent` type.
        /// </summary>
        /// <example>
        /// <code><![CDATA[
        /// Code
        /// //
        ///     #lib "Blackboard"
        ///     #lib "BlackboardStatus"
        /// //
        /// {
        ///     var pBlackboardStatus = Blackboard.GetPlayerBlackboardContent<BlackboardStatus.Data>(pBlackboard);
        ///     
        ///     // Prints the name hash to the console.
        ///     Console.WriteLine(((uint)pBlackboardStatus->GetNameHash()()).ToString("X"));
        /// }
        /// ]]></code>
        /// </example>
        /// <returns>The string hash pertaining to the name of this `app::player::BlackboardContent` type.</returns>
        VFUNCTION_PTR(BlackboardContent, 1, uint, GetNameHash)
    }

    /// <summary>
    /// Gets an instance of `app::player::BlackboardContent` obtained by the input `app::player::Blackboard` instance by name.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "Blackboard"
    /// //
    /// {
    ///     var pBlackboard = Blackboard.GetPlayerBlackboard();
    ///     var pBlackboardStatus = Blackboard.GetBlackboardContent(pBlackboard, "BlackboardStatus");
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_pBlackboard">An instance of `app::player::Blackboard`.</param>
    /// <param name="in_name">The name of the instance of `app::player::BlackboardContent` to find.</param>
    /// <returns>A pointer to an instance of `app::player::BlackboardContent`.</returns>
    public long GetBlackboardContent(Data* in_pBlackboard, string in_name)
    {
        if (in_pBlackboard == null)
            return 0;
        
        var blackboardContents = in_pBlackboard->BlackboardContents;

        for (int i = 0; i < blackboardContents.Length; i++)
        {
            var pBlackboardContent = blackboardContents[i].pData;
            
            if ((uint)pBlackboardContent->GetNameHash()() == StringMapOperation.ComputeHash(in_name))
                return (long)pBlackboardContent;
        }

        return 0;
    }

    /// <summary>
    /// Gets an instance of `app::player::BlackboardContent` obtained by the input `app::player::Blackboard` instance.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "Blackboard"
    ///     #lib "BlackboardStatus"
    /// //
    /// {
    ///     var pBlackboard = Blackboard.GetPlayerBlackboard();
    ///     var pBlackboardStatus = Blackboard.GetBlackboardContent<BlackboardStatus.Data>(pBlackboard);
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_pBlackboard">An instance of `app::player::Blackboard`.</param>
    /// <returns>A pointer to an instance of `app::player::BlackboardContent`.</returns>
    public T* GetBlackboardContent<T>(Data* in_pBlackboard) where T : unmanaged
    {
        var name = Helpers.GetInternalName(typeof(T));
        
        return (T*)GetBlackboardContent(in_pBlackboard, string.IsNullOrEmpty(name) ? typeof(T).Name : name);
    }

    /// <summary>
    /// Gets an instance of `app::player::Blackboard` obtained by the current player.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "Blackboard"
    /// //
    /// {
    ///     var pBlackboard = Blackboard.GetPlayerBlackboard();
    /// }
    /// ]]></code>
    /// </example>
    /// <returns>A pointer to an instance of `app::player::Blackboard`.</returns>
    public Data* GetPlayerBlackboard()
    {
        var pPlayer = Player.GetPlayerData();

        if (pPlayer == null)
            return null;

        var pGOCPlayerBlackboard = GameObject.GetGOC<GOCPlayerBlackboard>(&pPlayer->GameObject);

        if (pGOCPlayerBlackboard == null)
            return null;
        
        return pGOCPlayerBlackboard->pBlackboard;
    }

    /// <summary>
    /// Gets an instance of `app::player::BlackboardContent` obtained by the current player by name.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "Blackboard"
    /// //
    /// {
    ///     var pBlackboardStatus = Blackboard.GetPlayerBlackboardContent("BlackboardStatus");
    /// }
    /// ]]></code>
    /// </example>
    /// <param name="in_name">The name of the instance of `app::player::BlackboardContent` to find.</param>
    /// <returns>A pointer to an instance of `app::player::BlackboardContent`.</returns>
    public long GetPlayerBlackboardContent(string in_name)
    {
        var pBlackboard = GetPlayerBlackboard();

        if (pBlackboard == null)
            return 0;
        
        return Blackboard.GetBlackboardContent(pBlackboard, in_name);
    }

    /// <summary>
    /// Gets an instance of `app::player::BlackboardContent` obtained by the current player.
    /// </summary>
    /// <example>
    /// <code><![CDATA[
    /// Code
    /// //
    ///     #lib "Blackboard"
    ///     #lib "BlackboardStatus"
    /// //
    /// {
    ///     var pBlackboardStatus = Blackboard.GetPlayerBlackboardContent<BlackboardStatus.Data>();
    /// }
    /// ]]></code>
    /// </example>
    /// <returns>A pointer to an instance of `app::player::BlackboardContent`.</returns>
    public T* GetPlayerBlackboardContent<T>() where T : unmanaged
    {
        var name = Helpers.GetInternalName(typeof(T));
        
        return (T*)GetPlayerBlackboardContent(string.IsNullOrEmpty(name) ? typeof(T).Name : name);
    }
}