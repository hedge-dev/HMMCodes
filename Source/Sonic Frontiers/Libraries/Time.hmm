Library "Time" by "Hyper" 
{
    #lib "Logger"

    using System.Collections.Generic;

    private static bool _isInitialised = false;

    private static float* _pFrameRate;

    private static Dictionary<string, Timer> _timers = new();

    public class Timer
    {
        public string Name;

        public float Time;

        public bool IsEnabled;

        public Timer(string in_name, float in_time, bool in_isEnabled)
        {
            Name = in_name;
            Time = in_time;
            IsEnabled = in_isEnabled;
        }

        public override string ToString() => $"{Name} | {Time}";
    }

    [LibraryInitializer]
    public void Init()
    {
        if (_isInitialised)
            return;

        fixed (float** p_pFrameRate = &_pFrameRate)
        {
            WriteAsmHook
            (
                $@"
                    movss  xmm0, dword ptr [rcx + 0x14]
                    lea    rdi, qword ptr [rcx + 0x14]
                    movaps xmmword ptr [rsp + 0x58 + 0xFFFFFFFFFFFFFFE8], xmm6
                    mov    r9, {(long)p_pFrameRate}
                    mov    qword ptr [r9], rcx
                    add    qword ptr [r9], 0x14
                ",

                /* 0x140BB9EDF */
                ScanSignature
                (
                    "\xF3\x0F\x10\x41\x14\x48\x8D\x79\x14",
                    "xxxxxxxxx"
                ),
                
                HookBehavior.Replace
            );
        }

        _isInitialised = true;
    }

    [LibraryUpdate]
    public void Update()
    {
        foreach (var entry in _timers)
        {
            if (entry.Value.IsEnabled)
                entry.Value.Time += GetDeltaTime();
        }
    }

    /// <summary>
    /// Gets the current frame rate.
    /// </summary>
    /// <returns>The current frame rate.</returns>
    public float GetFrameRate()
    {
        return _pFrameRate == null ? 0.0f : *_pFrameRate;
    }

    /// <summary>
    /// Gets the current frame delta.
    /// </summary>
    /// <returns>The current delta time.</returns>
    public float GetDeltaTime()
    {
        return 1.0f / GetFrameRate();
    }

    /// <summary>
    /// Creates a timer.
    /// </summary>
    /// <param name="in_name">The name of the timer.</param>
    /// <param name="in_isEnabled">Determines whether the timer should start upon creation.</param>
    /// <returns>The elapsed time of the requested timer.</returns>
    public float CreateTimer(string in_name, bool in_isEnabled = true)
    {
        if (_timers.ContainsKey(in_name))
            return _timers[in_name].Time;

        _timers.Add(in_name, new Timer(in_name, 0.0f, in_isEnabled));

        return 0.0f;
    }

    /// <summary>
    /// Destroys a timer.
    /// </summary>
    /// <param name="in_name">The name of the timer.</param>
    public void DestroyTimer(string in_name)
    {
        if (!_timers.ContainsKey(in_name))
            return;

        _timers.Remove(in_name);
    }

    /// <summary>
    /// Gets the value of a timer.
    /// </summary>
    /// <param name="in_name">The name of the timer.</param>
    /// <returns>The elapsed time of the requested timer.</returns>
    public float GetTimer(string in_name)
    {
        if (!_timers.ContainsKey(in_name))
        {
            Logger.Error($"[Time] Timer \"{in_name}\" does not exist!");
            return 0.0f;
        }
        
        return _timers[in_name].Time;
    }

    /// <summary>
    /// Sets the value of a timer.
    /// </summary>
    /// <param name="in_name">The name of the timer.</param>
    /// <param name="in_value">The elapsed time to set.</param>
    public void SetTimer(string in_name, float in_value)
    {
        if (!_timers.ContainsKey(in_name))
        {
            Logger.Error($"[Time] Timer \"{in_name}\" does not exist!");
            return;
        }
        
        _timers[in_name].Time = in_value;
    }

    /// <summary>
    /// Sets the value of a timer.
    /// </summary>
    /// <param name="in_name">The name of the timer.</param>
    /// <param name="in_isEnabled">Determines whether the timer should be running.</param>
    public void SetTimer(string in_name, bool in_isEnabled)
    {
        if (!_timers.ContainsKey(in_name))
        {
            Logger.Error($"[Time] Timer \"{in_name}\" does not exist!");
            return;
        }
        
        _timers[in_name].IsEnabled = in_isEnabled;
    }

    /// <summary>
    /// Sets the values of a timer.
    /// </summary>
    /// <param name="in_name">The name of the timer.</param>
    /// <param name="in_value">The elapsed time to set.</param>
    /// <param name="in_isEnabled">Determines whether the timer should be running.</param>
    public void SetTimer(string in_name, float in_value, bool in_isEnabled)
    {
        SetTimer(in_name, in_value);
        SetTimer(in_name, in_isEnabled);
    }

    /// <summary>
    /// Resets a timer.
    /// </summary>
    /// <param name="in_name">The name of the timer.</param>
    public void ResetTimer(string in_name)
    {
        SetTimer(in_name, 0.0f);
    }
}