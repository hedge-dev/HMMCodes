Library "PlayerEffect" by "Hyper" 
{
    #include "Helpers" noemit

    #import "Collections"
    #import "GOComponents"

    #lib "GameObject"
    #lib "Helpers"
    #lib "Memory"
    #lib "Player"
    #lib "StringMapOperation"

    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct Data
    {
        [FieldOffset(0x18)] public Player.Data* pPlayer;

        [FieldOffset(0x20)] public long pVisualHuman;

        [FieldOffset(0x28)] public GOCPlayerVisual* pGOCPlayerVisual;

        [FieldOffset(0x30)] public GOCPlayerKinematicParams* pGOCPlayerKinematicParams;

        [FieldOffset(0x38)] public GOCPlayerBlackboard* pGOCPlayerBlackboard;

        VFUNCTION_PTR(Data, 1, uint, GetNameHash)
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct EffectList
    {
        [FieldOffset(0x28)] public ObjectMoveArray<Memory.Pointer<Data>> PlayerEffects;
    }

    public Data* Get(string in_name)
    {
        var pPlayer = Player.GetPlayerData();

        if (pPlayer == null)
            return null;
        
        var pGOCPlayerEffect = GameObject.GetGOC<GOCPlayerEffect>(&pPlayer->GameObject);

        if (pGOCPlayerEffect == null)
            return null;

        var playerEffects = pGOCPlayerEffect->pEffectList->PlayerEffects;
        
        for (int i = 0; i < playerEffects.Length; i++)
        {
            var pPlayerEffect = playerEffects[i].pData;
            
            if ((uint)pPlayerEffect->GetNameHash()() == StringMapOperation.ComputeHash(in_name))
                return pPlayerEffect;
        }

        return null;
    }

    public T* Get<T>() where T : unmanaged
    {
        var name = Helpers.GetInternalName(typeof(T));
        
        return (T*)(long)Get(string.IsNullOrEmpty(name) ? typeof(T).Name : name);
    }
}