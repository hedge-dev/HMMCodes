Library "Converse" by "Hyper & M&M" 
{
    #include "Helpers" noemit

    #lib "Memory"

    #load "System.Xml.dll"
    #load "System.Xml.Linq.dll"

    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Xml;
    using System.Xml.Linq;

    private static bool _isInitialised = false;

    public enum Language : sbyte
    {
        Unknown = -1,
        English,
        French,
        Italian,
        German,
        Spanish,
        Polish,
        Portuguese,
        Russian,
        Japanese,
        ChineseTraditional,
        ChineseSimplified,
        Korean
    }

    private static sbyte _language = -1;

    public class RedirectedString
    {
        public string Key { get; set; }

        public string Value { get; set; }

        public bool IsRawAttributes { get; set; }

        public RedirectedString(string in_key, string in_value, bool in_isRawAttributes = false)
        {
            Key = in_key;
            Value = in_value;
            IsRawAttributes = in_isRawAttributes;
        }
    }

    public class ReplacementString
    {
        public string Pattern { get; set; }

        public string Replacement { get; set; }

        public bool IsRegex { get; set; }

        public bool IsRawAttributes { get; set; }

        public ReplacementString(string in_pattern, string in_replacement, bool in_isRegex = false, bool in_isRawAttributes = false)
        {
            Pattern = in_pattern;
            Replacement = in_replacement;
            IsRegex = in_isRegex;
            IsRawAttributes = in_isRawAttributes;
        }
    }

    private static List<RedirectedString> _redirectedStrings = new();
    private static List<ReplacementString> _replacementStrings = new();

    public delegate string TConverseNotifyAction(string in_key, string in_textRaw, string in_textXml);
    private static Dictionary<TConverseNotifyAction, bool> _converseNotifyActions = new();

    UNMANAGED_FUNCTION(long, RedirectString, long in_pCnvrsKey, long in_pCnvrsText, int in_cnvrsTextLength)
    {
        if (in_pCnvrsKey == 0)
            return in_pCnvrsText;

        string cnvrsKey = Marshal.PtrToStringAnsi((IntPtr)in_pCnvrsKey);
        string cnvrsText = in_pCnvrsText == 0 ? string.Empty : Marshal.PtrToStringUni((IntPtr)in_pCnvrsText, in_cnvrsTextLength);
        nint pData = 0;

        void MarshalString(string in_str)
        {
            int length = sizeof(int) + ((in_str.Length + 1) * sizeof(short));

            pData = Marshal.AllocHGlobal(length);

            var wideTextStart = pData + sizeof(int);
            var wideText = Encoding.Unicode.GetBytes(in_str);
            var wideTextEnd = wideTextStart + wideText.Length;
            
            Marshal.Copy(wideText, 0, wideTextStart, wideText.Length);
            
            // Null terminator.
            Marshal.WriteInt16(wideTextEnd, 0);

            in_pCnvrsText = (long)pData;
            in_cnvrsTextLength = length;
        }

        string redirectResult = cnvrsText;
        {
            foreach (var entry in _redirectedStrings)
            {
                if (entry.Key == cnvrsKey)
                {
                    redirectResult = entry.IsRawAttributes
                        ? entry.Value
                        : WriteAttributes(entry.Value);
                }
            }

            if (redirectResult != cnvrsText)
                MarshalString(redirectResult);
        }

        string notifyResult = redirectResult;
        {
            foreach (var entry in _converseNotifyActions)
            {
                notifyResult = entry.Key(cnvrsKey, notifyResult, ReadAttributes(notifyResult));

                if (!entry.Value)
                    notifyResult = WriteAttributes(notifyResult);
            }

            if (notifyResult != cnvrsText)
                MarshalString(notifyResult);
        }

        foreach (var entry in _replacementStrings)
        {
            string replacementResult = entry.IsRawAttributes
                ? notifyResult
                : ReadAttributes(notifyResult);

            // Perform replacement operation.
            replacementResult = entry.IsRegex
                ? new Regex(entry.Pattern).Replace(replacementResult, entry.Replacement)
                : replacementResult.Replace(entry.Pattern, entry.Replacement);

            replacementResult = entry.IsRawAttributes
                ? replacementResult
                : WriteAttributes(replacementResult);

            if (replacementResult != cnvrsText)
                MarshalString(replacementResult);
        }

        if (pData != 0)
        {
            // Wide string length.
            Marshal.WriteInt32(pData, in_cnvrsTextLength);
            Marshal.FreeHGlobal(pData);
        }
        else if (in_pCnvrsText != 0)
        {
            /* No need to reallocate all strings,
               return -1 and reload original pointer. */
            in_pCnvrsText = -1;
        }

        return in_pCnvrsText;
    }

    [LibraryInitializer]
    public void Init()
    {
        if (_isInitialised)
            return;

        void ConverseHook(long in_addr)
        {
            WriteAsmHook
            (
                $@"
                    mov  r8d, dword ptr [rsp + 0x1C8 + 0xFFFFFFFFFFFFFE60]
                    mov  rcx, rsi
                    mov  rax, {GET_UNMANAGED_FUNCTION_PTR(RedirectString)}
                    call rax
                    cmp  rax, 0
                    jne  notNull
                    mov  rdx, {TO_WSTRING_PTR(" ")}
                    mov  r8d, 1
                    jmp  exit
                notNull:
                    cmp  rax, -1
                    je   notCustom
                    lea  rdx, qword ptr [rax + 4]
                    mov  r8d, dword ptr [rax]
                    jmp  exit
                notCustom:
                    mov  rdx, qword ptr [rsp + 0x1C8 + 0xFFFFFFFFFFFFFE58]
                    mov  r8d, dword ptr [rsp + 0x1C8 + 0xFFFFFFFFFFFFFE60]
                exit:
                    mov  rcx, qword ptr [rdi + 8]
                    mov  rax, {Memory.ReadCall(in_addr + 0x09)}
                    call rax
                ",

                in_addr,

                HookBehavior.Replace
            );
        }

        WriteNop
        (
            /* v1.41: 0x14DA978CD */
            ScanSignature
            (
                "\x0F\x84\xE8\x00\x00\x00\x48\x8D\x8F\xC8\x00\x00\x00",
                "xxxxxxxxxxxxx"
            ),
            
            6
        );

        ConverseHook
        (
            /* 0x14DC858D3 */
            ScanSignature
            (
                "\x44\x8B\x44\x24\x28\x48\x8B\x4F\x08\xE8\xCC\xCC\xCC\xCC\x48\x89\xC2\x48\x8B\x8F\xF0\x00\x00\x00",
                "xxxxxxxxxx????xxxxxxxxxx"
            )
        );

        WriteNop
        (
            /* 0x14DC85938 */
            ScanSignature
            (
                "\x74\x53\x44\x8B\x44\x24\x28",
                "xxxxxxx"
            ),
            
            2
        );

        ConverseHook
        (
            /* 0x14DC8593A */
            ScanSignature
            (
                "\x44\x8B\x44\x24\x28\x48\x8B\x4F\x08\xE8\xCC\xCC\xCC\xCC\x48\x89\xC2\x48\x89\xF9",
                "xxxxxxxxxx????xxxxxx"
            )
        );

        fixed (sbyte* p_language = &_language)
        {
            /* 0x140AFA200 */
            var sig = Memory.ReadCall
            (
                ScanSignature
                (
                    "\xE8\xCC\xCC\xCC\xCC\x48\x89\xC1\xE8\xCC\xCC\xCC\xCC\x48\x8B\x4C\x24\x30",
                    "x????xxxx????xxxxx"
                )
            );

            WriteAsmHook
            (
                $@"
                    mov   rax, qword ptr [rcx + 8]
                    movzx ecx, byte ptr [rax + 9]
                    mov   rax, {(long)p_language}
                    mov   byte ptr [rax], cl
                    mov   rax, {Memory.ReadJump(sig + 8)}
                    jmp   rax
                ",

                sig,

                HookBehavior.Replace
            );
        }

        _isInitialised = true;
    }
    
    // Puyo Text Editor XML interoperability.
    /*
        References;
            - https://github.com/nickworonekin/puyo-text-editor/blob/main/src/PuyoTextEditor/Text/CnvrsTextEncoding.cs#L27
            - https://github.com/nickworonekin/puyo-text-editor/blob/main/src/PuyoTextEditor/Text/CnvrsTextEncoding.cs#L105
    */
    /*
        MIT License

        Copyright (c) 2021 Nick Woronekin

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
    */
    ////////////////////////////////////////////////////////////////////////////////////

    public enum AttributeType
    {
        Colour = 0xE000,
        Variable = 0xE001,
        Image = 0xE005,
        ColourEnd = 0xE010
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private ushort GetNameLength(ushort in_value) => (ushort)((((in_value & 0x0FF0) >> 4) / 2) - 1);
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private ushort SetNameLength(int in_value) => (ushort)((((in_value + 1) * 2) << 4) & 0x0FF0);

    /// <summary>
    /// Creates a "colour" tag.
    /// </summary>
    /// <param name="in_name">The name of this colour.</param>
    /// <param name="in_argb">The value of this colour.</param>
    /// <param name="in_text">The text to colour.</param>
    public string Colour(string in_name, uint in_argb, string in_text)
        => $"<colour name=\"{in_name}\" value=\"{in_argb.ToString("X8")}\">{in_text}</colour>";

    // Alias for the Americans.
    public string Color(string in_name, uint in_argb, string in_text)
        => Colour(in_name, in_argb, in_text);

    /// <summary>
    /// Creates a "var" tag.
    /// </summary>
    /// <param name="in_name">The name of the internal variable to display.</param>
    public string Variable(string in_name)
        => $"<var name=\"{in_name}\" />";

    /// <summary>
    /// Creates an "image" tag.
    /// </summary>
    /// <param name="in_name">The name of the image to display.</param>
    public string Image(string in_name)
        => $"<image name=\"{in_name}\" />";
    
    /// <summary>
    /// Parses binary Converse attributes and replaces them with XML keys that are interoperable with Puyo Text Editor.
    /// </summary>
    /// <param name="in_text">The Unicode string containing binary Converse attributes.</param>
    /// <returns>The input string where known binary Converse attributes are replaced with XML keys.</returns>
    public string ReadAttributes(string in_text)
    {
        var result = new StringBuilder();
        var chars = Encoding.Unicode.GetChars(Encoding.Unicode.GetBytes(in_text));

        for (int i = 0; i < chars.Length; i++)
        {
            var c = chars[i];

            switch ((AttributeType)(c & 0xF00F))
            {
                case AttributeType.Colour:
                {
                    // End
                    if ((AttributeType)c == AttributeType.ColourEnd)
                    {
                        result.Append("</color>");
                        break;
                    }
                    
                    i++;

                    var nameLength = GetNameLength(c) - 2;
                    var argb = (uint)(chars[i] << 16 | (chars[i + 1]));

                    i += 2;

                    var name = new string(chars, i, nameLength);

                    result.Append($"<color name=\"{name}\" value=\"{argb.ToString("X8")}\">");

                    i += nameLength;

                    break;
                }
                
                case AttributeType.Variable:
                {
                    i++;

                    var nameLength = GetNameLength(c);
                    var name = new string(chars, i, nameLength);

                    result.Append($"<var name=\"{name}\" />");

                    i += nameLength;

                    break;
                }
                
                case AttributeType.Image:
                {
                    i++;

                    var nameLength = GetNameLength(c);
                    var name = new string(chars, i, nameLength);

                    result.Append($"<image name=\"{name}\" />");

                    i += nameLength;

                    break;
                }

                default:
                    result.Append(c);
                    break;
            }
        }

        return result.ToString();
    }

    /// <summary>
    /// Encodes XML Converse attributes back into their binary form.
    /// </summary>
    /// <param name="in_text">The Unicode string containing XML Converse attributes.</param>
    /// <param name="in_element">The current XML element - used for recursion.</param>
    /// <returns>The input string where XML Converse attributes are replaced with known binary attributes.</returns>
    public string WriteAttributes(string in_text, XElement in_element = null)
    {
        var result = new StringBuilder();
        var root = in_element ?? XElement.Parse($"<text>{in_text}</text>");

        foreach (var node in root.Nodes())
        {
            if (node is XElement eNode)
            {
                switch (eNode.Name.LocalName)
                {
                    case "color":
                    case "colour":
                    {
                        var name = eNode.Attribute("name").Value;
                        var argb = uint.Parse(eNode.Attribute("value").Value, NumberStyles.HexNumber);

                        result.Append((char)(ushort)(0xE000 | SetNameLength(name.Length + 2)));
                        result.Append((char)(ushort)(argb >> 16));
                        result.Append((char)(ushort)(argb & 0xFFFF));
                        result.Append(name.ToCharArray());
                        result.Append('\0');
                        result.Append(WriteAttributes(in_text, eNode));
                        result.Append((char)(ushort)0xE010);

                        break;
                    }

                    case "var":
                    {
                        var name = eNode.Attribute("name").Value;

                        result.Append((char)(ushort)(0xE001 | SetNameLength(name.Length)));
                        result.Append(name.ToCharArray());
                        result.Append('\0');

                        break;
                    }

                    case "image":
                    {
                        var name = eNode.Attribute("name").Value;

                        result.Append((char)(ushort)(0xE005 | SetNameLength(name.Length)));
                        result.Append(name.ToCharArray());
                        result.Append('\0');

                        break;
                    }
                }
            }
            else if (node is XText tNode)
            {
                result.Append(tNode.Value.ToCharArray());
            }
        }

        return result.ToString();
    }

    /// <summary>
    /// Determines whether a char is a binary Converse attribute.
    /// </summary>
    /// <param name="in_char">The char suspected of containing a binary Converse attribute.</param>
    /// <returns>A boolean representation of whether the input char is a binary Converse attribute.</returns>
    public bool IsAttribute(char in_char)
    {
        var attributes = ((AttributeType[])Enum.GetValues(typeof(AttributeType))).ToList();

        foreach (var attribute in attributes)
        {
            if ((char)attribute == in_char)
                return true;
        }

        return false;
    }

    /// <summary>
    /// Omits binary Converse attributes from a Unicode string.
    /// </summary>
    /// <param name="in_text">The Unicode string containing binary Converse attributes.</param>
    /// <returns>The input string where binary Converse attributes are removed.</returns>
    public string OmitAttributes(string in_text)
    {
        var result = new StringBuilder();
        var chars = Encoding.Unicode.GetChars(Encoding.Unicode.GetBytes(in_text));

        for (int i = 0; i < chars.Length; i++)
        {
            var c = chars[i];

            if (IsAttribute(c))
                continue;
            
            result.Append(c);
        }

        return result.ToString();
    }

    ////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Gets the current language being used by the game.
    /// </summary>
    /// <returns>The current language of the game represented by the Language enum.</returns>
    public Language GetCurrentLanguage()
    {
        return (Language)_language;
    }

    /// <summary>
    /// Registers a function of the `TConverseNotifyAction` type into the event handler for when Converse strings are loaded.
    /// </summary>
    /// <param name="in_action">The delegate to add.</param>
    /// <param name="in_isRawAttributes">Determines whether the delegate should receive the Converse string with binary attributes.</param>
    public void AddConverseNotifyAction(TConverseNotifyAction in_action, bool in_isRawAttributes = false)
    {
        if (_converseNotifyActions.ContainsKey(in_action))
        {
            _converseNotifyActions[in_action] = in_isRawAttributes;
            return;
        }

        _converseNotifyActions.Add(in_action, in_isRawAttributes);
    }

    /// <summary>
    /// Removes a function of the `TConverseNotifyAction` type.
    /// </summary>
    /// <param name="in_action">The delegate to remove.</param>
    public void RemoveConverseNotifyAction(TConverseNotifyAction in_action)
    {
        if (!_converseNotifyActions.ContainsKey(in_action))
            return;

        _converseNotifyActions.Remove(in_action);
    }

    /// <summary>
    /// Redirects a string belonging to a specific key to a custom string (this will create a new string if the key does not exist).
    /// </summary>
    /// <param name="in_key">The Converse key to redirect to a new string.</param>
    /// <param name="in_text">The string to display when the requested string is used by the game.</param>
    /// <param name="in_isRawAttributes">Determines whether the redirected string contains binary Converse attributes.</param>
    public void Redirect(string in_key, string in_text, bool in_isRawAttributes = false)
    {
        if (string.IsNullOrEmpty(in_key))
            return;

        var first = _redirectedStrings.FirstOrDefault(x => x.Key == in_key);
        
        if (first != null)
        {
            first.Value = in_text;
            return;
        }

        _redirectedStrings.Add(new RedirectedString(in_key, in_text, in_isRawAttributes));
    }

    /// <summary>
    /// Redirects a string belonging to a specific key to a custom string (this will create a new string if the key does not exist).
    /// </summary>
    /// <param name="in_pattern">The substring pattern to search for in a Converse string.</param>
    /// <param name="in_replacement">The string to replace the pattern once found.</param>
    /// <param name="in_isRegex">Determines whether the pattern uses regular expressions.</param>
    /// <param name="in_isRawAttributes">Determines whether the replacement string contains binary Converse attributes.</param>
    public void Replace(string in_pattern, string in_replacement, bool in_isRegex = false, bool in_isRawAttributes = false)
    {
        if (string.IsNullOrEmpty(in_pattern))
            return;

        var first = _replacementStrings.FirstOrDefault(x => x.Pattern == in_pattern);
        
        if (first != null)
        {
            first.Replacement = in_replacement;
            return;
        }

        _replacementStrings.Add(new ReplacementString(in_pattern, in_replacement, in_isRegex, in_isRawAttributes));
    }

    /// <summary>
    /// Unregisters a redirected key or replacement pattern from the event handler.
    /// </summary>
    /// <param name="in_key">The Converse key or replacement pattern to unregister.</param>
    public void Restore(string in_key)
    {
        if (string.IsNullOrEmpty(in_key))
            return;
        
        _redirectedStrings.RemoveAll(x => x.Key == in_key);
        _replacementStrings.RemoveAll(x => x.Pattern == in_key);
    }
}