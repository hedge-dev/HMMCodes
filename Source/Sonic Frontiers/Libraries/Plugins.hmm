Library "Plugins" by "Hyper"
{
    #include "Helpers" noemit
    #include "SaveData" noemit

    #lib "Helpers"
    #lib "Memory"
    #lib "Player"
    #lib "StringMapOperation"

    #import "Collections"

    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `app::player::StatePluginBase`.
    /// </summary>
    [StructLayout(LayoutKind.Sequential, Size = 0x28)]
    public struct StatePluginBase
    {
        VFUNCTION_PTR(StatePluginBase, 1, uint, GetNameHash)
    }

    /// <summary>
    /// A struct representation of `app::player::StatePlugin<T>`.
    /// </summary>
    [StructLayout(LayoutKind.Sequential, Size = 0x28)]
    public struct StatePlugin
    {
        public StatePluginBase Base;
    }

    /// <summary>
    /// A struct representation of `app::player::PlayerStatePlugin`.
    /// </summary>
    [StructLayout(LayoutKind.Sequential, Size = 0x28)]
    public struct PlayerStatePlugin
    {
        public StatePlugin Base;
    }

    /// <summary>
    /// A struct representation of `app::player::StatePluginManager`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct StatePluginManager
    {
        /// <summary>
        /// An array of pointers to `app::player::StatePluginBase` instances.
        /// </summary>
        [FieldOffset(0x18)] public ObjectMoveArray<Memory.Pointer<StatePluginBase>> Plugins;

        /// <summary>
        /// Gets an instance of `app::player::StatePluginBase` by name.
        /// </summary>
        /// <param name="in_pluginName">The name of the state plugin.</param>
        /// <returns>An instance of `app::player::StatePluginBase` requested by name.</returns>
        public StatePluginBase* GetStatePlugin(string in_pluginName)
        {
            foreach (var pPlugin in Plugins)
            {
                if (pPlugin.pData == null)
                    continue;

                if (pPlugin.pData->GetNameHash()() == StringMapOperation.ComputeHash(in_pluginName))
                    return pPlugin.pData;
            }

            return null;
        }

        MAKE_GENERIC_API(GetStatePlugin)
    }

    /// <summary>
    /// A struct representation of `app::player::StatePluginAirTrick`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public struct StatePluginAirTrick
    {
        /// <summary>
        /// Determines whether air tricks are enabled.
        /// </summary>
        [FieldOffset(0x3D)] public bool IsEnabled;
    }

    /// <summary>
    /// A struct representation of `app::player::StatePluginBattle`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public struct StatePluginBattle
    {
        /// <summary>
        /// Bit flags for the state of this battle.
        /// </summary>
        [FieldOffset(0x7C)] public BattleFlags Flags;

        /// <summary>
        /// An enum containing known flags for `app::player::StatePluginBattle`.
        /// </summary>
        [Flags]
        public enum BattleFlags : short
        {
            /// <summary>
            /// The player has Phantom Rush.
            /// </summary>
            IsPhantomRush = 0x200
        }
    }

    /// <summary>
    /// A struct representation of `app::player::StatePluginBoost`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public struct StatePluginBoost
    {
        /// <summary>
        /// The maximum amount of boost the player can hold.
        /// </summary>
        [FieldOffset(0x3C)] public float BoostCapacity;

        /// <summary>
        /// The current amount of boost for the player.
        /// </summary>
        [FieldOffset(0x40)] public float BoostAmount;

        /// <summary>
        /// The current time remaining for infinite boost.
        /// </summary>
        [FieldOffset(0x54)] public float InfiniteBoostTimer;

        /// <summary>
        /// Bit flags for the boost gauge.
        /// </summary>
        [FieldOffset(0xD0)] public BoostFlags Flags;
    
        /// <summary>
        /// Gets the boost gauge level from the current boost capacity.
        /// </summary>
        /// <returns>The current boost gauge level guessed from the boost capacity.</returns>
        public ushort GetBoostLevelFromCapacity()
        {
            return (ushort)((BoostCapacity - 100.0f) / 12.5f);
        }

        /// <summary>
        /// Gets the boost capacity from the current boost gauge level.
        /// </summary>
        /// <param name="in_boostGaugeLevel">The boost gauge level.</param>
        /// <returns>The current boost capacity guessed from the boost gauge level.</returns>
        public float GetBoostCapacityFromLevel()
        {
            ushort? boostGaugeLevel = SAVE_GET_PARAM(character.boostGaugeLevel);

            if (boostGaugeLevel == null)
                return 100.0f;
            
            return 100.0f + (boostGaugeLevel.Value * 12.5f);
        }

        /// <summary>
        /// An enum containing known flags for `app::player::StatePluginBoost`.
        /// </summary>
        [Flags]
        public enum BoostFlags : uint
        {
            /// <summary>
            /// The gauge is currently recharging.
            /// </summary>
            IsGaugeRecharging = 1,

            /// <summary>
            /// The player is air boosting.
            /// </summary>
            IsAirBoost = 2,

            /// <summary>
            /// The gauge is empty and unusable by the player (in the red zone).
            /// </summary>
            IsGaugeEmpty = 8,

            /// <summary>
            /// The gauge is currently being displayed.
            /// </summary>
            IsGaugeVisible = 0x10,

            /// <summary>
            /// The player is Cylooping whilst boosting.
            /// </summary>
            IsCyloopBoost = 0x20,

            /// <summary>
            /// The player is boosting.
            /// </summary>
            IsBoosting = 0x20000
        }
    }

    /// <summary>
    /// A struct representation of `app::player::StatePluginQuickStep`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public struct StatePluginQuickStep
    {
        /// <summary>
        /// The type of the current quick step spline.
        /// </summary>
        [FieldOffset(0x29)] public QuickStepLineType LineType;

        /// <summary>
        /// The index of the current quick step lane.
        /// </summary>
        [FieldOffset(0x2A)] public byte LineIndex;

        /// <summary>
        /// An enum representing the quick step line types.
        /// </summary>
        public enum QuickStepLineType : byte
        {
            Line2_Left,
            Line2_Right,
            Line3,
            Line5,
            Line1
        }

        /// <summary>
        /// Gets whether the player is allowed to quick step in the specified direction.
        /// </summary>
        /// <param name="in_quickStepRight">Determines if the player is quick stepping to the right.</param>
        /// <returns>A boolean representing whether the player can quick step in the specified direction.</returns>
        public static bool IsQuickStepLegal(bool in_quickStepRight = false)
        {
            var pStatePluginQuickStep = Player.State.GetStatePlugin<StatePluginQuickStep>();

            if (pStatePluginQuickStep == null)
                return false;

            if (in_quickStepRight)
            {
                switch (pStatePluginQuickStep->LineType)
                {
                    case QuickStepLineType.Line2_Left:
                        return pStatePluginQuickStep->LineIndex == 0;

                    case QuickStepLineType.Line3:
                        return pStatePluginQuickStep->LineIndex != 2;

                    // TODO: verify this.
                    case QuickStepLineType.Line5:
                        return pStatePluginQuickStep->LineIndex != 3;

                    default:
                        return false;
                }
            }
            else
            {
                switch (pStatePluginQuickStep->LineType)
                {
                    case QuickStepLineType.Line2_Right:
                        return pStatePluginQuickStep->LineIndex == 2;

                    case QuickStepLineType.Line3:
                    case QuickStepLineType.Line5: // TODO: verify this.
                        return pStatePluginQuickStep->LineIndex != 1;

                    default:
                        return false;
                }
            }
        }
    }
}