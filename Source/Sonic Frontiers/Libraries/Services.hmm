Library "Services" by "Hyper"
{
    #include "Helpers" noemit

    #lib "GameManager"
    #lib "Helpers"
    #lib "Memory"
    #lib "PhotoModeParameters"
    #lib "Resources"

    #import "Collections"
    #import "GameTypes"
    #import "Graphics"
    #import "SaveData"

    #load "System.Numerics.dll"
    
    using System.Numerics;
    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `app::camera::CameraService`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x1B8)]
    public struct CameraService
    {
        /// <summary>
        /// Determines if the camera is being controlled by the player.
        /// </summary>
        [FieldOffset(0x1AC)] public bool IsFreeCamera;

        /// <summary>
        /// Bit flags for the current camera.
        /// </summary>
        [FieldOffset(0x1AE)] public CameraFlags Flags;

        [Flags]
        public enum CameraFlags : short
        {
            IsControllable = 0x01
        }

        /// <summary>
        /// A struct representation of `app::camera::CameraService::LockonInfo`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x78)]
        public struct LockonInfo { }
    }

    /// <summary>
    /// A struct representation of `app::game::ExpManager`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xF0)]
    public struct ExpManager
    {
        /// <summary>
        /// An instance of `hh::game::GameService`, the base class for `app::game::ExpManager`.
        /// </summary>
        [FieldOffset(0)]    public GameService.Data GameService;

        /// <summary>
        /// The experience data for Sonic.
        /// </summary>
        [FieldOffset(0x80)] public PlayerData Sonic;

        /// <summary>
        /// The experience data for Amy.
        /// </summary>
        [FieldOffset(0x9C)] public PlayerData Amy;

        /// <summary>
        /// The experience data for Knuckles.
        /// </summary>
        [FieldOffset(0xB8)] public PlayerData Knuckles;

        /// <summary>
        /// The experience data for Tails.
        /// </summary>
        [FieldOffset(0xD4)] public PlayerData Tails;

        /// <summary>
        /// A struct representation of the experience data for each character.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct PlayerData
        {
            /// <summary>
            /// The amount of skill pieces being added to the total.
            /// </summary>
            public int PendingSkillPieces;

            /// <summary>
            /// The total amount of skill pieces.
            /// </summary>
            public int TotalSkillPieces;

            /// <summary>
            /// The total amount of skill points.
            /// </summary>
            public short TotalSkillPoints;
        }
    }

    /// <summary>
    /// A struct representation of `app::level::LevelInfo`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x100)]
    public struct LevelInfo
    {
        /// <summary>
        /// An instance of `hh::game::GameService`, the base class for `app::level::LevelInfo`.
        /// </summary>
        [FieldOffset(0)]    public GameService.Data GameService;

        /// <summary>
        /// A pointer to an instance of the current `app::level::StageData`.
        /// </summary>
        [FieldOffset(0x78)] public StageInfo.StageData* pStageData;

        /// <summary>
        /// An array of pointers to `app::level::PlayerInformation` instances.
        /// </summary>
        [FieldOffset(0xC8)] UNMANAGED_FIXED_ARRAY(PlayerInformation*, PlayerInfo, 1)

        /// <summary>
        /// Gets the name ID of the current stage.
        /// </summary>
        /// <returns>The current stage ID.</returns>
        public static string GetCurrentStageID()
        {
            var pLevelInfo = GameManager.GetService<LevelInfo>();

            if (pLevelInfo == null)
                return string.Empty;

            if (pLevelInfo->pStageData == null)
                return string.Empty;

            return pLevelInfo->pStageData->Name.ToString();
        }

        public static bool IsCustomStage()
        {
            var pLevelInfo = GameManager.GetService<LevelInfo>();

            if (pLevelInfo == null)
                return false;

            if (pLevelInfo->pStageData == null)
                return false;

            return pLevelInfo->pStageData->CyberName[1] != '-';
        }

        /// <summary>
        /// A struct representation of `app::level::PlayerInformation`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x540, Pack = 0x10)]
        public struct PlayerInformation
        {
            /// <summary>
            /// The handle value for the player object.
            /// </summary>
            [FieldOffset(0x10)]  public int PlayerHandle;

            /// <summary>
            /// The index of the current player character.
            /// 
            /// 0 - Sonic
            /// 1 - Amy
            /// 2 - Knuckles
            /// 3 - Tails
            /// </summary>
            [FieldOffset(0x18)]  public byte CharacterIndex;

            /// <summary>
            /// Determines if the current player is grounded.
            /// </summary>
            [FieldOffset(0x2EE)] public bool IsGrounded;
        }
    }

    /// <summary>
    /// A struct representation of `hh::fmv::MovieManager`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xE8)]
    public struct MovieManager
    {
        /// <summary>
        /// An array of handles to instances of `app::gfx::MoviePlayerObject`.
        /// </summary>
        [FieldOffset(0x98)] public ObjectMoveArray<int> Handles;

        public static HandleManagerBase.Data* GetHandleManager()
        {
            /* 0x150274D5F */
            long sig = ScanSignature
            (
                "\x48\x8B\x0D\xCC\xCC\xCC\xCC\x48\x8B\xD6\xE8\xCC\xCC\xCC\xCC\x38\x5C\x24\x70",
                "xxx????xxxx????xxxx"
            );

            if (sig == 0)
                return null;

            /* 0x143DAB038 */
            return *(HandleManagerBase.Data**)Memory.ReadEffectiveAddress(sig);
        }

        public static MoviePlayerObject* GetMoviePlayerObjectFromHandle(int in_handle)
        {
            var manager = GetHandleManager();
            
            if (manager == null)
                return null;

            return (MoviePlayerObject*)manager->GetObject(in_handle);
        }

        public MoviePlayer* GetCurrentMoviePlayer()
        {
            if (Handles.Length <= 0)
                return null;

            var pMoviePlayerObject = GetMoviePlayerObjectFromHandle(Handles[0]);

            if (pMoviePlayerObject == null)
                return null;

            return pMoviePlayerObject->pMoviePlayer;
        }
    }

    /// <summary>
    /// A struct representation of `app::game::PhotoModeService`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x1F0, Pack = 0x10)]
    public struct PhotoModeService
    {
        /// <summary>
        /// An instance of `hh::game::GameService`, the base class for `app::game::PhotoModeService`.
        /// </summary>
        [FieldOffset(0)]    public GameService.Data GameService;

        /// <summary>
        /// A pointer to an instance of `photomode.rfl`.
        /// </summary>
        [FieldOffset(0x88)] public Resources.Data* pRflPhotoMode;

        /// <summary>
        /// A pointer to the `PhotoModeParameters` struct from `photomode.rfl`.
        /// </summary>
        [FieldOffset(0x90)] public PhotoModeParameters.Root* pPhotoModeParameters;

        /// <summary>
        /// Determines whether Photo Mode is enabled.
        /// </summary>
        [FieldOffset(0xDC)] public bool IsEnabled;

        /// <summary>
        /// The index of the current filter applied to the viewport.
        /// </summary>
        [FieldOffset(0xE0)] public int FilterIndex;
    }

    /// <summary>
    /// A struct representation of `app::save::SaveManager`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x228)]
    public struct SaveManager
    {
        [FieldOffset(0x70)] public void* pGameStepListener;

        [FieldOffset(0x78)] public void* pFrameworkNotificationListener;

        [FieldOffset(0x80)] public void* pUserInfoEventListener;

        [FieldOffset(0x88)] public void* pStatsListener;

        [FieldOffset(0xB8)] public SaveInterface* pSaveInterface;
    }

    /// <summary>
    /// A struct representation of `app::ScriptSequenceManager`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x170)]
    public struct ScriptSequenceManager
    {
        /// <summary>
        /// An instance of `hh::game::GameService`, the base class for `app::ScriptSequenceManager`.
        /// </summary>
        [FieldOffset(0)]     public GameService.Data GameService;

        /// <summary>
        /// A pointer to the vftable for the inherited `hh::game::GameStepListener`.
        /// </summary>
        [FieldOffset(0x70)]  public long pGameStepListener;

        /// <summary>
        /// A pointer to the vftable for the inherited `hh::game::SaveManagerListener`.
        /// </summary>
        [FieldOffset(0x78)]  public long pSaveManagerListener;

        /// <summary>
        /// An array of pointers to instances of `app::ScriptSequence`.
        /// </summary>
        [FieldOffset(0x80)]  public ObjectMoveArray<Memory.Pointer<ScriptSequence>> ScriptSequences;

        /// <summary>
        /// A pointer to an LPCRITICAL_SECTION.
        /// </summary>
        [FieldOffset(0xF8)]  public long pCriticalSection;

        /// <summary>
        /// An array of callback functions.
        /// </summary>
        [FieldOffset(0x120)] public ObjectMoveArray<CallbackData> CallbackFunctions;

        /// <summary>
        /// A pointer to an instance of `script.rfl`.
        /// </summary>
        [FieldOffset(0x140)] public Resources.Data* pRflScript;

        /// <summary>
        /// A pointer to an instance of `talk_event_camera_preset.rfl`.
        /// </summary>
        [FieldOffset(0x150)] public Resources.Data* pRflTalkEventCameraPreset;

        /// <summary>
        /// A struct representation of `app::ScriptSequence`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x250)]
        public struct ScriptSequence
        {
            /// <summary>
            /// A pointer to an instance of `app::ScriptSequenceManager`.
            /// </summary>
            [FieldOffset(0x38)] public ScriptSequenceManager* pScriptSequenceManager;

            /// <summary>
            /// A fixed array of instances of `app::game::Script`.
            /// </summary>
            [FieldOffset(0x48)] UNMANAGED_FIXED_ARRAY(Script*, pScripts, 5)

            /// <summary>
            /// The name of this sequence.
            /// </summary>
            [FieldOffset(0x74)] public fixed byte pSequenceName[64];

            /// <summary>
            /// The type of overlay being displayed for the current sequence.
            /// </summary>
            [FieldOffset(0xC0)] public int OverlayType;

            /// <summary>
            /// The amount of overlay jobs present in the current sequence.
            /// </summary>
            [FieldOffset(0xC8)] public int OverlayJobCount;

            /// <summary>
            /// A struct representation of `app::game::Script`.
            /// </summary>
            [StructLayout(LayoutKind.Explicit, Size = 0xD8)]
            public struct Script
            {
                /// <summary>
                /// A pointer to the Lua state.
                /// </summary>
                [FieldOffset(0x18)] public long pLuaState;
            }
        }

        /// <summary>
        /// A struct representation of the user data for storing callback functions.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x30)]
        public struct CallbackData
        {
            /// <summary>
            /// The name of this callback function.
            /// </summary>
            [FieldOffset(0x08)] public Helpers.UnmanagedString Name;

            /// <summary>
            /// A pointer to the function pertaining to this callback.
            /// </summary>
            [FieldOffset(0x10)] public long pFunction;

            public override string ToString() => Name.ToString();
        }
    }

    /// <summary>
    /// A struct representation of `app::level::StageInfo`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xB8)]
    public struct StageInfo
    {
        /// <summary>
        /// An instance of `hh::game::GameService`, the base class for `app::level::StageInfo`.
        /// </summary>
        [FieldOffset(0)]    public GameService.Data GameService;

        /// <summary>
        /// A pointer to an instance of `app::fnd::AppResourceManagerListener`.
        /// </summary>
        [FieldOffset(0x70)] public long pAppResourceManagerListener;

        /// <summary>
        /// An array of pointers to instances of `app::level::StageData`.
        /// </summary>
        [FieldOffset(0x78)] public ObjectMoveArray<Memory.Pointer<StageData>> Stages;

        /// <summary>
        /// A struct representation of `app::level::StageData`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x170)]
        public struct StageData
        {
            /// <summary>
            /// The name of this stage.
            /// </summary>
            [FieldOffset(0x18)]  public MoveArray<byte> Name;

            /// <summary>
            /// The name of the scene parameters to use.
            /// </summary>
            [FieldOffset(0x48)]  public MoveArray<byte> SceneParamName;

            /// <summary>
            /// The directory location of this stage.
            /// </summary>
            [FieldOffset(0x78)]  public MoveArray<byte> Location;

            /// <summary>
            /// The name of this Cyber Space stage.
            /// </summary>
            [FieldOffset(0x90)]  public MoveArray<byte> CyberName;

            /// <summary>
            /// The index of this stage.
            /// </summary>
            [FieldOffset(0xA8)]  public int StageIndex;

            /// <summary>
            /// The index of this Cyber Space stage (used for Arcade Mode).
            /// </summary>
            [FieldOffset(0xAC)]  public int CyberStageIndex;

            /// <summary>
            /// The index of the world this stage takes place in.
            /// </summary>
            [FieldOffset(0xB0)]  public int WorldIndex;

            /// <summary>
            /// The index of the default scene parameters to use.
            /// </summary>
            [FieldOffset(0xB4)]  public int DefaultSceneParamIndex;

            /// <summary>
            /// The attributes of this stage.
            /// </summary>
            [FieldOffset(0xB8)]  public long AttributeFlags;

            /// <summary>
            /// The missions for this stage.
            /// </summary>
            [FieldOffset(0xC0)]  public long MissionFlags;

            /// <summary>
            /// The static sector IDs for the terrain instances for this stage.
            /// </summary>
            [FieldOffset(0xC8)]  public ObjectMoveArray<byte> StaticSectors;

            /// <summary>
            /// The dynamic sector IDs for the terrain instances for this stage.
            /// </summary>
            [FieldOffset(0xE8)]  public ObjectMoveArray<byte> DynamicSectors;

            /// <summary>
            /// The time limit of this stage (unused).
            /// </summary>
            [FieldOffset(0x10C)] public float TimeLimit;

            /// <summary>
            /// The height the player dies at in this stage (unused).
            /// </summary>
            [FieldOffset(0x110)] public float DeadHeight;

            /// <summary>
            /// The duration of the noise effect when warping into Cyber Space.
            /// </summary>
            [FieldOffset(0x114)] public float NoiseTime;

            /// <summary>
            /// The required ring count to complete the ring mission.
            /// </summary>
            [FieldOffset(0x124)] public int RingMissionThreshold;

            /// <summary>
            /// Rank times for Cyber Space.
            /// </summary>
            [FieldOffset(0x12C)] public RankTimes Ranks;

            /// <summary>
            /// Rank times for Cyber Space on Extreme difficulty.
            /// </summary>
            [FieldOffset(0x13C)] public RankTimes RanksVeryHard;

            /// <summary>
            /// Rank times for Cyber Space Challenge.
            /// </summary>
            [FieldOffset(0x14C)] public RankTimes RanksChallenge;

            /// <summary>
            /// Rank times for Cyber Space Challenge (totalled).
            /// </summary>
            [FieldOffset(0x15C)] public RankTimes RanksChallengeAll;

            [StructLayout(LayoutKind.Sequential)]
            public struct RankTimes
            {
                public int S, A, B, C;

                public RankTimes(int in_s, int in_a, int in_b, int in_c)
                {
                    S = in_s;
                    A = in_a;
                    B = in_b;
                    C = in_c;
                }
            }
        }

        public enum Attributes
        {
            Cyber = 0x01,
            Minigame = 0x02,
            Hacking = 0x03,
            LastBoss = 0x04,
            MasterTrial = 0x05,
            Tutorial = 0x06,
            Navmesh = 0x08,
            HeightField = 0x09,
            PointCloud = 0x0A,
            Autosave = 0x0B,
            Diving = 0x0D,
            SideStep = 0x0E,
            Athletic = 0x0F,
            Boarding = 0x10,
            Drift = 0x11,
            SideView = 0x12,
            Lava = 0x13,
            Sonic = 0x14,
            Tails = 0x15,
            Amy = 0x16,
            Knuckles = 0x17,
            BattleRush = 0x18,
            BossRush = 0x19,
            Extra = 0x1A,
            DeleteFallDeadCollision = 0x1B,
            DeleteAirWallCollision = 0x1C,
            DeleteGrindRail = 0x1D,
            ChangeNewCollision = 0x1E,
            RestrictDebris = 0x1F,
            SpecialParryEffect = 0x20
        }

        public enum CyberModes
        {
            LowGravity = 0x01,
            TimeExtend = 0x02,
            SpeedScale = 0x03,
            Nitro = 0x04,
            MaxSpeedChallenge = 0x05
        }

        public enum Missions
        {
            Goal = 0x01,
            Rank = 0x02,
            NoDamage = 0x03,
            Ring = 0x04,
            RedRing = 0x05,
            NumberRing = 0x06,
            SilverMoonRing = 0x07,
            HideGoal = 0x08,
            ShadowTails = 0x09,
            Mine = 0x0A,
            Animal = 0x0B
        }
    }

    /// <summary>
    /// A struct representation of `app::game::TimeService`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x140)]
    public struct TimeService
    {
        /// <summary>
        /// An instance of `hh::game::GameService`, the base class for `app::game::TimeService`.
        /// </summary>
        [FieldOffset(0)]    public GameService.Data GameService;
        
        [FieldOffset(0x88)] public Time CurrentTime;

        [StructLayout(LayoutKind.Explicit, Size = 0x10)]
        public struct Time
        {
            [FieldOffset(0)]    public int Days;

            [FieldOffset(0x04)] public int Hours;

            [FieldOffset(0x08)] public int Minutes;

            [FieldOffset(0x0C)] public float Seconds;
        }
    }

    /// <summary>
    /// A struct representation of `app::ui::UIOverlayService`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x160)]
    public struct UIOverlayService
    {
        /// <summary>
        /// An instance of `hh::game::GameService`, the base class for `app::ui::UIOverlayService`.
        /// </summary>
        [FieldOffset(0)]     public GameService.Data GameService;

        [FieldOffset(0x120)] public ObjectMoveArray<Memory.Pointer<OverlayJob>> OverlayJobs;

        /// <summary>
        /// A struct representation of `app::ui::RequestOverlayBegin`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit)]
        public struct RequestOverlayBegin
        {
            [FieldOffset(0x18)] public int OverlayType;

            [FieldOffset(0x48)] public Helpers.UnmanagedString Caption;
        }

        /// <summary>
        /// A struct representation of `app::ui::RequestOverlayCaption`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x70)]
        public struct RequestOverlayCaption
        {
            [FieldOffset(0)] public RequestOverlayBegin Base;
        }

        /// <summary>
        /// A struct representation of `app::ui::RequestOverlayWindow`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0xC0)]
        public struct RequestOverlayWindow
        {
            [FieldOffset(0)] public RequestOverlayBegin Base;
        }

        /// <summary>
        /// A struct representation of `app::ui::UIOverlayService::OverlayJob`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x28)]
        public struct OverlayJob
        {
            [FieldOffset(0x18)] public RequestOverlayBegin* pRequestOverlay;
        }
    }
}