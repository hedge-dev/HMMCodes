Library "PhotoMode" by "Hyper"
{
    #include "Helpers" noemit

    #lib "GameManager"
    #lib "GameMode"
    #lib "GameObject"
    #lib "GameService"
    #lib "Logger"
    #lib "Lua"
    #lib "Memory"
    #lib "Player"

    #import "GOComponents"
    #import "Messages"
    #import "Services"

    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    private static bool _isInitialised = false;
    private static bool _isNewGameMode = false;
    private static bool _isPackfileLoaded = false;

    private static string _lastGameModeName = "GameModeUnknown";

    private static long _sigPhotoModeServiceStaticClassCtor = 0;

    /* 0x140208C80 */
    private static long _sigInvokePhotoMode = ScanSignature("\x40\x55\x53\x56\x41\x54\x41\x56\x48\x8D\x6C\x24\xC9", "xxxxxxxxxxxxx");
    FUNCTION_PTR(char, fpInvokePhotoMode, _sigInvokePhotoMode, void* in_pPhotoModeService, bool in_isEnabled)

    /// <summary>
    /// A struct representation of `app::game::ObjPhotoModeCamera`.
    /// </summary>
    [Helpers.InternalName("PhotoModeCamera"), StructLayout(LayoutKind.Explicit, Size = 0x268)]
    public struct ObjPhotoModeCamera
    {
        /// <summary>
        /// A pointer to an instance of `app::camera::PhotoModeCamera`.
        /// </summary>
        [FieldOffset(0x258)] public PhotoModeCamera* pPhotoModeCamera;
    }

    /// <summary>
    /// A struct representation of `app::camera::PhotoModeCamera`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x210)]
    public struct PhotoModeCamera
    {
        /// <summary>
        /// The current orbit centre position of the camera.
        /// </summary>
        [FieldOffset(0x20)] public Vector3 Centre;

        /// <summary>
        /// The current yaw of the camera.
        /// </summary>
        [FieldOffset(0x50)] public float Yaw;

        /// <summary>
        /// The current pitch of the camera.
        /// </summary>
        [FieldOffset(0x54)] public float Pitch;

        /// <summary>
        /// The current distance from the orbit centre of the camera.
        /// </summary>
        [FieldOffset(0x58)] public float Distance;

        /// <summary>
        /// The current amount of tilt between pi and negative pi.
        /// </summary>
        [FieldOffset(0x90)] public float Tilt;

        /// <summary>
        /// The current amount of zoom between pi and negative pi.
        /// </summary>
        [FieldOffset(0xA8)] public float Zoom;

        /// <summary>
        /// The starting orbit centre position of the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x170)] public Vector3 StartCentre;

        /// <summary>
        /// The starting yaw of the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1A0)] public float StartYaw;

        /// <summary>
        /// The starting pitch of the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1A4)] public float StartPitch;

        /// <summary>
        /// The starting distance from the orbit centre of the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1A4)] public float StartDistance;

        /// <summary>
        /// The starting amount of tilt for the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1E0)] public float StartTilt;

        /// <summary>
        /// The starting amount of zoom for the camera (used for resetting).
        /// </summary>
        [FieldOffset(0x1F8)] public float StartZoom;

        /// <summary>
        /// The index of the current speed of the camera.
        /// </summary>
        [FieldOffset(0x204)] public int SpeedIndex;
    }

    [LibraryInitializer]
    public void Init()
    {
        if (_isInitialised)
            return;

        if (_sigPhotoModeServiceStaticClassCtor == 0)
        {
            /* 0x140205929 */
            _sigPhotoModeServiceStaticClassCtor = ScanSignature
            (
                "\xE8\xCC\xCC\xCC\xCC\x48\x8B\xD0\x48\x8B\xCB\xE8\xCC\xCC\xCC\xCC\x48\x85\xC0\x74\x0C\x44\x0F\xB6\xB0\x98\x00\x00\x00",
                "x????xxxxxxx????xxxxxxxxxxxxx"
            );
            
            if (_sigPhotoModeServiceStaticClassCtor == 0)
            {
                Logger.Error("[Camera] Failed to register app::game::PhotoModeService!");
                return;
            }

            /* 0x143DAD260 */
            GameService.AddUserService(Memory.ReadEffectiveAddress(Memory.ReadCall(_sigPhotoModeServiceStaticClassCtor)));
        }

        _isInitialised = true;
    }

    [LibraryUpdate]
    public void Update()
    {
        if (_lastGameModeName != GameMode.GetName())
        {
            _lastGameModeName = GameMode.GetName();
            _isNewGameMode = true;
            _isPackfileLoaded = false;
        }

        if (Lua.GetState() != 0)
        {
            if (_isNewGameMode)
            {
                Lua.Call("LoadLevel", "photomode_misc");
                _isNewGameMode = false;
                _isPackfileLoaded = true;
            }
        }
        else
        {
            _isPackfileLoaded = false;
        }
    }

    /// <summary>
    /// Determines whether Photo Mode is enabled.
    /// </summary>
    /// <returns>A boolean representing whether Photo Mode is enabled.</returns>
    public bool IsEnabled()
    {
        var pPhotoModeService = GameManager.GetService<PhotoModeService>();

        if (pPhotoModeService == null)
            return false;
        
        return pPhotoModeService->IsEnabled;
    }

    /// <summary>
    /// Sets whether Photo Mode is enabled.
    /// </summary>
    /// <param name="in_isEnabled">The enabled state of Photo Mode.</param>
    public void SetEnabled(bool in_isEnabled)
    {
        if (!_isPackfileLoaded)
            return;
        
        var pPhotoModeService = GameManager.GetService<PhotoModeService>();

        if (pPhotoModeService == null)
            return;

        void SendMessage(bool in_isEnabled)
        {
            Messages.SendMessageToGameService
            (
                &pPhotoModeService->GameService,
                new MsgUISetGameCockpitEnabled("PhotoMode", 0xFFFFFFFFFFFFFFFF, in_isEnabled)
            );
        }

        SendMessage(!in_isEnabled);

        GET_FUNCTION_PTR(fpInvokePhotoMode)(pPhotoModeService, in_isEnabled);

        /*
            The reason this is being sent twice is because
            of the Red Ring display in Cyber Space.
            
            If we don't restore the "game cockpit" at least
            once, the Red Ring display will persist.

            This does also mean the Red Ring display will
            never return until completely exiting out of the
            stage, but that's a small price to pay for having
            no HUD at all.
        */
        SendMessage(in_isEnabled);
        SendMessage(!in_isEnabled);
    }

    /// <summary>
    /// Toggles Photo Mode.
    /// </summary>
    public void Toggle()
    {
        SetEnabled(!IsEnabled());
    }

    /// <summary>
    /// Gets an instance of `app::camera::PhotoModeCamera` from `app::game::ObjPhotoModeCamera`.
    /// </summary>
    /// <returns>A pointer to an instance of `app::camera::PhotoModeCamera`.</returns>
    public PhotoModeCamera* GetCamera()
    {
        var pObjPhotoModeCamera = GameManager.GetGameObject<ObjPhotoModeCamera>();

        if (pObjPhotoModeCamera == null)
            return null;

        return pObjPhotoModeCamera->pPhotoModeCamera;
    }
}