Code "Rail Crouch" in "Gameplay" by "WasifBoomz" does 
/*
Allows Sonic to crouch on grind rails to gain or lose speed based on the angle of the rail.

Notes;
- The speed cap is increased while grinding.
- The boost has been modified to become an accelerator while grinding.
*/
//
    #include "Reflection" noemit

    #lib "Memory"
    #lib "Player"
    #lib "Reflection"
    #lib "SonicParameters"
    #lib "AmyParameters"
    #lib "KnucklesParameters"
    #lib "TailsParameters"

    #load "System.Numerics.dll"
    
    using System.Numerics;

    static bool _isInitialised = false;
    static bool _isRailCrouching = false;

    const float _grindCrouchSpeed = 40.0f;
    const float _boostGrindSpeedMin = 3.0f;
    const float _boostGrindSpeed = 45.0f;

    static Reflection.ReflectionInfo<SonicParameters.Root> _sonicParametersInfo;
    static Reflection.ReflectionInfo<AmyParameters.Root> _amyParametersInfo;
    static Reflection.ReflectionInfo<KnucklesParameters.Root> _knucklesParametersInfo;
    static Reflection.ReflectionInfo<TailsParameters.Root> _tailsParametersInfo;

    // TODO (Hyper): reduce boilerplate with library features.
    static float GetAcceleration()
    {
        switch (Player.GetPlayerType())
        {
            case Player.PlayerType.Sonic:
            {
                if (_sonicParametersInfo != null && _sonicParametersInfo.pData != null)
                    return RFL_GET_CONTEXTUAL_PLAYER_PARAM(_sonicParametersInfo, modePackage.grind.acceleForce);
                
                break;
            }

            case Player.PlayerType.Amy:
            {
                if (_amyParametersInfo != null && _amyParametersInfo.pData != null)
                    return RFL_GET_PARAM(_amyParametersInfo, forwardView.modePackage.grind.acceleForce, in_acceleForce);
                
                break;
            }

            case Player.PlayerType.Knuckles:
            {
                if (_knucklesParametersInfo != null && _knucklesParametersInfo.pData != null)
                    return RFL_GET_PARAM(_knucklesParametersInfo, forwardView.modePackage.grind.acceleForce, in_acceleForce);
                
                break;
            }

            case Player.PlayerType.Tails:
            {
                if (_tailsParametersInfo != null && _tailsParametersInfo.pData != null)
                    return RFL_GET_PARAM(_tailsParametersInfo, forwardView.modePackage.grind.acceleForce, in_acceleForce);
                
                break;
            }
        }

        return 0.0f;
    }

    // TODO (Hyper): reduce boilerplate with library features.
    static void SetAcceleration(float in_acceleForce)
    {
        if (_sonicParametersInfo != null && _sonicParametersInfo.pData != null)
            RFL_SET_CONTEXTUAL_PLAYER_PARAM(_sonicParametersInfo, modePackage.grind.acceleForce, in_acceleForce);

        if (_amyParametersInfo != null && _amyParametersInfo.pData != null)
            RFL_SET_PARAM(_amyParametersInfo, forwardView.modePackage.grind.acceleForce, in_acceleForce);

        if (_knucklesParametersInfo != null && _knucklesParametersInfo.pData != null)
            RFL_SET_PARAM(_knucklesParametersInfo, forwardView.modePackage.grind.acceleForce, in_acceleForce);

        if (_tailsParametersInfo != null && _tailsParametersInfo.pData != null)
            RFL_SET_PARAM(_tailsParametersInfo, forwardView.modePackage.grind.acceleForce, in_acceleForce);
    }
//
{
    if (!_isInitialised)
    {
        fixed (bool* p_isRailCrouching = &_isRailCrouching)
        {
            // Modify animation when crouching on rails.
            WriteAsmHook
            (
                $@"
                    ; Check if the Grind Land animation is playing
                    cmp byte ptr [r15 - 0x2], 0x52
                    jnz end
                    mov rcx, {(long)p_isRailCrouching}

                    ; Check if the player is crouching
                    cmp byte ptr [rcx], 1
                    jnz reset

                    ; Set Transition Time and Next State
                    mov byte ptr [r15 + 0x2], 0x52
                    mov dword ptr [r15 + 0x4], 0x3F800000
                    jmp end

                reset:
                    ; Reset Transition Time and Next State
                    mov byte ptr [r15 + 0x2], 0x51
                    mov dword ptr [r15 + 0x4], 0x3E4CCCCD

                end:
                ",

                /* 0x140E8B4DC */
                ScanSignature
                (
                    "\x41\x8B\x47\x08\xF2\x41\x0F\x10\x07",
                    "xxxxxxxxx"
                ),
                        
                HookBehavior.After
            );
        }

        // Jump over the grind boost code.
        Memory.WriteForceJump
        (
            /* v1.41: 0x14B06DEAA */
            ScanSignature
            (
                "\x74\x0F\xBA\x01\x00\x00\x00\x48\x83\xC4\x20\x5B\xE9\xC5\xA3\x86\xF5",
				"xxxxxxxxxxxxxxxxx"
            )
        );

        _isInitialised = true;
    }

    _sonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

    if (_sonicParametersInfo.pData != null)
    {
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(_sonicParametersInfo, modePackage.grind.maxSpeed, 100.0f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(_sonicParametersInfo, modePackage.grind.maxBoostSpeed, 0.0f);
    }

    _amyParametersInfo = Reflection.GetDataInfo<AmyParameters.Root>("amy_common");

    if (_amyParametersInfo.pData != null)
    {
        RFL_SET_PARAM(_amyParametersInfo, forwardView.modePackage.grind.maxSpeed, 100.0f);
        RFL_SET_PARAM(_amyParametersInfo, forwardView.modePackage.grind.maxBoostSpeed, 0.0f);
    }

    _knucklesParametersInfo = Reflection.GetDataInfo<KnucklesParameters.Root>("knuckles_common");

    if (_knucklesParametersInfo.pData != null)
    {
        RFL_SET_PARAM(_knucklesParametersInfo, forwardView.modePackage.grind.maxSpeed, 100.0f);
        RFL_SET_PARAM(_knucklesParametersInfo, forwardView.modePackage.grind.maxBoostSpeed, 0.0f);
    }

    _tailsParametersInfo = Reflection.GetDataInfo<TailsParameters.Root>("tails_common");

    if (_tailsParametersInfo.pData != null)
    {
        RFL_SET_PARAM(_tailsParametersInfo, forwardView.modePackage.grind.maxSpeed, 100.0f);
        RFL_SET_PARAM(_tailsParametersInfo, forwardView.modePackage.grind.maxBoostSpeed, 0.0f);
    }

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;
        
    SetAcceleration(0.0f);

    _isRailCrouching = false;
    
    if (Player.Input.IsDown(Player.InputActionType.PlayerStomping))
    {
        if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrind)
        {
            Player.Animation.SetAnimation("GRIND_LAND");
            _isRailCrouching = true;
        }

        // Increase speed based on gravity.
        SetAcceleration(GetAcceleration() - (Vector3.Normalize(kinematics->Velocity).Y) * _grindCrouchSpeed);
    }
    
    // Increase acceleration when boosting.
    if (IS_STATE_FLAG(IsBoost))
    {
        SetAcceleration(GetAcceleration() + (Vector3.Normalize(kinematics->Velocity).Y) * _boostGrindSpeed);
        SetAcceleration(Math.Max(GetAcceleration(), _boostGrindSpeedMin));
    }
}