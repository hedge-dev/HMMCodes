Code "Allow Diving for Traversal" in "Gameplay" by "WasifBoomz" does "Allows Sonic to Dive for traversal by pressing the Light Dash button in the air."
//
    #lib "BlackboardStatus"
    #lib "Sonic"

    using System.Collections.Generic;

    static Sonic.StateID[] allowStates =
    {
        Sonic.StateID.StateJump,
        Sonic.StateID.StateBounceJump,
        Sonic.StateID.StateDoubleJump,
        Sonic.StateID.StateSpringJump,
        Sonic.StateID.StateFall,
        Sonic.StateID.StateBumpJump,
        Sonic.StateID.StateTumble,
        Sonic.StateID.StateAirBoost,
        Sonic.StateID.StateStompingDown,
        Sonic.StateID.StateSpinDash,
        Sonic.StateID.StateSpinBoost,
        Sonic.StateID.StateSpinBoostCharge,
        Sonic.StateID.StateDropDash,
        Sonic.StateID.StateGrindJump,
        Sonic.StateID.StateGrindDoubleJump,
        Sonic.StateID.StateRecoveryJump,
        Sonic.StateID.StateSpringJumpHeadLand,
        Sonic.StateID.StateAvoid,
        Sonic.StateID.StateAvoidLocal, 
        Sonic.StateID.StateAvoidToTarget,
        Sonic.StateID.StateAvoidUpper,
        Sonic.StateID.StateFan,
        Sonic.StateID.StateSpinSlash,
        Sonic.StateID.StateChargeAttack,
        Sonic.StateID.StateSlingshot,
        Sonic.StateID.StateSmash,
        Sonic.StateID.StateHomingAttack,
        Sonic.StateID.StateHomingFinished,
        Sonic.StateID.StateHomingRepelled,
        Sonic.StateID.StateCrossSlash
    };

    static Dictionary<Sonic.PlayerActionType, Sonic.StateID> divingStateExits = new Dictionary<Sonic.PlayerActionType, Sonic.StateID>()
    {
        {Sonic.PlayerActionType.PlayerLightDash, Sonic.StateID.StateFall},
        {Sonic.PlayerActionType.PlayerStomping, Sonic.StateID.StateStompingDown},
        {Sonic.PlayerActionType.PlayerJump, Sonic.StateID.StateRecoveryJump},
        {Sonic.PlayerActionType.PlayerLeftStep, Sonic.StateID.StateLeftStepRun},
        {Sonic.PlayerActionType.PlayerRightStep, Sonic.StateID.StateRightStepRun},
        {Sonic.PlayerActionType.PlayerAttack, Sonic.StateID.StateAcceleCombo1},
        {Sonic.PlayerActionType.PlayerSonicboom, Sonic.StateID.StateSpinBoostCharge}
    };

    static bool isInitialised = false;

    static bool canDive = false;
    static bool inDivableState = false;
    static bool isDiving = false;
    static bool isDivingFromCommand = false;
//
{
    if (!isInitialised)
    {
        WriteProtected<byte>
        (
            /* 0x140893844 */
            ScanSignature
            (
                "\x74\x0E\x48\x8B\xD7\x48\x8B\xC8\xE8\xCC\xCC\xCC\xCC\x4C\x8B\xF0\x41\xB8\x0F\x00\x00\x00\x49\x8B\xD6\x48\x8B\xCB\xE8\xCC\xCC\xCC\xCC\x48\x8D\x55\xC7\x49\x8B\xCE\xE8\xCC\xCC\xCC\xCC\x48\x89\x74\x24\x20",
                "xxxxxxxxx????xxxxxxxxxxxxxxxx????xxxxxxxx????xxxxx"
            ),

            0xEB, 0x48
        );

        fixed (bool* pisDivingFromCommand = &isDivingFromCommand)
        {
            WriteAsmHook
            (
                $@"
                    mov  ecx, [rax+48h]
                    mov  [rdi+34h], ecx
                    mov  ecx, [rax+4Ch]
                    mov  [rdi+38h], ecx
                    mov  eax, [rax+50h]

                    mov  rdx, {(long)pisDivingFromCommand}
                    cmp  byte ptr [rdx], 0
                    jz   exit

                    mov  dword ptr [rdi+34h], 0x40A00000
                    mov  dword ptr [rdi+38h], 0x41400000
                exit:
                ",
                    
                /* 0x14083637F */
                ScanSignature
                (
                    "\x8B\x48\x48\x89\x4F\x34",
                    "xxxxxx"
                ),
                    
                HookBehavior.Replace
            );
        }

        isInitialised = true;
    }

    if (BlackboardStatus.Get() == 0)
        return;

    if (BlackboardStatus.IsSuper())
        return;

    isDiving = Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsDiving);

    if (!isDiving)
        isDivingFromCommand = false;

    void NotifyInDivableState(Sonic.StateID stateId, Sonic.StateID[] stateStackTrace)
    {
        inDivableState = false;

        foreach (Sonic.StateID id in allowStates)
        {
            if (stateId == id)
                inDivableState = true;
        }
    }

    if (Sonic.IsGroundedSpecial())
        canDive = true;

    if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerLightDash) && inDivableState && canDive)
    {
        isDivingFromCommand = true;
        canDive = false;
        Sonic.State.SetState(Sonic.StateID.StateDiving);
    }

    if (isDiving && isDivingFromCommand && !Sonic.IsGroundedSpecial())
    {
        foreach (KeyValuePair<Sonic.PlayerActionType, Sonic.StateID> kvp in divingStateExits)
        {
            if (Sonic.Input.IsPressed(kvp.Key)) 
            {
                Sonic.State.SetState(kvp.Value);
                isDivingFromCommand = false;
            }
        }
    }

    Sonic.State.AddStateNotifyAction(NotifyInDivableState);
}