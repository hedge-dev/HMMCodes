Code "Always Dodge with Side Step" in "Gameplay/Skills" by "Hyper" does "Always makes Sonic dodge left or right instead of side stepping whilst not running."
//
    #include "BlackboardStatus" noemit
    
    #lib "HMM"
    #lib "Player"
    #lib "StringMapOperation"
    #lib "Time"

    #import "States"

    static bool _isInitialised = false;
    static bool _isDodgeAnalog = false;
    static bool _isDodgeInCyberSpace = false;
    static bool _isInputBuffered = false;
    static bool _isParried = false;
    
    static float _dodgeTimer = 0.0f;
    static float _dodgeTimerThreshold = 0.08f;
    static float _sideStepThreshold = 15.0f;

    static void PerformBumperActions(bool in_isRight = false)
    {
        if (Player.Kinematics.GetHorizontalMagnitude() >= _sideStepThreshold)
            return;

        if (!Player.Status.IsGrounded()   ||
            IS_WORLD_FLAG(IsOutOfControl) ||
            IS_WORLD_FLAG(IsAutoRun))
        {
            return;
        }
        
        if (Player.Input.IsDown(Player.InputActionType.PlayerLeftStep) &&
            Player.Input.IsDown(Player.InputActionType.PlayerRightStep))
        {
            if (!_isInputBuffered)
            {
                Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateParry);
                _isInputBuffered = true;
                _isParried = true;
            }

            return;
        }
        else if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateParry)
        {
            _isInputBuffered = false;
        }

        // Prevent dodging immediately after parrying.
        if (_isParried && (Player.Input.IsDown(Player.InputActionType.PlayerLeftStep) ||
            Player.Input.IsDown(Player.InputActionType.PlayerRightStep)))
        {
            return;
        }
        else
        {
            _isParried = false;
        }

        if (Player.Input.IsDown(in_isRight
            ? Player.InputActionType.PlayerRightStep
            : Player.InputActionType.PlayerLeftStep))
        {
            _dodgeTimer += Time.GetDeltaTime();

            if (_dodgeTimer >= _dodgeTimerThreshold)
            {
                if (!_isDodgeAnalog)
                {
                    var dir = StateAvoidParameter.GetDirectionRelativeToCameraPlane(in_isRight);

                    Player.State.AddStateParameter<StateAvoidParameter>(new StateAvoidParameter(dir));
                }

                Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAvoid);

                _dodgeTimer = 0.0f;
            }
        }
    }
//
{
    if (!_isInitialised)
    {
        foreach (var code in HMM.GetCodes())
        {
            switch (code)
            {
                case "Gameplay/Skills/Always Dodge in Stick Direction":
                    _isDodgeAnalog = true;
                    break;

                case "Gameplay/Cyber Space/Skills/Enable Dodge and Parry":
                    _isDodgeInCyberSpace = true;
                    break;
            }
        }

        _isInitialised = true;
    }

    if (IS_WORLD_FLAG(IsCyberSpace) && !_isDodgeInCyberSpace)
        return;
    
    PerformBumperActions();
    PerformBumperActions(true);
}