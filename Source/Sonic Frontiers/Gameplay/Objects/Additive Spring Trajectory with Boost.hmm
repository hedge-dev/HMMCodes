Code "Additive Spring Trajectory with Boost" in "Gameplay/Objects" by "WasifBoomz & Hyper" does "Keeps your velocity upon hitting a vertical spring while boosting."
//
    #include "BlackboardStatus" noemit
    #include "Helpers" noemit

    #lib "Player"
	
    #load "System.Numerics.dll"
	
    using System.Collections.Generic;
    using System.Numerics;

    static bool _isInitialised = false;
    static bool _isBoosting = false;

    static int _state = 0;

    static Vector3 _previousVelocity;
//
{
    if (!_isInitialised)
    {
        /* 0x1408B9F20 */
        long sigSetAnimation = ScanSignature
        (
            "\x40\x53\x48\x83\xEC\x20\xF6\x81\x78\x01\x00\x00\x10\x48\x8B",
            "xxxxxxxxxxxxxxx"
        );

        fixed (bool* p_isBoosting = &_isBoosting)
        fixed (int* p_state = &_state)
        {
            WriteAsmHook
            (
                $@"
                    movaps xmm1, xmm2
                    shufps xmm1, xmm2, 0x99
                    addss  xmm2, xmm1
                    movaps xmm0, xmm1
                    mov    eax, dword ptr [rsi + 0x50]
                    shr    eax, 0x0A
                    test   al, 1
                    jnz    exit
                    mov    rax, {(long)p_isBoosting}
                    cmp    byte ptr [rax], 0
                    jz     exit
                    mov    rax, {(long)p_state}
                    mov    byte ptr [rax], 1
                exit:
                ",
                    
                /* 0x1409814F8 */
                ScanSignature
                (
                    "\x0F\x28\xCA\x0F\xC6\xCA\x99\xF3\x0F\x58\xD1\x0F\x28\xC1\x0F\xC6\xC1\x55\xF3\x0F\x58\xD0\x0F\x28\xC2\x0F\xC6\xC0\x00\x0F\x59\x44\x24\x30\x0F\x5C\xE0\x0F\x29\x64\x24\x20\xE8\xCC\xCC\xCC\xCC\x84\xC0\x75\x5A",
                    "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx????xxxx"
                ),
                    
                HookBehavior.Replace
            );
        }

        _isInitialised = true;
    }

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    _isBoosting = IS_STATE_FLAG(IsBoost) && !(IS_STATE_FLAG(IsGrind) || IS_STATE_FLAG(IsWallClimb));

    switch (_state)
    {
        case 0:
            _previousVelocity = kinematics->Velocity;
            break;

        case 1:
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateBumpJump);
            _state++;
            break;

        case 2:
        {
            if (Player.Kinematics.GetHorizontalMagnitude() < Math.Abs(kinematics->Velocity.Y))
                kinematics->Velocity += new Vector3(_previousVelocity.X, 0, _previousVelocity.Z);

            _state = 0;

            break;
        }

        default:
            _state = 1;
            break;
    }
}