Code "Classic Jump Deceleration" by "WasifBoomz" in "Physics" does
/*
Forces jump deceleration to be based on your current speed, similar to Classic Sonic games.

Notes;
- The "Jump Deceleration" option affects how much effect this has on you.
*/
//
    #include "Reflection" noemit

    #lib "Reflection"
    #lib "SonicParameters"
    #lib "AmyParameters"
    #lib "KnucklesParameters"
    #lib "TailsParameters"
    #lib "Memory"
    #lib "Sonic"
    #lib "Time"
    #lib "MathHelpers"

    #load "System.Numerics.dll"
    #load "System.Linq.dll"

    using System.Linq;
    using System.Numerics;

    const float airDragPowerMin = 0.1f;
    const float airDragPowerMax = 1.1f;
    const float maxYSpeed = 50;
    const float minYSpeed = -50;

    static float jumpDecelerationSetting;

    static bool isInitialised = false;

    static Sonic.StateID[] allowStates =
    {
        Sonic.StateID.StateJump,
        Sonic.StateID.StateDoubleJump,
        Sonic.StateID.StateBounceJump,
        Sonic.StateID.StateDoubleJump,
        Sonic.StateID.StateFall,
        Sonic.StateID.StateGrindJump,
        Sonic.StateID.StateGrindDoubleJump,
        Sonic.StateID.StateSliding,
        Sonic.StateID.StateDropDash
    };
//
{
    if (!isInitialised)
    {
        fixed (float* pJumpDecelerationSetting = &jumpDecelerationSetting)
        {
            // Writes to the Jump Deceleration setting value
            WriteAsmHook
            (
                $@"
                    mov   dword ptr [rcx+3Ch], 0
                    mov   r9, {(long)pJumpDecelerationSetting}
                    movss dword ptr [r9], xmm1
                    ret
                ",
                
                /* 0x14054D0A4 */
                Memory.ReadCall
                (
                    /* 0x1408A98C0 */
                    ScanSignature
                    (
                        "\xE8\xCC\xCC\xCC\xCC\xE9\xE9\x01\x00\x00\x48\x8B\x89\x48\x02\x00\x00",
                        "x????xxxxxxxxxxxx"
                    )
                ),
                    
                HookBehavior.Replace
            );
        }

        isInitialised = true;
    }

    var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
    var AmyParametersInfo = Reflection.GetDataInfo<AmyParameters.Root>("amy_common");
    var KnucklesParametersInfo = Reflection.GetDataInfo<KnucklesParameters.Root>("knuckles_common");
    var TailsParametersInfo = Reflection.GetDataInfo<TailsParameters.Root>("tails_common");

    if (SonicParametersInfo.pData != null)
    {
        RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
        RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
        RFL_SET_PARAM(SonicParametersInfo, cyberspaceSV.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(SonicParametersInfo, cyberspaceSV.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
    }

    if (AmyParametersInfo.pData != null)
    {
        RFL_SET_PARAM(AmyParametersInfo, forwardView.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(AmyParametersInfo, forwardView.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
        RFL_SET_PARAM(AmyParametersInfo, cyberspaceSV.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(AmyParametersInfo, cyberspaceSV.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
    }

    if (KnucklesParametersInfo.pData != null)
    {
        RFL_SET_PARAM(KnucklesParametersInfo, forwardView.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(KnucklesParametersInfo, forwardView.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
        RFL_SET_PARAM(KnucklesParametersInfo, cyberspaceSV.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(KnucklesParametersInfo, cyberspaceSV.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
    }

    if (TailsParametersInfo.pData != null)
    {
        RFL_SET_PARAM(TailsParametersInfo, forwardView.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(TailsParametersInfo, forwardView.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
        RFL_SET_PARAM(TailsParametersInfo, cyberspaceSV.modePackage.jumpSpeed.baseAirDragScaleMin, 0.0f);
        RFL_SET_PARAM(TailsParametersInfo, cyberspaceSV.modePackage.jumpSpeed.baseAirDragScaleMax, 0.0f);
    }

    var kinematics =  Player.Kinematics.Get();

    if (kinematics == null)
        return;

    if (Player.Status.IsGroundedSpecial())
        return;

    float yVel = kinematics->Velocity.Y;
    if (yVel < minYSpeed || yVel > maxYSpeed)
        return;

    if (Player.Kinematics.GetHorizontalMagnitude() < 5)
        return;
    
    if (!allowStates.Contains(Player.State.GetCurrentStateID<Sonic.StateID>()))
        return;

    kinematics->Velocity = new Vector3(kinematics->Velocity.X, 0, kinematics->Velocity.Z);
    kinematics->Velocity -= (Vector3.Normalize(kinematics->Velocity)) * (Player.Kinematics.GetHorizontalMagnitude() * Time.GetDeltaTime() * MathHelpers.Lerp(airDragPowerMin, airDragPowerMax,jumpDecelerationSetting));
    kinematics->Velocity.Y = yVel;
}
