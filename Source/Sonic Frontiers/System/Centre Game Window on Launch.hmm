Patch "Centre Game Window on Launch" in "System" by "Hyper"
//
    #load "System.Drawing.dll"
    #load "System.Xml.dll"

    using System.Drawing;
    using System.IO;
    using System.Xml.Serialization;

    [XmlRoot(ElementName = "ScreenSetting")]
    public class ScreenSetting
    {
        [XmlAttribute(AttributeName = "left")]
        public int Left { get; set; }

        [XmlAttribute(AttributeName = "top")]
        public int Top { get; set; }

        [XmlAttribute(AttributeName = "width")]
        public int Width { get; set; }

        [XmlAttribute(AttributeName = "height")]
        public int Height { get; set; }

        [XmlAttribute(AttributeName = "resolutionWidth")]
        public int ResolutionWidth { get; set; }

        [XmlAttribute(AttributeName = "resolutionHeight")]
        public int ResolutionHeight { get; set; }

        [XmlAttribute(AttributeName = "fullscreenStyle")]
        public int FullscreenStyle { get; set; }

        [XmlAttribute(AttributeName = "fullscreenState")]
        public int FullscreenState { get; set; }
    }

    [System.Runtime.InteropServices.DllImport("user32.dll")]
    static extern int GetSystemMetrics(int nIndex);

    static Size GetScreenSize()
        => new Size(GetSystemMetrics(0), GetSystemMetrics(1));

    static int GetTitleBarHeight()
        => GetSystemMetrics(31);
//
{
    string xml = Path.Combine
    (
        Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
        @"SEGA\SonicFrontiers\steam\x64\screen_setting.xml"
    );

    if (!File.Exists(xml))
    {
        Console.WriteLine($"[Centre Game Window on Launch] Code halted, file not found: {xml}");
        return;
    }

    try
    {
        using (StringReader reader = new StringReader(File.ReadAllText(xml)))
        {
            var screenSetting = (ScreenSetting)new XmlSerializer(typeof(ScreenSetting)).Deserialize(reader);

            Size screen = GetScreenSize();

            int left = (screen.Width / 2) - (screenSetting.Width / 2);
            int top  = ((screen.Height / 2) - (screenSetting.Height / 2)) - GetTitleBarHeight();

            if (left < 0)
            {
                Console.WriteLine("[Centre Game Window on Launch] Invalid X position! Defaulting to zero...");
                left = 0;
            }

            if (top < 0)
            {
                Console.WriteLine("[Centre Game Window on Launch] Invalid Y position! Defaulting to zero...");
                top = 0;
            }

            // Force new left value as default value.
            WriteAsmHook
            (
                $"mov dword ptr [rbx], 0x{left:X}",

                /* 0x150B29868 */
                ScanSignature
                (
                    "\x4D\x85\xFF\x74\x3A\x48\x85\xF6",
                    "xxxxxxxx"
                ),

                HookBehavior.Replace
            );

            // Force new top value as default value.
            WriteAsmHook
            (
                $"mov dword ptr [rbx + 4], 0x{top:X}",

                /* 0x150B29877 */
                ScanSignature
                (
                    "\x48\x85\xC0\x74\x2B\x4C\x89\xF9",
                    "xxxxxxxx"
                ),

                HookBehavior.Replace
            );
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[Centre Game Window on Launch] {ex}");
        return;
    }

    // Kill XML value reading for left.
    WriteNop
    (
        /* 0x150B29887 */
        ScanSignature
        (
            "\x89\x03\xE8\xCC\xCC\xCC\xCC\x48\x89\xE9",
            "xxx????xxx"
        ),

        7
    );

    // Kill XML value reading for top.
    WriteNop
    (
        /* 0x150B29891 */
        ScanSignature
        (
            "\x89\x43\x04\xE8\xCC\xCC\xCC\xCC\x4C\x89\xF1",
            "xxxx????xxx"
        ),

        3
    );
}