Code "Fix Air Boost Reset" in "Fixes/Gameplay" by "Hyper & Weezley" does "Allows Sonic to perform another Air Boost after previously using it before performing a homing attack, stomp, or using a spring." 
//
    #include "BlackboardStatus" noemit

    #lib "Bitwise"
    #lib "BlackboardStatus"
    #lib "Player"
    #lib "HMM"

    using System.Collections.Generic;

    static List<Sonic.StateID> AllowedStates = new()
    {
        Sonic.StateID.StateHomingFinished,
        Sonic.StateID.StateSpringJump,
        Sonic.StateID.StateStompingBounce,
        Sonic.StateID.StateStompingFlip,
        Sonic.StateID.StateUpDownPole,
        Sonic.StateID.StateUpDownPoleDamage
    }

    static List<Sonic.StateID> DisallowedStates = new()
    {
        Sonic.StateID.StateAirBoost,
        Sonic.StateID.StateAuraTrain,
        Sonic.StateID.StateGrindStep,
        Sonic.StateID.StateJumpBoardLaunch,
        Sonic.StateID.StateCaught,
        Sonic.StateID.StateSpinBoost
    }

    static List<Sonic.StateID> DontAirBoost = new()
    {
        Sonic.StateID.StateGrindStep,
        Sonic.StateID.StateHoldStand,
        Sonic.StateID.StateHangPole,
        Sonic.StateID.StateUpDownPole,
        Sonic.StateID.StateUpDownPoleDamage
    }

    static bool _isInitialised = false;
    static bool _isRestoredAirBoost = false;
    static bool doNotAirBoost = false;
    static bool noCycloneStart = false;
    static bool noSpinStart = false;
//
{
    bool playerPowerBoost = IS_WORLD_FLAG(IsPowerBoost);

    if (!_isInitialised)
    {
        foreach (var code in HMM.GetCodes())
        {
            if (code == "Disable Card Spin Boost Transition")
            {
                noSpinStart = true;
                break;
            }

            if (code == "Disable Cyclone Transition")
            {
                noCycloneStart = true;
                break
            }
        }

        Sonic.StateID NotifyAirBoostReset(Sonic.StateID in_stateId, Sonic.StateID[] in_stateStackTrace)
        {
            // Reset flag for StateAirBoost or when the player is grounded.
            if (DisallowedStates.Contains(in_stateId) || Player.Status.IsGrounded())
            {
                _isRestoredAirBoost = false;
                return in_stateId;
            }

            foreach (var state in AllowedStates)
            {
                if (state == in_stateId)
                _isRestoredAirBoost = true;
            }

            if (DontAirBoost.Contains(in_stateId))
            {
                doNotAirBoost = true;
                return in_stateId;
            }
            else
            {
                doNotAirBoost = false;
                return in_stateId;
            }

            return in_stateId;
        }

        Player.State.AddStateNotifyAction<Sonic.StateID>(NotifyAirBoostReset);

        _isInitialised = true;
    }

    // Disable restored air boost for Super Sonic.
    if (BlackboardStatus.IsSuper())
        _isRestoredAirBoost = false;

    // Disable restored air boost for diving.
    if (IS_STATE_FLAG(IsDiving))
        _isRestoredAirBoost = false;

    // Disable restored air boost for skateboarding.
    if (IS_STATE_FLAG(IsBoarding))
        _isRestoredAirBoost = false;

    // Disable restored air boost for when the player is dead.
    if (IS_WORLD_FLAG(IsDead))
        _isRestoredAirBoost = false;

    if (Player.Input.IsPressed(Player.InputActionType.PlayerBoost) && !Player.Status.IsGroundedSpecial() && _isRestoredAirBoost && !doNotAirBoost)
    {
        // Exit into Air Boost depending on current character.
        if (playerPowerBoost)
        {
            if (Player.GetPlayerType() == Player.PlayerType.Tails)
            {
                Player.State.SetState<Tails.StateID>(noCycloneStart ? Tails.StateID.StateAirBoostCyclone : Tails.StateID.StateCycloneAppear);
            }
            else if (Player.GetPlayerType() == Player.PlayerType.Amy)
            {
                Player.State.SetState<Amy.StateID>(noSpinStart ? Amy.StateID.AmyStateTarotBoost : Amy.StateID.AmyStateTarotBuildAir);
            }
            else if (Player.GetPlayerType() == Player.PlayerType.Knuckles)
            {
                Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.KnucklesStateDrillBoostAir)
            }
            else
            {
                Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAirBoost);
            }
        }
        else
        {
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAirBoost);
        }

        _isRestoredAirBoost = false;
    }
}
