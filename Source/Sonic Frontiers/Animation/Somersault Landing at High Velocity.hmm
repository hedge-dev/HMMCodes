Code "Somersault Landing at High Velocity" in "Animation" by "Hyper" does 
/*
Enters Sonic into a somersault state when landing from a moderate height at a high velocity whilst retaining your momentum.

This state lasts a fraction of a second, but keep in mind that within that time, you will be unable to perform certain actions until the animation is complete.
*/
//
    #include "BlackboardStatus" noemit
    
    #lib "HMM"
    #lib "Player"

    #load "System.Numerics.dll"

    #import "States"

    using System.Numerics;
    using System.Collections.Generic;
    
    static bool _isInitialised = false;
    static bool _isRecoveryJumpCharging = false;
    static bool _isSpinDashAutoRunAllowed = false;

    static Vector3 _lastGroundedPosition;

    static List<Sonic.StateID> _exitStates = new()
    {
        Sonic.StateID.StateJump,
        Sonic.StateID.StateRecoveryJump,
        Sonic.StateID.StateFall,
        Sonic.StateID.StateBumpJump,
        Sonic.StateID.StateRecovery
    };

    static float _heightFallen = 0.0f;
//
{
    if (!_isInitialised)
    {
        if (HMM.GetCodes().Contains("Gameplay/Skills/Allow Spin Dash During Auto Run"))
            _isSpinDashAutoRunAllowed = true;
            
        Sonic.StateID NotifyStateSpringJumpHeadLandDamageCollision(Sonic.StateID in_stateId, Sonic.StateID[] in_stateStackTrace)
        {
            bool isStateSpringJumpHeadLand = in_stateId == Sonic.StateID.StateSpringJumpHeadLand;
            
            if (isStateSpringJumpHeadLand)
            {
                Player.Collision.SetEntityCollision(false);
            }
            else if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJumpHeadLand)
            {
                Player.Collision.SetEntityCollision(true);
            }

            return in_stateId;
        }

        Player.State.AddStateNotifyAction<Sonic.StateID>(NotifyStateSpringJumpHeadLandDamageCollision);

        _isInitialised = true;
    }

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    var pStateRecoveryJump = Player.State.GetState<StateRecoveryJump>();

    if (pStateRecoveryJump != null)
        _isRecoveryJumpCharging = pStateRecoveryJump->IsDropDashCharge;

    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJumpHeadLand)
    {
        if (Player.Input.IsPressed(Player.InputActionType.PlayerJump) ||
            Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
        {
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateRun);
        }

        if (Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom))
        {
            if (!_isSpinDashAutoRunAllowed && IS_WORLD_FLAG(IsAutoRun))
                goto CheckGrounded;
            
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateSpinBoost);
        }
    }

CheckGrounded:
    if (Player.Status.IsGrounded())
    {
        _lastGroundedPosition = kinematics->Position;

        if (!_exitStates.Contains(Player.State.GetPreviousStateID<Sonic.StateID>()))
            goto Reset;

        if (Player.Kinematics.GetHorizontalMagnitude() > 15.0f && _heightFallen >= 5.0f)
        {
            if (IS_STATE_FLAG(IsBoost))
            {
                // Allow StateJump to continue running if we're boosting.
                if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateJump)
                    goto Reset;
            }

            // Prevent somersault landing on walls.
            if (IS_STATE_FLAG(IsWallClimb))
                goto Reset;

            // Allow StateRecoveryJump to enter StateDropDash.
            if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateRecoveryJump && _isRecoveryJumpCharging)
                goto Reset;
            
            Player.State.SetState(Sonic.StateID.StateSpringJumpHeadLand);
        }
        
    Reset:
        _heightFallen = 0.0f;
    }
    else
    {
        /* Reset position if the player has reached
           apex height and has begun falling again. */
        if ((_lastGroundedPosition.Y - kinematics->Position.Y) < _heightFallen)
        {
            _lastGroundedPosition = kinematics->Position;
        }

        _heightFallen = _lastGroundedPosition.Y - kinematics->Position.Y;
    }
}


