Code "Somersault Landing at High Velocity" in "Animation" by "Hyper" does 
/*
Enters Sonic into a somersault state when landing from a moderate height at a high velocity whilst retaining your momentum.

This state lasts a fraction of a second, but keep in mind that within that time, you will be unable to perform certain actions until the animation is complete.
*/
//
    #include "BlackboardStatus" noemit
    
    #lib "Player"

    #load "System.Numerics.dll"

    #import "States"

    using System.Numerics;
    using System.Collections.Generic;

    static Vector3 LastGroundedPosition;

    static List<Sonic.StateID> ExitStates = new()
    {
        Sonic.StateID.StateJump,
        Sonic.StateID.StateRecoveryJump,
        Sonic.StateID.StateFall,
        Sonic.StateID.StateBumpJump,
        Sonic.StateID.StateRecovery
    };

    static float HeightFallen = 0.0f;
    
    static bool IsInitialised = false;
    static bool IsRecoveryJumpCharging = false;
//
{
    if (!IsInitialised)
    {
        Sonic.StateID NotifyStateSpringJumpHeadLandDamageCollision(Sonic.StateID in_stateId, Sonic.StateID[] in_stateStackTrace)
        {
            bool isStateSpringJumpHeadLand = in_stateId == Sonic.StateID.StateSpringJumpHeadLand;
            
            if (isStateSpringJumpHeadLand)
            {
                Player.Collision.SetEntityCollision(false);
            }
            else if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJumpHeadLand)
            {
                Player.Collision.SetEntityCollision(true);
            }

            return in_stateId;
        }

        Player.State.AddStateNotifyAction<Sonic.StateID>(NotifyStateSpringJumpHeadLandDamageCollision);

        IsInitialised = true;
    }

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    var pStateRecoveryJump = Player.State.GetState<StateRecoveryJump>();

    if (pStateRecoveryJump != null)
        IsRecoveryJumpCharging = pStateRecoveryJump->IsDropDashCharge;

    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpringJumpHeadLand)
    {
        if (Player.Input.IsPressed(Player.InputActionType.PlayerJump) ||
            Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
        {
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateRun);
        }

        if (Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom))
        {
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateSpinBoost);
        }
    }

    if (Player.Status.IsGrounded())
    {
        LastGroundedPosition = kinematics->Position;

        if (!ExitStates.Contains(Player.State.GetPreviousStateID<Sonic.StateID>()))
            goto Reset;

        if (Player.Kinematics.GetHorizontalMagnitude() > 15.0f && HeightFallen >= 5.0f)
        {
            if (IS_STATE_FLAG(IsBoost))
            {
                // Allow StateJump to continue running if we're boosting.
                if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateJump)
                    goto Reset;
            }

            // Allow StateRecoveryJump to enter StateDropDash.
            if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateRecoveryJump && IsRecoveryJumpCharging)
                goto Reset;
            
            Player.State.SetState(Sonic.StateID.StateSpringJumpHeadLand);
        }
        
    Reset:
        HeightFallen = 0.0f;
    }
    else
    {
        /* Reset position if the player has reached
           apex height and has begun falling again. */
        if ((LastGroundedPosition.Y - kinematics->Position.Y) < HeightFallen)
        {
            LastGroundedPosition = kinematics->Position;
        }

        HeightFallen = LastGroundedPosition.Y - kinematics->Position.Y;
    }
}


