Code "Bouncy Jump Ball" in "Animation" by "Hyper" does
/*
Uses bouncy jump ball animations when jumping and double jumping, similar to Sonic Forces.

Notes;
- Tails uses his normal jump ball animation, as he doesn't have a bouncy alternative.
*/
//
    #include "Helpers" noemit

    #lib "Memory"
    #lib "Player"

    static bool _isInitialised = false;

    static sbyte _playerType = 0;
//
{
    if (!_isInitialised)
    {
        /* 0x1409D4A30 */
        long sigPlayAnimationEffectAddr = Memory.ReadCall
        (
            /* 0x14095EC8E */
            ScanSignature
            (
                "\xE8\xCC\xCC\xCC\xCC\x48\x8B\x46\x38\x48\x8B\x88\x08\x01\x00\x00\x48\x85\xC9\x74\x0C\xBA\x8E\xB4\x47\x3B\xE8\xCC\xCC\xCC\xCC\xEB\x03\x48\x8B\xC5",
                "x????xxxxxxxxxxxxxxxxxxxxxx????xxxxx"
            )
        );

        /* 0x14095EC7C */
        long sigSetAnimationCallerAddr = ScanSignature
        (
            "\xE8\xCC\xCC\xCC\xCC\x41\xB0\x01\x48\x8D\x15\xCC\xCC\xCC\xCC\x48\x8B\xCE\xE8\xCC\xCC\xCC\xCC\x48\x8B\x46\x38",
            "x????xxxxxx????xxxx????xxxx"
        );

        /* 0x1408B9F20 */
        long sigSetAnimationAddr = Memory.ReadCall(sigSetAnimationCallerAddr);

        fixed (sbyte* p_playerType = &_playerType)
        {
            // StateJump
            {
                WriteAsmHook
                (
                    $@"
                        test dil, dil
                        jz   playUpdatePhase1Anim
                    playUpdatePhase2Anim:
                        mov  r8b, 0xFE
                        mov  rdx, {TO_STRING_PTR("JUMP_BALL")}
                        mov  rcx, rax
                        mov  rax, {sigSetAnimationAddr}
                        call rax
                        mov  r8b, 1
                        mov  rdx, {TO_STRING_PTR("SPINJUMP")}
                        mov  rcx, rsi
                        mov  rax, {sigPlayAnimationEffectAddr}
                        call rax
                        jmp  exit
                    playUpdatePhase1Anim:
                        mov  rdx, {(long)p_playerType}
                        cmp  byte ptr [rdx], 1
                        jne  playUpdatePhase2Anim
                        mov  r8b, 0xFE
                        mov  rdx, {TO_STRING_PTR("JUMP_START")}
                        mov  rcx, rax
                        mov  rax, {sigSetAnimationAddr}
                        call rax
                    exit:
                    ",

                    /* 0x14095EC6A */
                    ScanSignature
                    (
                        "\x41\xB0\xFE\x48\x8B\xC8\x40\x84\xFF\x74\x59",
                        "xxxxxxxxxxx"
                    ),

                    HookBehavior.Replace
                );

                WriteNop(sigSetAnimationCallerAddr, 23);
            }

            // StateDoubleJump
            WriteAsmHook
            (
                $@"
                    mov  rdx, {TO_STRING_PTR("SPINJUMP")}
                    lea  rdx, [rdx]
                    mov  rcx, rbx
                    mov  rax, {sigPlayAnimationEffectAddr}
                    call rax
                ",

                /* 0x14B9FC903 */
                ScanSignature
                (
                    "\x48\x8D\x15\xCC\xCC\xCC\xCC\x48\x89\xD9\xE8\xCC\xCC\xCC\xCC\x48\x8B\x43\x38",
                    "xxx????xxxx????xxxx"
                ),

                HookBehavior.Replace
            );
        }
        
        _isInitialised = true;
    }

    _playerType = (sbyte)Player.GetPlayerType();
}