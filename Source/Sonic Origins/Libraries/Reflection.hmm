Library "Reflection" by "Hyper" 
{
    #lib "Resources"

    using System.Collections.Generic;

    private static bool _isInitialised = false;
    private static List<string> _rflPointersQueue = new();
    private static Dictionary<string, object> _rflBackups = new();
    private static Dictionary<string, long> _rflPointers = new();

    public class ReflectionInfo<T> where T : unmanaged
    {
        public string Name;
        public Type Type;
        public T* pData;

        public ReflectionInfo(string name, T* pData)
        {
            this.Name = name;
            this.Type = typeof(T);
            this.pData = pData;
        }

        public override string ToString()
        {
            return $"{Name} : 0x{((IntPtr)pData).ToString("X16")}";
        }
    }

    private void Init()
    {
    	if (_isInitialised)
    		return;
    	
    	long GetReflectionPtr(string resourceName, string resourceType, long pResourceData)
    	{
    		if (resourceType != "ResReflection")
    			return pResourceData;

    		if (_rflPointersQueue.Contains(resourceName))
    		{
    			long ptr = *(long*)(pResourceData + 0x60);

    			if (_rflPointers.ContainsKey(resourceName))
    			{
    				_rflPointers[resourceName] = ptr;
    			}
    			else
    			{
    				_rflPointers.Add(resourceName, ptr);
    			}
    		}

    		return pResourceData;
    	}

    	Resources.AddResourceDataAction(GetReflectionPtr);

    	_isInitialised = true;
    }

    public T* GetDataPtr<T>(string rflName) where T : unmanaged
    {
    	Init();

    	if (!_rflPointersQueue.Contains(rflName))
    		_rflPointersQueue.Add(rflName);

    	if (!_rflPointers.ContainsKey(rflName))
    		return null;

        long ptr = _rflPointers[rflName];

        if (ptr == 0)
            return null;

        // Check for BINA signature.
        if (*(int*)(ptr - 0x40) != 0x414E4942)
            return null;

        var result = (T*)ptr;

    	if (result != null && !_rflBackups.ContainsKey(rflName))
            _rflBackups.Add(rflName, *result);

    	return result;
    }

    public ReflectionInfo<T> GetDataInfo<T>(string rflName) where T : unmanaged
    {
        return new ReflectionInfo<T>(rflName, GetDataPtr<T>(rflName));
    }

    public object GetOriginalData(string rflName)
    {
        if (!_rflBackups.ContainsKey(rflName))
            return null;

        return _rflBackups[rflName];
    }

    public T GetOriginalData<T>(string rflName) where T : unmanaged
    {
        return (T)GetOriginalData(rflName);
    }
}


